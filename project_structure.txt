--- Folder Structure ---
[.git]
    ├── COMMIT_EDITMSG
    ├── FETCH_HEAD
    ├── HEAD
    ├── ORIG_HEAD
    ├── config
    ├── description
    ├── [hooks]
        ├── applypatch-msg.sample
        ├── commit-msg.sample
        ├── fsmonitor-watchman.sample
        ├── post-update.sample
        ├── pre-applypatch.sample
        ├── pre-commit.sample
        ├── pre-merge-commit.sample
        ├── pre-push.sample
        ├── pre-rebase.sample
        ├── pre-receive.sample
        ├── prepare-commit-msg.sample
        └── update.sample
    ├── index
    ├── [info]
        └── exclude
    ├── [objects]
        ├── [13]
            └── fb5792205059bb7bfe0c7dd09fcc316b9cf0a3
        ├── [55]
            └── a1cbc146410e4ded134a70caf1b814276c3be3
        ├── [78]
            └── d64083d469249a1d4a85edbef0e5c93a8541a0
        ├── [cf]
            ├── d47797da57a7ce1a1c4a4f9e10f0678e9d085a
            └── dca8a458d4577dd687e079fc13f6af8c44d425
        ├── [info]
        └── [pack]
            ├── pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.idx
            └── pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.pack
    ├── packed-refs
    └── [refs]
        ├── [heads]
            └── main
        ├── [remotes]
            └── [origin]
                ├── HEAD
                └── main
        └── [tags]
.gitignore
README.md
[node_modules]
package-lock.json
package.json
project_structure.txt
[src]
    ├── app.ts
    ├── [config]
        ├── db.ts
        └── passport.ts
    ├── [constants]
        └── openai-models.constant.ts
    ├── [controllers]
        ├── [external]
            ├── [bard]
                └── chat.ts
            ├── [openai]
                ├── chat.ts
                ├── completion.ts
                └── image.ts
            └── [stable-diffusion]
                ├── fetch_from_queue.ts
                ├── text_to_image.ts
                └── text_to_video.ts
        └── [internal]
            ├── ai-coach.ts
            ├── authentication.ts
            ├── exercise.ts
            ├── ingredients.ts
            ├── meal-plan.ts
            ├── meal.ts
            ├── points.ts
            ├── recipe.ts
            ├── user-meal-plan.ts
            ├── user.ts
    ├── [middlewares]
    ├── [models]
        ├── AICoachChat.model.ts
        ├── Acheivement.model.ts
        ├── ComminityPost.model.ts
        ├── Exercise.model.ts
        ├── Feedback.model.ts
        ├── Group.model.ts
        ├── Ingredient.model.ts
        ├── Meal.model.ts
        ├── MealPlan.model.ts
        ├── Notification.model.ts
        ├── Payment.model.ts
        ├── Pts.model.ts
        ├── Recipe.model.ts
        ├── User.model.ts
        ├── UserChat.model.ts
        ├── UserMealPlan.model.ts
        ├── UserMetrics.model.ts
    └── [utils]
tsconfig.json

--- File Contents ---

--- File: .git/COMMIT_EDITMSG ---
Initial setup including server


--- File: .git/FETCH_HEAD ---
55a1cbc146410e4ded134a70caf1b814276c3be3		branch 'main' of https://github.com/AJLewis/bodyone-backend-node


--- File: .git/HEAD ---
ref: refs/heads/main


--- File: .git/ORIG_HEAD ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .git/config ---
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/AJLewis/bodyone-backend-node.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main


--- File: .git/description ---
Unnamed repository; edit this file 'description' to name the repository.


--- File: .git/hooks/applypatch-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


--- File: .git/hooks/commit-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


--- File: .git/hooks/fsmonitor-watchman.sample ---
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


--- File: .git/hooks/post-update.sample ---
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


--- File: .git/hooks/pre-applypatch.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


--- File: .git/hooks/pre-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


--- File: .git/hooks/pre-merge-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


--- File: .git/hooks/pre-push.sample ---
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


--- File: .git/hooks/pre-rebase.sample ---
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


--- File: .git/hooks/pre-receive.sample ---
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


--- File: .git/hooks/prepare-commit-msg.sample ---
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


--- File: .git/hooks/update.sample ---
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


--- File: .git/index ---
DIRC      d�XzE�zd�XzE�z  �,  ��  �     �ƻ��8�i��Q-��<S�} 
.gitignore        d�XzH{�d�XzH{�  �-  ��  �      ��n1(K�C�V;WX%�L�� 	README.md d�Z�*�d�Z�*�  琫  ��  �    ��W� PY�{�}П�1k�� package-lock.json d�Z�+�;d�Z�+�;  ��  ��  �     Nx�@��i$�J������:�A� package.json      d�Z�-��d�Z�-��  �m  ��  �      ���w��W��JO��g��Z 	server.js TREE    5 0
�ܨ�X�W}և�y����D�%A��6�mT�������\=D

--- File: .git/info/exclude ---
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


--- File: .git/objects/13/fb5792205059bb7bfe0c7dd09fcc316b9cf0a3 ---
x�i��ڶ X��W����`�"��g����4�u3�D��ʼ����e��.Y�����Ľ:`�~�9���?0�=������_��㇧�Ə�������ن�x�n��?�72#�-߃_��D�D�u|�>X�!]��oGF�Z���'Qj� LŬ��	`���&oP���[�wK3��^͏뷫��X��i�ݓ�;��A��ޟ`M�߀������������iX\ۏ�w������b��5�� �~������w�;�' ��������	�Q���]_O#F��U�/����� �+�~�v{�𲾓:|�c��"Hd�V�D�^���?��|�������gbV�%����0#+)!�������|t��۵)�� F�Y�U�	�u?['{ۢϔZO�Η*i��Z�DPX8�&�Ҟ�T��+�QN\��o�����n$��|8����o_�b����_��!�\���k�b��@ <rHM���h�χ�׷��w孟��;�Y���3kD�)��'���. r}� ,ٻZ��o��5�/�tf$�6�y��,��=����� ��Ȥ c�*��^Q�Q����=3����ΐ��]�n�le2�����L����P���b䷙v"3j��$5֣rZ-����L{򌚮��� X=���zX8��>|�@�-���|�S�~� �)�;~'�>`��?~�y��B 1�%O�ʖ���R�to��ǖ;��X�[�RL��;Q���v�!�#�c�C!-�S�.��a��鱏J�B8F��]G%�͏4r^�	h�;��.���!z�>j���2M�)�n��יĮ�TzN���
��0ߐ�p���Y�F{�eB͘�1F���193�S�2�%�[��8�M������Z{���������7@h?��J��7/R��WU�h֞1&�wv�)�� ���B����3m��cEe<�'�:J*br�E$�(�Tǻ����^�TDy;�a�:���a?@�Mb���&X
���4#H^�%Tj���ƫ?Ä�?_��8������((m�--�4�'�	7F��%�bv�-���wmw�fyk5�#׭�L��DĮ<ԔBꈩ��Jn��?_��X̵\�f3�7�hzu�ץC�`�~b)�_�O�]����ϴ��}�Oc��������G_�_�n���3�ā���W��rIs��QC{O��~��4gJ���@�����S��kw_,�Cg}�:'�\��¶{}�%&��nN����R>ݓ�g�
�5v_Դ��W�5�9\z�Y�����d�������}㒦��!��~�0ޣ��l���;�$YϹ�[��lH�&=6e�i�qUlؓ^{��C�0�9Ҋ�]Hg�-%�Xs�"($�VG��!��گ�2Ѿ"�)���M`��n��r�����i�Q���E���[���h'�V�&*�q�+\�}�g�1�#��5^r�}]nÍ���G���ԍ)�+Z҉I�!��ڄ?�NGSr9��]���ݍ3������ldS*�-��Pnw�3��RtQ 35�8R������߽�� [�������̭\�B-s��QC{��0��w���Բ��xq���<����xG�Ǘ+��wIl9��~�a�<ЭMUn�����f"dYu�s����������[�@�'��{��ǭUc�� !���7@k�G�#]� �B�YP�$�����l『�|�:dg�"�s��q;u�&�hN�ܴg������ZV���`g���s`+��(�Q|.6�[��h�	8D�Oj��������g^,��bAk�|�[��>�7�;$d��˰�W�Ȁ^���~��OڝY��� �����f"��ބn8��$�'������.:2]Q�D�����(�h�7܊�~��F�R~%���MG�rM��'5u{��4\���pS\ԋx2�)r��zg�%w��fy�)�3�;}o�0��*�h|\��N����Rï7\��(�f��rV<�`H��{Y��N�PG������Ȣ#��q�]u/���Dr�f�Zl&{6�����56v]u3Tv��+4) ��`��.��'�GY�q_�k��2��M��"��+# ��v#���xbF�V���(�M6H;�u'�(Xw��(>cr}�w�%��~L�dmΤ�؊�d�&�A��c���>_Z�փ8*1�ŉ�8�YuT����/���c�g)�xq.�$E�}�C	�Zʡ����?�H9K?��X�G�Dq{FH��݇^S����	04�����E(��ʹrb�d;^kBJwkm��)�@���!�'9_�6��8G92��N�U��d��:Ia�*�6��j���a��&ӀF 6�bRo� ����҃o\��m����LRǏ-~����:�~!4��F�ѧS}o&�}F�@�6���0X�~x�L˳��9vݮC�w��,�y���?7R�H6����@�o�U�  ������z�ԯ����E <�oQ�GQ���?� {c����X��� л�O_��90i�E6��G����r�j����l25�َ��3�FzEP�D��F(*�]9�\��{X���g婣�#5�>��JWf�v��S�B�j0{�9��9��Q �iJ, <2��-F���'9���0���\c����` ���d����5ݣb��8a�e�Z����nv�i�ވ=Q3]+[Ѿ�b�v�位8��z��Kj�z�?J�Ns����̾��ʆ�J#� 'J&*lz�DH���ڗ���}y�vF�r�	Dk��Ha��I�1C��g�@�"[�	%X�@M��·����jMu�C�]�֞��t�����C|���W_� \4�3F{T�� ���G�=�!�!��P�|���Y�JĠ�G}-j��S8��I?��h=�]���g�X�s���W;>9	��*���H�d����Eߚ~�;kq�2��O��WA{�e��nv�)ʮPڮ�M=X�mMձu�F�-�Ne#֒���G�EWn�YZdl�-T��!�d췅���4��uR��5E��[� �a� ����C�i0BtA	���W�#d�8��,`D�g�g]p}%��[�>^Mb}Fs=96�䘪j��ā����#��Dj��܃Q���M�j��j�E�-�J�n2��T�����Rd��,AYRߗ���!�͖�أY�0�c.�\b�j�,u�H*]��D��[���~�Xo��kTG?>�/��ݹ��1��X�2������wޫ����@e�,2[�����!�����ڛ�C.�tZ�|ҩZۜ���dV�Y8�����n�q�����6?��������{����?Oq޻w����/�
C���ͷ��xq4>jh�Q��Q���\�F�H���e�CU>'�h֋��Hm�8���"o��)�qN@��������x���4S���} oBxV\wFf��C��V {}��y�3��=�f�QR"���`�>��&��CI7X��1��w�U��\XU�V̷��w�#��H�ď�0��)�MEi�τӖ���ҏ��B<�}�n�[Pپ�
6�LsQ��O??�t�����V)��]�p��V�,��K��!�V�I��.Bz�����t���þ6����ً���l�L�v+�t�ks+�>V�aP:{`�s󵯲�F76<<�n�^P�[��w)ߑ��:�����kX�B�]y�ގ���/�>���E����є�Tm�s�4�=�X��D�����d��|�讒y�>��,���
{��~G�!�o����-�;�Xz��7���9;�$��k�,��@rE���Cs"�ə����~)$�������t��Dv�!�؍�&�L�}Ė�)I�����>i~��+����R�=����QfZ�Ҥ>Md�2��s_̶r�O��+�.{X��@̥bMG��n����$�U��T�x�-����-���5�%~�̎<���J���q����1A:�>W���F�����X����-|t ������ ײ80�Ӯ�6�brr��#��d9�Yi*�1��Z�]Ώ�G����ÓgH�L�}�B�s��٦��z{����w{{L�Vc2�;'��|F�}V��q��Cd6\�r5wT�(6)w�QV����h�UޱM\|���xcs�	�z��t?`��p��X��7�C*��`�H�;?��D����΁>������}�dr{<� �31�|&�kr��w�O�ݯn\�����m��f���
�
D�[G�ϩ���hZ�`yך�+�=F&�@C�����yl�t�;Z:4=rV���P$�3�q��,��<.:�2X�Me����W��ۿn}L~�`������H�&(�����L��1��Y�������m��%��#�^����X�j-����]��ǳS'g;_��Vl�Y�d�jL����F�yI�������f"���8�yϙ4WM�y�胮:X.�I�#E.G[~Lv		�P)�]�X��7��lHw�p�`������]{:Tt�~p��p&�$}���O���s���3��?�ڰ�+�G�8�8�M�8$Q�[��)a�< P��_k�Ӥf�SL���#u����6�t�����'�r�������`��6�٪���s�TC�8\�f��=;N���z�s�~,���@��V��](i�6pBůC#q�Q�	��� ��V!o��,��omEe�je��B�?��}p����OMC�c!�l4�WD�폇F��v>�;�a�_,Q/�qL�֎��Q����������������=dq���[\0�I����F>���(��i��xy*��)�+�ە�>��L/��JZ�ֱ�B��iG���+�'�.E�_G�A�(�y��ݹ�[�+T���j�j`9n���p�H��o]�Nɵ����y�@��wSf9a�C0�,b#R��D��Њ��kb�ICV�Н���-��X��ob<@�\���}U ���8�\���Sj6�q�,>�]� ��;m�.b������H��x�LyO(@��V�02u�p�,X'e��N�y�����e�e��4x'R�r����c ��7�5 W���K�B/{ӂp�\R:(�8�G�]k��XH
�2�h�G{K��M�8�sl��kW]t��=�	۔�Ȃ�o��蠏F���59!��=�:~*�k���~e�+����ޣ��p��(N?�g�`bj�lf�������8�f�֜0�,�׻)9�IZ)�R4`���*Gd2v�x��L�Ј}� ���l�/g �8�}��ʣm߸Kt9�H�_�����8�>�y��ϰܓ<�s�>�1�T��1 r~��P
��%���<��� �̗�"���7e�p�I��{	w@���Ow��y�{0�p�PW	��><�]��kD&�A/�>�h���  �5���_2Z�㯇A���:���暇UJr�H�s��g��X��YG��u��&A�N���ڮ�[�0T|	�W��);������3ټEI�/�(��Jr>��~Ȭ���O|ȣ~]p��������
W��nu(�uQb9�GM��>�:S�:9	���s�7{`Ra���w��?��3����0P����i<�;M���f��v<S$�l��N	z�;���ᖶ��T�L��a��*�͒�RzYV��,%ו6
H��0����
�ꉿ&o_��-7��=�/2�OJ� ;�\��:��� �N�s�*d��58h�+j���C0J63^�C����v����:�7K��_�U�H�U�6Y-������S��^5(��%�X�ld���0P��	��x#U�m�ڿ1ڠ�(���G)��j�v�2��#rʦ�!u)�(P��بՐ�+U��n���L��n�0�nV��-���)�H;i����S��y���(I��(u7�gH�5E7��i7�u�O �E���TK�,(H�[\�B4vƩblI}5���ę3+:V�Y[J�K+�Rw�E3��M���Sr|�?��vX����G������#�T��Ɏ�-?��}M�p-��uY���$��J��Ę����\���W,m;ي���1G��GO*���l!̋��Xq����6u%�}<.8�
��H{��t���a��P� �4ʀV���Z4#ş�8Ɓ�x�398+���j��r��pk9�~�7��e�`�v����PW��T3����h��H^!�7I���i;���+jBM�ץ��l3*�m������n�@1���I?�=�p���bc�p�)�q�`���K�φ���i_vz�?��{q�/S�R�b��O��U�t��[X�P�`eMO�<�EiO��k|���:�d*���ꇛ��5D���_ ��
�]y�7�A9tog��t�Z�t{�N�Y��O5R:]m慼=�k�K�G�:�,�����r'=`lΜ��`v:,9�\����bx���JB���z7� ��_r��~��/���*��I����H=P� � A xc; �WO��0_ �SG�s&�h�4��[g%rV�wotξ��-�~�f�wq.�g��~,�~x�S�>_����)U���H�\6�q�9�>Er���zG�@6�-.Ñ*�f�a�*B�5ˤ���sI�]�-����J���t��Xw�TYTXQ��7H�9U�")i���S���xP&���+ v��q��|V�F���oǥ�����!�7O����k��a���x���D !��?�c���Jțn��f �屲)r<ϖ���g����Jt�˘>��a:s��bǣ�ۭ�#�֑�A��Y\M�#j��-k�<x���Н5��A�X�H��,�PO�r�-�[u�7�n@�R�	=���������=<���X�*J��\ET������.����r�+��$�,Ϙ���߶� �%(+��߳ҡ�g,*�8k�����#�xR+fx�=DZpA/�--u��~�!�B�n�[�6�t�)WJd�ڒ�:��_����},D�����i+����y���i*�W�����P㿁�&B�eq-���SP�O�Z�?�V$�s��%�:�b9�5ʚ���N����.�,�	S��c��cEq
�31����a�� yW��e�o\�vS篈q�~��p?�����@8��8��9Y��da�2EZG���Jy�x�8��s���di�#���tī�̍�Y$�����9m��������%���{F�G��;���I��Ou�O	�o��Y�6ぢ�i5��iw=��Xފ�ce ���<qMr/N�#b�
~��{��;�Dq����\Q�94v_艇��W��Y�Ƹ�����}j��7M�B�tT)�I66!k:%A�afY;��2r��c�3�w�Z��N7�	�:�|cƔ���iM�eo��~K7	+7�i.�����������x����K��u9W�~�E�_��{�j���-�]O�g�?'�\�0��OxxbӶ9�Tc�������m)[cd��D�Y���-&���.1nS���\q�>$��c�&�[~7�X}ז��AM�vo��x��/�z��;}��d�Z2����<����u8���]�ӆ4����Ub`k�k����:x=��x��?u�hj�np�J�} -���MD�av�M˼2����.=�� 6��a�즃�CHN�����(Q��j��L�6�q��@D�nc*����4������]�h,�7���?�߯ؖ�}�k=t��}F������d��9C"|^�^k��{Ц��<���n���C<G�hJ��.^���I$�귷��U*�#�p�j%2�o:H�6c.�l�q������[�<R�����n��#�����PBs���5Nϗ��Հ�m$��]����Jf�	kv'�,�E�#=��R���0��q�^�Hod�̠�x��L�[�#]6��:4�O�U7��(o��p�AS�r�PZ�tIaCl��ۣ�na�5o��-ˋÁ��*��+�o������%� N���.���4d��:N�n�Tr��-�K�`������.��|ݟP��^Q��+3tA#8J~����N+lz�ե/�-5,��y�_�����/�9��s�Φ��{|��X��@�yg�"�v��#o�1�C�8u��1�V�>hp���!�Ƙ|����w�s�gjU麽Vڊ�1�-'�p�'�3�f��Bs�U��\Lg�~g�<��ǧ������G����3t⭱芆���-�,7��4���Vz�k����.�?~�߳颟�1�	\F�RK���	RR��$p{}�O��i���R���-�.Em.^Ϥ�4� �Yo>��Yz��Y@P&�6�zp��1�W?q_W�Y~p&�fߢi0�{�4������2�����\�
�Y��ok�|q��ǽė���S��a���S����S�y[AV�x���T�=�0g�2��˴e���2��H�+v4��vz�o@���<�E�]2�l7���	�)����uEqc&��۹4/���,Z�RIr��s|j�Ո;�`(T�����
�_�z�J<�eji�E4!����9���c�x�G�1�uC'�u�$�ǅ���>)�~��?�o6��9��3��(t͉ T���о'�<s���0���$<7�vwBl�yMc�o3,9����UNL~��v��$2pC�r$л�;	f{���+�!1ΜϢ�\����b�=e؃�B��5E�$����X������4-6��:MZ�vl����!f�H��8�T���k;d�8�v,۽cQ6��>�m�g����vY�N�V��ַ��r�Ò�.����{S�����/`E����	i��Є�Q& �B��Φ�Kj��1�������*�׭�T�fR!��c���%�Ї��cIv�M�:O��ω�Mю��N`
��c�W�	�'�-�xMs��hw����9�w�؂R�z8��ۙ��j!&��p���-cˬ<��� ��S��=b#��P8R*8ƻ�N�����$�F^����g�����P���%ЃP��X�35�6�\��RE�q�O��확��*"Q�h�·R�L����F�V�h�::���l89�B���e�jx@z�����q�'���iǠ�tGǴ���͏>�uA�H�8b��F9��=_ I��}K�ц����Hh��bDnc���ɜ��������[�?Xڨ ��!���J"h�0(���.�u!����T��KӮ���9S�O͚v��n)u��W]�@.���.���'���ŷX��Vh8�b��uS�6B!Ѭ=�c���fjwK'��K��4�'�\vE���)HC}�L�Ƕ@��U���ŝ�n�#����l~Q~_Ӕ���(�=x���-�|wt#d�!�Z-��B����~~L(��H0fe>j�x�ա��Z�1�5�>1�J�|�����~���H^<l��x���Ꙥ>���q�SW����V<ȯ6�p���#�
�^�jl0�.�}e�_�y;U���]�Y՝R�9��{)ѝu\�H�K?bc_�t��}m`_���*̞�1]����'�u�X?�z�5��g�*\�x��&�5Zز]���U+_Ibw;v�l�d��2�Dx�8��[���܎�h���̱N,��C�+x�G6���:�����b ���`��V��׏���s��y��Tem����]�f*���KnA�2��,��ɬ��Zٮ�����F��6������1T򋮇�7��cݫ��b� �vz��=�1���E�Č�:�G��>�eȘ��D貓%�y���l�r�u�V	Z��u����h��rƚ��fsy�fܼ?�Ut�$���wm{bǔ�E���y���L�ax���ny5�`A$�g�>�}!����R9�W	´%�h(�*��X�t��j��fݸ�V�fJ���x��i�t���*����t���
K���7V���o��h6F�-�����J��:Zc��	��@�Ή �7��c�	��ؖ�:DkT��e{��zX�;�-QnU�ypp%d�������/Im�'�m-zJ8Z���!��4F��O\O˚)�[��W���3����8�D<,a�X���;ɩq�6�g,��,Ы�x�����R��@��{J��t�ml��OD�zw6E��tg���u��c����s�`Rrf辌�.�B��H����h��갈7��t8��d����������t)�>�|�m[a� ̴����,ؓhc�l8�#�b)��#5G�<����r0�����R�Vs��i����������\\��1�?k�΃��)�hD̄~uX��?�wk�P(�z#���>�Bi�.���h�G�0K44��[���$ܢ>-�*���D�ہ5�:�q �8@|k�Ǹ2���-��c����e��F^s��q������>^�O0���.�&D��
hl8)���W���(�t�j��(�[nG�pn��-�SY��.�#(�@��d��8��T�e���dE
�̞��8�@�`SKy�B���T��Y�~Y���248೘쳟(X��g�S_�/G�8`�����4�����l�'w�.�L|�;`n}�D�.Ry���s��#�W�N���SgƂ�:Pq��4��!P;�F��#��/X:�H'uo�i<|�6"Ո�j~:� [�����z*'4��7X����_o�p��%��ﰲ�I������\�w뽸����+=�	����\|����ۯ��m`W7��ӿ0��:�8]�sߎ�Q����zҝvz�&�aj���f�ޡ����D�=����Uq�=��攌	],M:�[��+�����d5L:˲���y�b�ը�%�C;�v��|}`rT~���ﰁ�Ù�m2{}����)�vO�.�?�ݣ#הv  ��iCL��p�hn�};j�7�Jy��a#�}zJV(�|�\vٮ��a�D'�9�
d?F��GGM���y#O~���D�z�]�2L?�������:����<�����g�������W��\�����M����(�'UJ`��0\oD/�F4��i��;����|�|�7��}Y%y��	(2i)>�g"�>���=h;�?�;�w����gh��+{4�Nބ�����3����,���,�����e2�Ā�'g��-�y �5hf����>;�yk����50ghkW��V����|�f�
rNM�i��O-qi�rY:0��2N��ά�'I~���xHi*��@/�\h���w��b6�f�b��9�i"�=m��-[�zX�ӷ�[��^'J�=<]:�ұ� ����9=OYð�b'ŧ5��j/8)���/��5�����^���6���l���d�{?�S�ܔ�1T��u4���u�+�AK��)�z�J?=���U�"?����X�q�:?��z�b=���W�F�C~y6@D<S��i̔u��<7�ͼ��<[�#5^3d@(�u�~�j���f-��cޛ��T*fFy)�S�{����R���1K^h�����:N�y�m�հ��[�=w�V�x�~��A����`��=Cأ\5FXb��hc���璋�S�e�S1�&q�/4Sf$pj�;���9ә�0d+L
l9b�-w�I8x���5I�~R�0�?���>ץ�G���*k���������g���"����Y���_�f��ҝn��)�+Z҉I�!��ڄ?�N��+�*o����]hP,�v�-����ldS*�-�r¢�&�gP���@fj�q�2��޿�)����ln���!p��iT�l���}0Y����鐇V����O�����瞀��ˍ9�b@��x��G��-$ZN�ɀ�
������O,��}amA��]�����(������ކ@[������	���q��]3��h6e�]~��G9k�{����"N�1��6)>�݁����V��@�2]u��P�ؠ���a� uO zD�L�|�����!� L`�ŤqD)�@ځ�o'aK��L>N�jd�'ZV7�vJ��hi��ʑ�P�( �I�뺪���1��y���)+�K�=���� �)ݕ�|#5�6�u�
k�N�ȁ�d_�ӓhe4��ZI��g[�k�.�����.)Ƒd��Z����'���,�������<f<&�.&q����V��E�~u]�p�=5����������⽓g���;�����;�A4��k��ʅӿ�׊����%߽�}���|8�f� i�	�	'��!�ch�]$�b���g�#�!H���b)*��e�KP w�Ř+
����'L��SWg̤a�/EU##�\�$X�ˑ�'��1x�;'bMʵ@m���r�6�$�L}QӦA�0�'q�2����SN�.�ᰫ���Z�Ym
g�b4������b\�ֳ�>E'��Ȥ�C���q���a;�ZjA5�Gn|$����(�s���a Z p�l�l-�0�����/�5�D@��gf1=?����"����/ߧ�d@��ϰ����EsSX{��Ͱx��K�x�SM:��M�x�cC�K��I;>%�ik�����퐎���֙�����jb�xj�4�;�p��|�}.L.@��Vk�o�ٔ�a�p��0��ڨ'�i��nZ˰*f%N�M���ynX�5fj1� ��n�)^�Ϣ��Z�	���Pyp#ډ:,�%��P!��ͧ!��>i.�c��g������\�_L���h��Eh}���6;�jx��J�z���Z�t����䁭���A<����_�.�'m���R�$��nk�Sd��$ꏏ�����׺�2|����^��{ �q4�}��F��a�M[5�l�2�Ʒ3�aD�JpV`�"�j�{�f=�5�\�@�NفiF�~O:ka/��T�
�Z���W�B�+�@����a����#�:��J�{�2�&�<�h+~�6��(���`6(���Ul10�n�s�j�vy���`/hV�$p�<<9�	IQ#��bQ"�(̾�)젝:�Y����Jf��Y���8���ΨI�Rq|����J���#�s��:���qJj��mc��x7�~0t����8��T(��;(��^ԛ8��aΦ�Ӏ?z{N�E#��V��p.g��[��z���q��@��Ӝ��\�y}ص��y�7�ک:���EQ�}w:2��Z�}%Y;=�& �:��#+�~�Z���<dp4�YOVz�|t�mQRe|��h��{ȝ�=C�����,D���# �{D8�:f��89��=鑈�"t<�^/�p�}��^��E�\dɾJ	�ڈ:AV�d4��ۋĂ������Æv�:����)���/�}`@:l��f�QN�]2�s����3� ���&W�՜�FjU�I?��e�Ɲ!�lŔ�Z��3�ƴ�~�dN/Y�v�S3}5�W��v0�n�fJ�Ӎ�E�x���*���U��"&�;���k�j��d�-����3`�2�D�*��x��>_�i��B>��*mƭl�L�=+�'��?��!�;I9�e±��^{�"�2�66mw�c�Y^��<Ne<�ȿU�4u�`G�_x�?ܧ���c�H�;��hy��8x����Ȍ���~	Π�Su��H\kp��%�;� ���J���|�Ձ�h�03��(�#�]��H�Jpz��揳���7���~EJ����x�^���wg�@c4�!��QB��ɣ{������;��qͨ.#����`�pУU6@���hW���JBf3}����i#��wVC5���y�c�P�Y�E���A��p@�هc�;��ԩܿ���'����l� �3:����W=A�H��#����i Y�}/0γƑܙ��zLnfՌ�R���.���T���x��i5�w�r?��^��h
l�^�����N���������&wm���>n�@�sn���OW;��o�R��A���������H:-7R���g�Z�ߠc����SPm�����R�)ǵ�p��q*�0#��*�O/���;���ˁ8�,"w|<��5��J���m�V�����x[�R�s,��hvl��_"��A{n=���mj<�౛�3�=N�l�\��4��b��Stxl4�u*��ʪX��P)���? Cl�
u�hK6�Ia�����V-j��'̙�R.�� �3w�{�6n���>}�?��[�\\R����?Z�k�������,��?����1`̇��s�<���{u&�w��ѩ��(��,@u�nU���_��O?2�8?J���������{Y�}������=�O��<n��ux��Y�����X������Ӳ"��<~M�Sg3ہ������4��=���Vg�i�ff�����:����_
N���ڛ~o.`g�5Ηu\�A�ad�#�n�܋y��u�	h>�޳U$�x�'!R�+y�ΐaul��?_�`8����l?Y(�ţ�|��j@.�Z���AP1�Y�s��iu��C��e�9�@��D���A�ثk��ܳ&<��ΝABjn����1u̓��sY�jc�,(�Τh�Nn}��~*�6Q1�S�\�Z���jb�˓��y!��v-/\O�{H���k�յ�U��zqt��Ѻ�>h<zj��ЩQ� >OV~F&x���Xn ĚJ�cW �{"��J�F���ijtW,��(�_��ϒߚ�d���N� =#�T�d�RXS����3�NS�|�&h� 0��I��	�`Lw���@%�")@��Sz�S�������cM	��c������M7�/��>��s��g����ȝ]z��|wz9��@���>~��{��N7�4jW�.;��m��P�����N^�i�3a'� s�J���|�^��#0��{��Q�f�:�D��K4sp8Z.nҊ4MGe�i�gf��';v+	�����UԤ%(�VU������ C�E�3���J�����ϛ�|*O�5� �?$'<��c$�9yo�k��>����]X��z[�,����l�:W�V���l}Xt�9H3bt�:H�t�������!!Q��E7�L�)<k,E�O������<CTI������(�G������~�B������~oa9=��Ϻ��b�_��9��Lǔ(����i�mw"�"��3�_0����ݞ��M&ww�\f���<p���wZ�G�!B�S�����W&ᔤ3��-��du��&���niQ����^�d�(��~���nn�#ŗ@ؼ�B���B�'���^�R�nw������M��d?&�|~��"����	?���R��g!���S�Y�tYZc J�j���3��
}��ӺW��-!M��6�%���A3ٲ�ʺn����W���G���u'H�e�/��c�d�l������j��z���l�g�{��5����p��[���6�ޤ�'[N���H��h�3��k�y�0��9T�!#���<.��h�O���D�^�5��-#�T;'�����̃�J����D@O� ��p������`���� �Z����A��@g�~ąk�]��,VF>�[Hm�|��vY���vI�-��=5��=��T���Aq�^Dcz��h�����ͦ��.�"@������,r��/��g�g�m�#蛧��"D)�XV�|�K�U�}�����[[���A<�d�,���8�zaS��ȉ�d�+�� v�T���5��S��.A�V�iy���zR�9_D�-�������s��&<s�/���@N �q���N��4�Q�丮�a��O�H�ǧ�
�A,�Ϊ�Ed�B8�G��)ۓ6G��&�������d��ʺ�R��nu,bS_+j{�:-�d��)��"B�¬ߏ�7t��y*~!����Ch��A���	���v>��&_{���G򒮦��L[ѱ��=5Uf�
�r�k���ۂ�5�n���v��R�'=�'V�+�U[@�;Fn���ˁ�3F�Ih7�h�Z��xϼ�U�8��pѠ �U6G{����4���e<���5�o���d<��f�������C*�"l{4���]�q&t�{j�i���a����r�?�F#=]/����!��W���3�+F�kC�@��E�ެ���� o��ש��̷�����:Ύ)fK,28�#\,�l�Jv������X�r+�/D������^�?Y�aE-�0wc,��_�5�����ːw�ŋ�����79�~x�39?�ۚ�����</��F�@�ȝ���3-���8�z�A��;P��f=0�oP��+Tu�(;:���G�gǞZP�~�BPߧ�Eĥ"_%�.�e��u�MB����\�q���߿QQMP�(�<I���<W;�T� @�m��0�	Ɖ�* �Z$��L���NbH�i�0���s��c�:�lzv�Ւ��zhX�nJ�6�Ah�$w>;Q�
z�hn;-��8�І
T��������?�M!���]H����5ׄ����@�] k���Λ���z��F ����gr_��ڍY�0䅻�uܠ�����[���L��ʝu;����(�$C��c?�Vh�4?-���i��Hp�bB�9E�=�HV8��@;��O����t��^��� 7�Q�1��:O�ދϪ������A��n����K�������;�2<��C~�Q,��r����H�jD,����H��b���)݌��8�������i������x�g��a�W�W ����"ĢP��>��1��U��j�bN������y�Y�noПK:i�iŭǞr˺v9X��a�U#�E���Q�ohq�J@a4�Y�F�pAu��'��O�lX}�1{N�{Ք*g��(�Z~8���l���C�u9�����"`�zg��*�s�u���O>B�Y]W�+�hK��hJH�UZ%�
7v<��d�������
s���Ƙ{H�|�C��I$7�X�+� 4:���X�< ��U��~�kCڢ�ކ	i<�@F1�m�V�(&��,d)��~a���Y�}-��E��3�슗"�;v��':>���*`@kF����)�M���Y�)��ֶMt_����@�a5*N�o���Ƴ�ON�*a;C$_�?�^;~�* 9��ZG�aȔ���sn�֎ @�`q���F+J�.:j����(����Y
Ǟ�mD/��Cu?/ǭ�Al�՚��ᢒCy3�ys��QǠ����ڰ2�i��g����{#��x���uT��gҞ�N�n����nߏ6c􈨚�L�%�l8��wil|ҧ-Ra��\�f�.],�݁�j�����QO|p�ڷ��:�����b}Ϧ
�"��̯����b��^6�ufr��:U�\V��HFw���/�\n.#��QzT��b� R��Ka
�C/��;2eg� ���G;�^~�x�����+ak���}/� � :�8�	[�=C5���o�n`!��Ϩ%��ɘ0�FV@��n���4������5��t����\Ar���zN�#�;�@t�h1�E�÷V�8S8��0�3q$��N����Z��!m������94�5���9V�e3p=b��hjQ�. �Ml�� _�d&�[B�������i⽃�mR���B����@�5�͋D�������f��3���&����=[=�ݽm���&X��PAqxk:�NY��{��w��+���;�i7t�-sLݶ��2���^�pר^j�m7���)_d`"u���#-[S��Z�����ש>��@j%P�N��r�?��F�����' ,�?��p4����Q"<lצ 3��f�V}'d��Xl��qHl�>Sj=y:_��A8fj!Aa���K{�S9�0xe��2ʉ~ld���&��Pc���V��D�j��K�N'���a�	:��_{40̠���eP߭GB^=p�FɥeR�w����I̥q�%��\���݈��R�A��{��n� ��s�I��s(����ѭ��A�>�N��C��It���*�J����kH��)D7v�2���n�g&��xp(q��t1��L;��Ij�`k9���~h�=yFMWEe	N��i�l=,����^O�vۆj��,6��8�{ƹ���5V~��eyt��ʅ r�[�l���+eO�&/ql������* &�N�;���]nH����PHP�f|��tz�Ҳ�`z�U�����ݯ���-ʿ��b�����{^�&�C7[��LbWQ*=��vYGW�o�I����,R���2!�f��#��D昜ʩ?k�Ғ�p�r���s}����r��_���_��Ƌ�K��I����n���A��/jߨ��e����ȱ��2�O���F�(�!U��n/`���)Q��C�DX��dx�l�G;��A�	����+�f�+Y�'m�x}+>CKp�3'����A	�̂�'�	HA�ʖ؊�!��Bߵ�M���p̃()�n�f�4%"v�ࡦRGL7W�����GymY�{~�����c�`��Db��<`�!�'�'<�غ����M�@7���(�r�uN�/t��U�V��*�������ƾ5��Ʋ�[5?h�q���°5����돮}���$|~�God�6�b��6��y�_�k�'q@H@F��ƻZ`�}��������M��Q��&�KU�sg�z�p$q����Hf3!K��	�da[
b�`��'l�燽�7�_�������1�V�_w`���v(��@��W���
��2H��	^%�yP��I�)�����Z���{�?�vG�9�LY�l����Z��ge=����Kɚ���������ҁdx�IK%f
zG��b[��R���#T��޽ �'?b����}K������o�i�O ����_���i�׭}�E�ݰG?iZ*���p�y�U����Iƫ���;�C���lv��/�"���b��� Q������2Ui���v�-�u��l��Ps�l�j;���~��`?8NG��_I�N�{p$5p�u��3���W�ͅd�sK��2j_��߈�K��t��w��ˬCw�s�gś&�!=����t3b|~�|h��Fҥd�jH�a9����=��������F��Ui�$&�AI�R5�Y���å5g����{�XFò�G�#�<1�B��l�R���x-#&���JV�ļp���o���ݦi����F�ZΏm�� �R�c�Z�h՟��e��w��_l�{ʭ���������&-w J�9����tl�Rcv���P���%d�s��*<�Nk��@B�`���I�����:�����-�k�e�@������խ�H�������K��J���7	t%e�Kx�:�����=�]v7��,e�o'�ҝ��Y7;�rE��|���@,��4�?�V�v����w(���-m0�����l驀��p=̈%���H��\�F��6��.>#6U�>��Rf��U>K�@|{��lk�X`X�/��5�?��pp�Ed��gP�p�vn������S?��-���	�A}!_8�s��n�|{�VC�{Y�;�tQWK��l7�(.�~�s��5�Vb�ͪ�!ef�P}.��&%B�:<�j�0ߔ4;۸��v/��L f �(k�э���{�No�h	�/��m�����w��*d�w͈-j�_.���W왆�G��·څF �
��{P��#��%`.Z�qn��5ώ���s�ahr�}����4Й�<='�Vp�_2<Gu�z��Qn�G�@,+�F�,߮BN%}���]�7��CX�m�XC%u�S�C���'�ף-~��K��)p2��"������@��8/���5B�`6����fs���`H��=��:����2��ʄ0[i(v�k&<A��n�íD��3�G��ñ*e�dxMBl�0_]�:��F^6`��l�K�3���~��#��H��7�#��������҂�y̯&"5*���'���b�s�>��Q�(+���b�Ν=���MXs�s�!=���֟e���L,��M/�EC��@�r�/o=��!�.V�x���.8����x�%##�w8w4��lT
<:�LBK��!]ͤ?�)o��+
v�9��FS�Pu�S\��Í�<V�N�~���sR�9�d:�Q:�Bo{V"�YX�9L�=����6���C�4�c�c�Y��d�r�o(*�OQ�������.3p����c�`��j�{j���?����{U�.$������{t&�99d��moi��4*������(_����q���r�� ��� �l���2�N$�LE��F1�ٟn�0U,L�\qg�_~�s�V��2�����o��J�cg�ztmp��FU�?�.��V{��oLA�`��{1G�ήdz�zNWiӔ�<�'��"%({'fl,�j�y?ݟ=��r]���%p=�Z��� �K�""$��L�j���#��Su��Q!���&b~���v�|]eO���3r��]�d�Bk0*�Li34�B��l��N֜+!��5�`�o����k�my��~ �gϸH��;�z�pgr-/���SB�~"��Pf��U�p�0M\ױq^����] rO_�+;Z�;��IIf1ZtwB-�Q�P�pmmDӸɦ�Fa�4#���[t�f��E4�
��8(ߺ'da��uN�݁q�'�N��'Kć��������q���<^�bp�Pv��i��dd�̑�W{�XZ�|mc��	/��>4�\�̞��Ǜǳ=�b?���ʲq�����-��w�4����VNĚ0�j��7��! �A �}�I�E����[�G���R�����d������9�Hv��%��a1��s�JY7���m֐l�n^����&R�(�H8�0q��+���c(%�0N ó�F�)5���\�6ogbV����':f�ǃ16塖x��p��s����?m�u�'_qެ��s���d���֑��_��d^�m�C1x�keQ��ީ�(�Ň�Yp�u��a�a��vm�@ީʀ��ח�0c�e®��3v��^�L��گ���MK�{f�N�����k:�;="��"ާ:j��t���S�uXF�Q���u���ٹ >��T�&��Z,�ҫ��kZ���}����5��y�
����U���n��>ʝ�D\a�pߓ���H�u�:�hH���,t��'˃^�Aԕ�G��h����e5dړ�s>|����*�x����lٍ�������a�'�1��;�"�'���P�,��`q�xI�Ym��9b=$EN|z�b�	 w��d�p�����O�n�I�2��-N�������İ)�~���0�-��tA-DMam�+�BX����Rq*2��h>����N�n��D��iTZ�l�V1��(��쌮�h��a��ǔ�c�3��/���ݖ��J�v�_{K
�RyP��)��RRj�w�!U��G����[qB�a�Բ[/&������l���y. 0�Y&8R�#���6Cph�	[�8��c�ص��l�n�7�%�U��g���dk��d���O5�X�1��ޖ�W�t<p*�c�r���LN, �L�bx�x���ʹ�O�ق��Zs���i ����&*w����� �'��Z9�~+��f��VM�u�y�Z0Q��a��(+�S�_d5V���A�e�� �����q��5O�H���pb��зG�ʏٟ�?���d�/"�wz�j��/$	��$m p��Af�ߊl�*�����NҶk�X�bL�ƌ������LҶt,b�%sf�g��lb���l�[���eɰP���l�Q��:��1������pG�����`{�X	�Z�57�Z儆����dQ�X�f	��3@j���@��Ȗ�OI�������͈�Q�\��V�d)�쓿|������#���|�ڰ#�����+/XM�_(�h���ǳ] �-|����^X�Ȇ5� _-�~����k$*0�D�:I�P�3w6�%�k{���	w�~^��ȯX�y|�}�a�����b3kGȣ���࢙`#�b�*@��ٯ�)Q�0�#�p����"Nl*�/�U�����"�%T�`�jĭ��?Q��s�G���@�a~ �@���1�!y�R��nW���A�u�bB</�A��p�ט�Y�[`�&��,��G��2��0�4?L��_�'� �GPQ�U��AE���7���P�����!§K̡x�A|vՓr V��J��P�4�����,p�*Js��Ĕ!�lQ�.���O�u5%��Ϥs=_=�z~�
+�t�}%�r?�Q@R����'�2�M�钜}|�!x��@m"�V�}�	4�>'G߯��߼��!����y�*�W[������w���n*�v��n����e75���xF�i>�|1�˔�G�� (�/!g��Q�����ۊ��^�Ni�X�14�����������cs~��v?����7q�_�T��#���_g���4��J�������Ů�d��8����E�p[ۿ����|����|��z�A�ߤ��~���go-���r=�}P��f��+����v�+����o��a��|��͊<�f����
R���ґEP~�뉅�z�Xe�7�5H@Z�%>���x��u��Ԧ�iD0��x�[���������m�r�����2ns?���Z����k�;�f�ä���ZZ߯��o��!�f[Zg�D���?eD���v���	�>�dz]�m�(�p\V02��ٖ�a=>O đ]��ΰ�8���n��:>g6��IxY�{�0��lc�/���l�Uo���nZ��"�l�^O�֥1�(�(���^U�T��T��~x����tЕU�[��ӵ���M���@|���N���7�c4J�펆BP�[�3���d#��,׬a�gh����jͤ�A��l�t�q �|BCc�Vb��[ڻ]��p��.G�j���g���?�����u���__e�V��U�7#Ioa��]P��/���:Jp���U��n<7mG�\��@�/����T��fK�YA����,l'�)���/�\��b�@����*>�0�炙8i9��>u��Q�;Y^�bk-1�al���p_���������d����طc�y�Z�~{�X�~H�	�������*��z��){_�ezG������W�������{ܟ&�����y�$�`pw%���f����$��7�9A�3j>�e'v�S03v���^�)������cm�s���/o����F��������i�LńŤ^)�qJ�T8:��b��2��?+����.泤�:�X�#j5^;��ә~д>y����`��,2-��C��:���ͨ�2�R�۟-H���3\`�C4T�t�+q�����$�8W�=�:�V������\{��9y{R��C|����=�\�5:��Ò7.Miw��d����p)�m���>{N�CmF�F���Kw%�~�:�囵���O~�xmS�;��u|�_�>��a�ng� ���:;�N�Y��F�p�ه�N�Op�wn�w<?uc?�=ӦG��em��?`x�3u�F��o=��Rn��a2��d�&3N��]e�L�#���;3�˥Ψ�k+Hn��A/�غw>K�i�-2��7!�nvI��J7ϴ�a߿��a�A�޸G?{��ue�����OZz�������C�<[�A%^^ �,����f�����Dn!-I0�P۞�p�(��T�����H�)Jq�2�~o���*�&��Q4���W�ٸ��"���)���ˎ�a�/�\�E�r|؊�� �%��j��� ���Û�
���
�.���������f�7[����m��w����Ż�ǳ�k��m;��v@��1@���r��Yp]Y�8�ŷ�&������%�!"�|4��h�ȃM��2=��6;���I_؉Vwlh�@�T���>���w��R��n��du�>?�Յ���'�r{���1�q���m�ΈaG
�dM`���:��f�,�כ.g�Aw�F"b��_��U�ϏCg"TO�Z7\��\M�����B���W��JM�tߘ{ʫj��f9������g��U7F[jvX���I�}I���h�1�0�U��
����y�fύ���u�u_4;��������Y��������om����mcu���[ku��m���L����l��ȷ��6��sYf�M�% ���Y�`�a=E'�$-A�8�\j��t�|������yY�o�{�o��Z"AfeB!V>�5F�nc��+��ƅ�(�bw*���E��Tl�rtѢ���ТWռB��|Ww�xvDi�q�+v_v�<�V>���0�^kc���En���6F���ٺ�������K��j[�I�J���z֗K�3Cf����e���9#q��:8�����ұ�i���&�R94���Ϭ���g*}5+_(~��4�����2�����}�+����	������@�-���T�U;����4v�wڤ�e�RXu��fJ"Q�i�'4����<JF�?ۮ�Q��9�jgota��~�hfC�{߬@W
�tũ*=Q"�a�L�̷`�bY&�E{e��_��`㌵���z�;Y=�ؖ�ٲ���Ӊ،��JWI���κm6��o�h���_�q���:jW�;7����y��/���wo����uOcwO�+޸� zwʂLe�,�CJ�7!��Q�M�ȅL��Q�v�8�sɜ��Ψr�E�c���.����	5[�`ܾ��������qw�=a���BOG0I�;��~{ƿ�|RP�2 $b���jV�NQ-�.b��N���k�]�;���:��l�8Ma5�)!dHk),����g6�U~rq��:_��s�ƉN�W���u�|I�&�mW��~��l�s���� ��X�^��#�_�'�P�DQ��ŽWͼ5a��p}$�AqT�s�7G�Ab��[�������>�s��r���@�{��e����,�!�S�G}Jݎ�����6��q_y����%�C���c[��������ϡ�n/_�x�����D���!�̎����Q�F(��iC�/��*�����RaW���Z�\���q�>k:��-���������S'Ӝ�T�=zVŧ����,v Y�)��'��v8rY�}����~���A���i)~�$�<��b(���,xE�	Y��b���yH�S�ڜ�K���vpN�|����z	�.�LI�.e�N�L�z!�䖗�
������ڥ�!=M�n~M���W�I��� oC@��P�;��-&�����k^̠�c"=F�Z*�2Q��0�y���E_C��l�[�ѭ�ax��J�I�JU
c���ыI�g��E�1��B"����!����n+���}#��
�^�MЯ�W�רc���j��߆cg� �#A��4Y`�3]�V���XW�p��Ei��T��:;��ȓ"apQ��\F��E�t�����>10�*6/�_�~��W�{Rt�������
b������������G �����^�*��gS�_�P�>��D)EL�����)������(�}]�s%��W�'f�����x��#z�
��S�K� ���5��{���<@\��/��G�W�w!	"�� /����V�q�<o���;����u���!��H6�Ny���1{��[d�s/U���\��n��#9�ͮG��.�V;��ҝ�}�^]�w��L_>��W9��//�����~�s���5�}�s_�CvO�+t[�%���=-�����~���Β)Z>ˮ��i_��LY�dQ��}/+�!Y��E�����8~�Nנ&�܉|���}}B����۰1s�����S�4��>���A�=E�˽ӱ�4�M9;v�e�r�T���'���؛��y�G
&Ǿ�e��x����?ӓ&��s�]����/��4��o������.�%tP�6���9 �'���n�gz����D�c�Z�� Yv*���T�	�^��&�;�N(��
���wN�EI�y��I����o�l��r��^��8� ��P���<_:�-.� Fv��yJ�R�,`�ы�'��k	0�u�7ۅ��1�g��L(����w#+�rW�d�U��,r���w+��8��*��*��@���;��^Y���HM	�O��·�eƝ��7cͣ#��[���Yf8o�� T?)��6�]a�!��)���q�P)�N		c@^��!ׁ���a�E�q?}�?H�ͦ�^�mA�� w�p�� ���i4H�}h�Xg�\D|����n��ǌ�=� ���tb���$8(�������]ak�z�ΐ�X����8����������P��\<���|����C�u.z�2ff��>�9���*AO�UO)�P�������&
���1�$E/��f���#^.�\L�}�21:�G�:��'������*�w���M�R6�2���M%Ʒ��0�Z�� �dv�w�Noٯ$�,�u��4�M'�\�H���E��a���O��X�Fws�J!$��T��Z�Y�;��-�����Y��6��[N�]�4J#����0�O���G��8X�igf;(�"[����qO���A��ylx���%B�$��M{�}����_b���M�o˦�c��jv~	��锗����_d�Ź,������Q^;`4M��P؝��8�Ԃ��pÕ�fñ�b4ct��E��B���IBm�-��tSE�Uh����?���k_YowC�{��s�����E����4>�]�ff*/v7��[�wd1H;q����]��������UJO{�9�-��c���^��*].~�_݊b�U�<3͙�Sp�Yie����{�,�C�[g▽��(��wP�3����qCe���{T�e�_WzYw�59���X*�P���;���c�$�˯�\[|�?笠��~q�kN��ؔS��n|��&Q_�f(yr��:c��+̃9��J/rf��<:�)HsnΗ�/�R����D���=��=?�vA�|Z��0�?c37ߪ��'_p��f~aI/D߸n���e�'�t;����w
M�9����(�;zB��:q�p���n.Ϝ+y=�����TGёZtգJ�C�u|��Ug~=? 6��������'�^�����q��\�g���"�<�u!���|���{!�Uȱ��Tt�<���ٍc�ۓ��'fD"�wݐ��:Dy����a7v��Z\M#$tv�~Lk����"F��n��=<��~��0���[�B����
�S3��[/�F�i��=���Ԙ/w�Rt'[]��U=�TaG�\�F�k)�wvu^��*�U`�ښ5ڣL_��P���U��Fk�����I�@�	:�����<o����y��TK}hn�Q�l���l"���]�8ģ��ob���t��{�|k��'�-��o��%�vW�{�kzw�f�z�.{;ԥ��z[7��>^f�|Xt��T%C+���z��˪?P��A�,�3�,�}��E�~��l���z��`��)?�5��������V��0���:��a��gC|ʷ�x[j�"4?��[J�r/>N�	�A�G#/�|Hzr���鰕��>w�u��	aD,����q���gC{R������Toz������Oj��w��T�54��7i6oߵ]e���p*X����T�V�1��s��/J��c@�����`��;<��\��4��u����a�َ�a~�2T|`�Ѫ3�+pE�F'�(��p�j���PuZ�Tv����3o#����=��`��Vb�r�W���·?�����7�y��υ�	�R"[V��y��y��+G^A��$��n��d�_���)8kt[���ئ��v��!��0g�"�2/jJ1l���}��=߾��B��z�����v}+�w��j��tc:�/' ���W��=o�����K�ŗ�!JY�vhSs�قB;��'c�z�c�^<(���3D�l?��?�|o�?֕j�s��gEN�nL�w=��d��������8<�SZ�Q������>��@�[ ��C����hމs������o����}��sh{) h���3��þ��jug�>>�����P*��W+�#�_����Y�F�۶�vy,���8�[l7�7:��9��z�i,"g����2Ro!�����x)��`�E�ً��g��ӺtP�s��Zϸ}Զ��mI6�/^��;��l;��e,�J)c<O��ٰՕ�ޡk���O��>^��N��a�7�,���������@� ��n��8�����[\��k���wW�}�+����=��^i)��ڟ�9Ǭ��»74�1���3O�������{+ӄ�o�������p;���޾�Q�uy���,�bd��W/r�P�N���)]��2Bt�'�ŀ��'jy���4��?deF�&�w���{"�Yx�x�*��B��/��nda��~��c������!�4��e��HmΎ{7=)Þ=P���<�f2O�񆶣y����O�96�q����N_�`pV}��ޔ9B�'\��ȹ������ ��qC��6���}+�إ��E�p7�;2`�V�z$�z�a.��[�d�Jt&
#/F|5�X��Dx8�B��͐��QY&�p$Z�~���g:�ܧ{?����^�>�������v�(	�C�a�JN�p]��E�ޅ�`τJv�%�}<�Н������,�Q֗Q}6"�+nxZ�f�>��|{�yw��{���E{񾜲�{w��A� �g2���|�Lp+�({�\uÓ�!6,k[%񂝬G���[��^��L��]ʸN�ʈ��%׺���3MC���w� 8u,̕���3�>���J��Y�_���xՄ^H6j焷"z!/=���\�q+6�Q��o2nb�v<��S>:��]o��\�1�n����JI1��Ф9�$?��㕴ʗ�z7��������a��:=ppB�����M�v����@�/� ci}��9�v��@�S�����l����ϗ�2����M�����K��9y҉�d9�DL���Mw0Z0���RG�ҡ�9�c$N��z*�'|}�NJJPAmixt;SC�d�߾`&DC������ǃxUSi��������%D ے
�Í��ԫ�4�`2`�\���s8����-r\*lO�:��-F�CNiE���;C�:,�5�d+5�b>�Y'��=9�z��_���ܞg�k�ٯ=%֓����f�3��惺�=o��3 1=Jg�1S�khTRO�n��W=��k�;G%����d4;;���+xo�	�}�>�Z����	�����ܗ�[���Ap-������p�����f����b�k
ञ�{�߈{��"�I���#:몰�јj�`�1 �͢G�N�B���`ܾ�ĺCS|. ��߿^Е(�����5*3���3)" C��z��r ̦���7��n��qNPԔ��|*�Ĳۤ�C�w0\�@W'��Un �I�NE���!�G�����Z�#�V
аs��6������z�J��5�clP�0�݃k�xm�T,�i�4�YE�d8���Â˗�X8��{^�O$+��s:����pi��/���Y� � 9���'�M ��I_%��p� ��k�pNzy�E/W7��9���0C���E?�.�9ԾĽ��I0�}��sF?�Qu�º1�R�!ZN�ʮK���yR�[+���>4^�/dp���￴W�x��M�Z
�\����5	�`µrN6�;�2	��
l�d�l�*�{�#�Y��d�Gl ��K8�J4(q�(������ؘ�G0Gpq�;�.Ʒi�{��ܥs�K�S�e��#j�����R�l��;�f>�d�J��?��㝔G���`�:���f�?�Xk�φza�IsMOwcr��9E�v��{>�~)��Z�g�~�W�*�q��S(�nS)�Z�U�+�aAh��K�b�uNA(�B�	�X��am���1��d��Tƅ*�ɂ�ō�j>,�㙊�}%GVڢ�z�7xẑ:pY7 Z�d]���p�`��N���~�uO�v�+��&������Nϝ0��
b�GRg5�����,�8�(� 1{�G[.��6���Ƥ���4)�_�7él"��5�+?wt܍�}����v�D[��?-F���;q��fD%�Bw�9#��%@�/��J��'ě�$���x��\�E�;���i ����P5���C2#�)�����wp-���t+��\��rX���c^�Q���ݟ�F����
`R� /k5��4���/����k� �O�,Q��pg�Ė�ib@��Ԑiə��'��˦jwXic��o��ܤt���[��P�7c�_H�];���w՛7����O�j2���KA��Bڬ@KCe<T����^�-l��H� �@���f�Åd#��v[��{o��{�$y����^������i���L��Q�~�]��i9���,g�.�Ȑ�2��3�oΰ�ȼ ����$T�����T}�|&�G��Wϙ;� ��� ���L"T�!3� `u����y#,\�dA���{d'��m�w;����0vpn����C�1�=��9��D�Z3��B���0;���|۟o�{�o�>������P�!ʎ���:��%zĆ�e�{��`����x����&�>4�Eպ?��)c��^Ֆ���^��&q��S,�N�����m��W?m��Z�//ۋ��6d�"<�ҽ����T08hr���&�����H��9�b���ꂣ�I}쏣q�X� �vڔB����=���������}�Mt8m�t';�$�8�-��j?Y$述:84 ��p�cw[K�{���3�d�/:N�G�9B��4�|��F��n��Dʐ������XL��#-]��Oqo�+�S���p��;�4^�:｟��i
nUl����gZ�9�#��;bC�Q9����QD��8��9�
�|�.i�\���n6�T��H�%�����,�	Ĺ��R�D��R���'wd��bV[칌�}{�u��0��6���Pr'8��! 3�j�~9����_�Cm�u�cs*]��p0lt�1	����������)|Fp=�����
���o������&�f�<ۙ�T׻�_>�(�;�� 8���T�ʷ�H��J�n�c'8�R��5a۾�id�_�m�+�
��E���y��55�Z���p���>2F`P�d���;�_�Z����އAA�߬`3\�1yW}�`)R=����B������r��*��*��N��䴣�jY��l�|;U[��Vr�i|��P��х��-:����?Kv�0J4����u�T�	����d�B�6�r��"��h/�/ȁ.�
�K�ѐu��~������l<\�u��2eR��LF�N�V�:�9�5z�yEXkQ�L�ou��Ku��>��1,�\
�����42�{N빽�)��b�`XڣLg�$j�K��9�H�
�pV�z�,���������՝j������a)�Vt��x!3ah�����]��Ws���I���<����]���e��gSY�|7^�9���R�y}��*[��?�������fX��.��a��2��"B����x3mӏ��JZ�?GH�є"ߠQF-��=w|� Ъ/�6;��5��|?z���r+�y$���e����S��.O�������!y(t�"`�N�[��*f�C=���-�j)�|VҠ��m�`������eҳu��q���2���g�-�������f~�/��; �~��yc̿u\ǃ#ۥ����7~��(�jӐSX��]�!�JQꌰ[i��x����-���j\%|�<'3f��0iRia
���F�g��!�rм��ņ��'�2Mp�[fa������xb��L(X�N�s��Ym-�|j�z��'bn.��Zw�U�dqe�����0�����v�b��F�-���V}VU�-^�U�EnN��km�E�ۋO7�g�l���~Y����>�K��^�v{E}t�"fŃw�� WП�y �U/X(�2*~e�U|�.0��Z�����F�����YO=63;'
:���!���k�=pǝ�~.�۴�g�mv�/��h#ҷ��K�n��d�Gp>a�X�.��\���q�)�:��i뫥.�9fpZ8���:�ʦ���l0qsU N����@����65�?컈�3ޛ\�Mq_֪ҭ��K���UFRo�.Hs�L�~�A���N�R
xV�I�mF�L���f$����XF��'a��Ǧ����)Y��]��Q��h"�_��-�Z̿1�ؘw��xyNk�_ؒ%[m���]tS&��D"�M*uW�]�E�p�v��1�`��!c��bRe�N�@�0���\�8���Ie!�0up_#��wnӜ۝ׄQn:�����Íb<|��8�/�����g��K�
V�2��m.���d/lfɼ@�G&��<m�E.(�K�C��f#�1�J4D�?b����$����3E���Cg>��:�L�������`�ϥ���ksC�"ёi_�&�䅻��/�@D��d������3R��X�N��̀:�����T�c?�i�x�e<�K�T�ݸR�w��8� ,h��u�3�~^�v���N��FHP\�.٢��?(��$�V��>p^�t�}��;���9����{~sS�?�Ὧ<��q>�3�oH�����'ܬ��sګ�JB��g	�F��f�T�"���L�Z�LO:�2j] �Kt���e��/�g��!S��Kau��#Qc��I��r?J �ai�q��o�Q����Q���c�|��e��y@��h�%� �%�Cy��ĳ+�t��T5�z�/#E�u�����SܧL;�tmobP���M|�7zW����B�Y��+X݆��L�ޖMƩ$�	z�2�L�q٩U�]�\���a��lǣ�l^���fv�!�?���L:�6�RA���腓���ْ�ď[�`Լ�m�싚��|�3�y��*�I��E�W^��En��գ��r�%ot|�X�pk��j.���usC@��A��4[���hJ��h��Vů㭗N�c�����O����6^��!������^HW�|�r�"!�3K����;��@mN���ihL�GW�Mpy��A��J�g5�)�TR󞩱�����@���vR���?-�ݗ��7F��ޞ�Ɍ �`<�gvD�*�\��៻����&��6�g�Á�L�zռ��M*]Oi:$�H��2�@`���V�Q:�z�O&�mz��Ň�珍HCn~ �M���~�����`v-�����Hr�uG�m�J<�b�!f��4���E5�R��7\L�Z�������$���^���p8|FC�b�����g� ����^�_80���	�G�-���HFa����*��y�ĳ-oR�ӛ�&�!��2P�S�Rrv9�����c1�8pz��>�Κ��<t*=ӁG/�Up#�����R�^R��<:{X��*:���T�n9]e;Z�=_����.3��T�Lz�(Q�e �q
��ɩ`f
�s�2JT��_�?���>�cs���0<�{<�|&�fo�ܓ��m$���5��xjw�n�5_q[U�F�A�a�`�hsSv5#�	A�Hş�C�{��,	�YI�"��U��YY��|�BgmK������y��9})�z�_|��?������_;��s��M���/�g�EQc�.�_=���!�mj�ɸ\bD!�;b�9a���xw�������c���YJ�h�#̆��� �ݎ6�� ��Ya�|��`�n��3��'���y��7����+�4:��eFK�r�}�iw4�$�0#N�N��U&>�[��m��S�
6]�26�A�W��[���H���e�T	#�og0���������P0

--- File: .git/objects/55/a1cbc146410e4ded134a70caf1b814276c3be3 ---
x��Ij1 s�+�n0ZZj	L���|BQ����Ț��>�7�Xu(�l��&XO/s�@�\r��#�'b�DS�Ÿr���zu�C�$Gd�Q2B��3c
![�i���SMu��>����?�!���K�<�y^��%Ko�5��\��LHFc$भ����$�{o��2�;�^��[�<�e�_�Q�

--- File: .git/objects/78/d64083d469249a1d4a85edbef0e5c93a8541a0 ---
x�SKo1�_1Z�r q(��V�V�r�D�c��v�clo��g�MJ\z���=fƪ%g���L *';��P)29�)��Й�#��4Wl1DK.-ĩ8��֧Cf���f���j�aCR�𞁿;��To�;����6
�"�i1��+�.adF�S02I%#�&�P�\>���+��c��	�B~0�3>Q�Ҏ�mPN��p-�rUd�*-����Q'm1i��=+������x���,P77��(,��D��n,��
NN �6�����2ˀ��M�G��/�m*��ч6Sp�e�������M���n~y�w6���2�Q��p�Q0Y��_E��SC!���Z������0�T_?�{��Ds#�埔�:��.LO�zP��b���ݢӖ���t|Y����+=�_�6�]/��k�8&p�Pɜ�Ņxu��Fr;T����;>����\M4l�Vpk�8������

--- File: .git/objects/cf/d47797da57a7ce1a1c4a4f9e10f0678e9d085a ---
x=�A�0�=�WD���cz��MQ���Ơ45�"l�w�Mv	/y�K���l��j2��XF� ��c��/�8�曇�~���"[��떩�	
�[�O��#��4ͣ�U��[����S\��¬�F�#jM	܉u�௯ɮ;ף���#kx�4*M�,��od��˘δ@��6Ch�rN���P>

--- File: .git/objects/cf/dca8a458d4577dd687e079fc13f6af8c44d425 ---
x+)JMU0�4g040031Q�K�,�L��/Je8�{�D!���gO���j�W��*�����U/7�A������?�a���'�l�**HL�NLO���O���*��c�>I! rw�?����f���U1D]�5��+�*�d�Z������U�����Ԣ��"�2��Wʧ�
_~NJ��������Q q,O�

--- File: .git/objects/pack/pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.idx ---
�tOc                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        �n1(K�C�V;WX%�L��G7q�yw@]Ԗj ���<7gܛ�B]cs���s�9��ƻ��8�i��Q-��<S�}W$�M�[�	E��Q�@�       
  ]*I��c�ؒM�=�p��ll?��r9�NȄz��%*�ȵ��Ƌ}

--- File: .git/objects/pack/pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.pack ---
PACK      �(x�u��r�@ E�|EשּM��*�J���(Q⎗�Ay���3I�3wwn�]�۷q0�B!���9ȿF�~�t����}ڴ��Q�`�Y��oz)�	�H*?+_¦�X,��'D�`9��m��}�%�C �ꦍo���d}:��%�����+���{`*&pTeO��-�`�؉�H�(Qj��VLl%[�I��jՑR�*���~fNӞ���@���f ��u���k�iu�7e�[����U2L�)��CvWص�����f���0���:2�s�KkyΟJ�չ���<�VOU�=��x�R�4��Ó�-�����F���=�Tf@��S]�r������b<�jy�R<9��'-q�F�i�4e��Z.rMP����.����sQДR�嗢�S�r)���9[<v������۽MIl����ڀ�wF�(o��BGH���n��g�i�a��H��H˛��*7oꖅ�i tQJ��n�ǎ�q&���6ƨu�g~	~��k4̱�x�340031Q�K�,�L��/Je8�{�D!���gO���j�W���*�����U/7�A������?�a���'�l� ����x��U[o�4~ϯ�ԇ�����-��b�,�E+!�FN|&�Ա-_�~=�q�tڂx�L��s���ⳛbc�q�ᯱ~nyb�9�`����l(Xy��+ͅ��r�.&=�@ޅ�7�)��}�[��;�^z�/��}��eS�?�m?�u����,���6附�I6^+NxF"��g|X�	4&Nb��6��g���0z�b"KA�8��!��q����G~m j�dS�P����s&��	��C6�j�ɮ�i�b�Y����sb�O�!�Da&���p�N7'ƀ����H&m�֛<!�F��d|h��P�l����v��"OV�Og�l��t���My���w�Œj�>�=R�{=ep�Q��w�Ǡ}ZȚ=܃m%�K����^X�k/Y�ߒ!��mĚb�6v�Si��!�y��� � �;�Y�?�
���#�Fa��������x��L�����1�W�H#0��*�� ����EZ�sTL'C��M�a�cpC���

>�ߕ�B�U؍��RA��<�����~�,�u�90�Q�[U�-m+�^��ę�wL��7����!~F'OA'L����Jѫ�a�%�G����d��ZH��/(������q�A�o�,j��s�To�<ε�+<zF2�B\��ښa9���٩�֏6��S�B�D��B۸e���sD�-�g0 ��e�%z�f\+X��P��H����`���Uz/N.���6�Fq�$�¬�5P��&��߀�]��C���b��Z����Rf��z���י��~Mh��wOXz�/!��>YY�Iwc�2�+�?z�ѕ��ʘS�65��|;�6X���=��i�=��=����������&ټ��-���ӝ`>j/cG۶��1�)���[C��ۨyݕ��/�Q�� ���å�����#ҖY�k��=[����E.hq�$�N��Z��1U�Y�[��j��/�P�x�-��nA��<�%�����?��>Af&���l��"޾��7��g{����C�|c)�h��Ķ�^��f���[��A�CZj<j\p��x��$�����U��FQU|�BA���U����M3�w��ga����7�Eo�2�][�Go��$�8��Ҕ�΁)��������L�*I��c�ؒM�=�p��ll?��

--- File: .git/packed-refs ---
# pack-refs with: peeled fully-peeled sorted 
473771e3791e77405dd4966a20b1f08f3c1f1f37 refs/remotes/origin/main


--- File: .git/refs/heads/main ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .git/refs/remotes/origin/HEAD ---
ref: refs/remotes/origin/main


--- File: .git/refs/remotes/origin/main ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


--- File: README.md ---
# bodyone-backend-node
Server-side logic for the BodyOne app, built with Node.js. Handles API integrations, database connections, and processes requests from the frontend. Follows Airbnb's JavaScript Style Guide.


--- File: package-lock.json ---
{
  "name": "bodyone-backend-node",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "bodyone-backend-node",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@types/supertest": "^2.0.12",
        "axios": "^1.4.0",
        "bcrypt": "^5.1.0",
        "bcryptjs": "^2.4.3",
        "bull": "^4.10.4",
        "cors": "^2.8.5",
        "express": "^4.18.2",
        "express-session": "~1.17.0",
        "helmet": "^7.0.0",
        "ioredis": "^5.3.2",
        "jest-mock-extended": "^3.0.4",
        "joi": "^17.9.2",
        "jsonwebtoken": "^9.0.0",
        "lodash": "^4.17.21",
        "midjourney": "^2.2.31",
        "mongodb": "^5.5.0",
        "mongoose": "^7.1.1",
        "node-fetch": "^2.6.11",
        "openai": "^3.3.0",
        "passport": "^0.6.0",
        "passport-jwt": "^4.0.1",
        "passport-local": "^1.0.0",
        "redis": "^4.6.6",
        "ts-node": "^10.9.1",
        "typescript": "^5.0.4"
      },
      "devDependencies": {
        "@types/bcrypt": "^5.0.0",
        "@types/bcryptjs": "^2.4.2",
        "@types/cors": "^2.8.13",
        "@types/express-session": "~1.17.0",
        "@types/jest": "^29.5.1",
        "@types/jsonwebtoken": "^9.0.2",
        "@types/mocha": "^10.0.1",
        "@types/mongoose": "^5.11.97",
        "@types/node": "^20.1.7",
        "@types/node-fetch": "^2.6.4",
        "@types/passport": "^1.0.12",
        "@types/passport-jwt": "^3.0.8",
        "@types/passport-local": "^1.0.35",
        "dotenv": "^16.0.3",
        "nodemon": "^2.0.22",
        "supertest": "^6.3.3",
        "ts-jest": "^29.1.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz",
      "integrity": "sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==",
      "peer": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.22.5.tgz",
      "integrity": "sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==",
      "dependencies": {
        "@babel/highlight": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.22.9.tgz",
      "integrity": "sha512-5UamI7xkUcJ3i9qVDS+KFDEK8/7oJ55/sJMB1Ge7IEapr7KfdfV/HErR+koZwOfd+SgtFKOKRhRakdg++DcJpQ==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.22.9.tgz",
      "integrity": "sha512-G2EgeufBcYw27U4hhoIwFcgc1XU7TlXJ3mv04oOv1WCuo900U/anZSPzEqNjwdjgffkk2Gs0AN0dW1CKVLcG7w==",
      "peer": true,
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.9",
        "@babel/helper-compilation-targets": "^7.22.9",
        "@babel/helper-module-transforms": "^7.22.9",
        "@babel/helpers": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.8",
        "@babel/types": "^7.22.5",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.2",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "peer": true
    },
    "node_modules/@babel/core/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/core/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.22.9.tgz",
      "integrity": "sha512-KtLMbmicyuK2Ak/FTCJVbDnkN1SlT8/kceFTiuDiiRUUSMnHMidxSCdG4ndkTOHHpoomWe/4xkvHkEOncwjYIw==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5",
        "@jridgewell/gen-mapping": "^0.3.2",
        "@jridgewell/trace-mapping": "^0.3.17",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.9.tgz",
      "integrity": "sha512-7qYrNM6HjpnPHJbopxmb8hSPoZ0gsX8IvUS32JGVoy+pU9e5N0nLr1VjJoR6kA4d9dmGLxNYOjeB8sUDal2WMw==",
      "peer": true,
      "dependencies": {
        "@babel/compat-data": "^7.22.9",
        "@babel/helper-validator-option": "^7.22.5",
        "browserslist": "^4.21.9",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "peer": true,
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "peer": true
    },
    "node_modules/@babel/helper-environment-visitor": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz",
      "integrity": "sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-function-name": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz",
      "integrity": "sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.22.5",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-hoist-variables": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz",
      "integrity": "sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz",
      "integrity": "sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.22.9.tgz",
      "integrity": "sha512-t+WA2Xn5K+rTeGtC8jCsdAH52bjggG5TKRuRrAGNM/mjIbO4GxvlLMFOEz9wXY5I2XQ60PMFsAG2WIcG82dQMQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-module-imports": "^7.22.5",
        "@babel/helper-simple-access": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/helper-validator-identifier": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz",
      "integrity": "sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz",
      "integrity": "sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-split-export-declaration": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz",
      "integrity": "sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz",
      "integrity": "sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz",
      "integrity": "sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz",
      "integrity": "sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.22.6.tgz",
      "integrity": "sha512-YjDs6y/fVOYFV8hAf1rxd1QvR9wJe1pDBZ2AREKq/SDayfPzgk0PBnVuTCE5X1acEpMMNOVUqoe+OwiZGJ+OaA==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.6",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.22.5.tgz",
      "integrity": "sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.22.5",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "node_modules/@babel/highlight/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.22.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.22.7.tgz",
      "integrity": "sha512-7NF8pOkHP5o2vpmGgNGcfAeCvOYhGLyA3Z4eBQkT1RJlWu47n63bCs93QfJ2hIAFCil7L5P2IWhs1oToVgrL0Q==",
      "peer": true,
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.22.5.tgz",
      "integrity": "sha512-gvyP4hZrgrs/wWMaocvxZ44Hw0b3W8Pe+cMxc8V1ULQ07oh8VNbIRaoD1LRZVTvD+0nieDKjfgKg89sD7rrKrg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.22.5.tgz",
      "integrity": "sha512-1mS2o03i7t1c6VzH6fdQ3OA8tcEIxwG18zIPRp+UY1Ihv6W+XZzBCVxExF9upussPXJ0xE9XRHwMoNs1ep/nRQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.5.tgz",
      "integrity": "sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.22.5",
        "@babel/parser": "^7.22.5",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.22.8",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.22.8.tgz",
      "integrity": "sha512-y6LPR+wpM2I3qJrsheCTwhIinzkETbplIgPBbwvqPKc+uljeA5gP+3nP8irdYt1mjQaDnlIcG+dw8OjAco4GXw==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.7",
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-function-name": "^7.22.5",
        "@babel/helper-hoist-variables": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/types": "^7.22.5",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/traverse/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/@babel/types": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.22.5.tgz",
      "integrity": "sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-string-parser": "^7.22.5",
        "@babel/helper-validator-identifier": "^7.22.5",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "peer": true
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "node_modules/@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@huggingface/inference": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@huggingface/inference/-/inference-2.6.1.tgz",
      "integrity": "sha512-qFYchgOCPeEkZJKiSr7Kz62QwukJtgkeQCT7Q0SSKUcvHpTQVNJp6i/JrJMR4dBdzQysJ1SZDC0pLBBnnskTag==",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@ioredis/commands": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.2.0.tgz",
      "integrity": "sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg=="
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "peer": true,
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.6.2.tgz",
      "integrity": "sha512-0N0yZof5hi44HAR2pPS+ikJ3nzKNoZdVu8FffRf3wy47I7Dm7etk/3KetMdRUqzVd16V4O2m2ISpNTbnIuqy1w==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.6.2.tgz",
      "integrity": "sha512-Oj+5B+sDMiMWLhPFF+4/DvHOf+U10rgvCLGPHP8Xlsy/7QxS51aU/eBngudHlJXnaWD5EohAgJ4js+T6pa+zOg==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/reporters": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.5.0",
        "jest-config": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-resolve-dependencies": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/environment": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.6.2.tgz",
      "integrity": "sha512-AEcW43C7huGd/vogTddNNTDRpO6vQ2zaQNrttvWV18ArBx9Z56h7BIsXkNFJVOO4/kblWEQz30ckw0+L3izc+Q==",
      "peer": true,
      "dependencies": {
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-m6DrEJxVKjkELTVAztTLyS/7C92Y2b0VYqmDROYKLLALHn8T/04yPs70NADUYPrV3ruI+H3J0iUIuhkjp7vkfg==",
      "peer": true,
      "dependencies": {
        "expect": "^29.6.2",
        "jest-snapshot": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.6.2.tgz",
      "integrity": "sha512-6zIhM8go3RV2IG4aIZaZbxwpOzz3ZiM23oxAlkquOIole+G6TrbeXnykxWYlqF7kz2HlBjdKtca20x9atkEQYg==",
      "dependencies": {
        "jest-get-type": "^29.4.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.6.2.tgz",
      "integrity": "sha512-euZDmIlWjm1Z0lJ1D0f7a0/y5Kh/koLFMUBE5SUYWrmy8oNhJpbTBDAP6CxKnadcMLDoDf4waRYCe35cH6G6PA==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.6.2.tgz",
      "integrity": "sha512-cjuJmNDjs6aMijCmSa1g2TNG4Lby/AeU7/02VtpW+SLcZXzOLK2GpN2nLqcFjmhy3B3AoPeQVx7BnyOf681bAw==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/types": "^29.6.1",
        "jest-mock": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.6.2.tgz",
      "integrity": "sha512-sWtijrvIav8LgfJZlrGCdN0nP2EWbakglJY49J1Y5QihcQLfy7ovyxxjJBRXMNltgt4uPtEcFmIMbVshEDfFWw==",
      "peer": true,
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/schemas": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.0.tgz",
      "integrity": "sha512-rxLjXyJBTL4LQeJW3aKo0M/+GkCOXsO+8i9Iu7eDb6KwtP65ayoDsitrdPBtujxQ88k4wI2FNYfa6TOGwSn6cQ==",
      "dependencies": {
        "@sinclair/typebox": "^0.27.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.0.tgz",
      "integrity": "sha512-oA+I2SHHQGxDCZpbrsCQSoMLb3Bz547JnM+jUr9qEbuw0vQlWZfpPS7CO9J7XiwKicEz9OFn/IYoLkkiUD7bzA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.6.2.tgz",
      "integrity": "sha512-3VKFXzcV42EYhMCsJQURptSqnyjqCGbtLuX5Xxb6Pm6gUf1wIRIl+mandIRGJyWKgNKYF9cnstti6Ls5ekduqw==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.6.2.tgz",
      "integrity": "sha512-GVYi6PfPwVejO7slw6IDO0qKVum5jtrJ3KoLGbgBWyr2qr4GaxFV6su+ZAjdTX75Sr1DkMFRk09r2ZVa+wtCGw==",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.6.2.tgz",
      "integrity": "sha512-ZqCqEISr58Ce3U+buNFJYUktLJZOggfyvR+bZMaiV1e8B1SIvJbwZMrYz3gx/KAPn9EXmOmN+uB08yLCjWkQQg==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "29.6.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.1.tgz",
      "integrity": "sha512-tPKQNMPuXgvdOn2/Lg9HNfUvjYVGolt04Hp03f5hAk878uwOLikN+JzeLY0HcVgKgFl9Hs3EIqpu3WX27XNhnw==",
      "dependencies": {
        "@jest/schemas": "^29.6.0",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
      "peer": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "peer": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.18",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz",
      "integrity": "sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      }
    },
    "node_modules/@jridgewell/trace-mapping/node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.14",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
      "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
      "peer": true
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.2.tgz",
      "integrity": "sha512-9bfjwDxIDWmmOKusUcqdS4Rw+SETlp9Dy39Xui9BEGEk19dDwH0jhipwFzEff/pFg95NKymc6TOTbRKcWeRqyQ==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.2.tgz",
      "integrity": "sha512-lwriRAHm1Yg4iDf23Oxm9n/t5Zpw1lVnxYU3HnJPTi2lJRkKTrps1KVgvL6m7WvmhYVt/FIsssWay+k45QHeuw==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.2.tgz",
      "integrity": "sha512-MOI9Dlfrpi2Cuc7i5dXdxPbFIgbDBGgKR5F2yWEa6FVEtSWncfVNKW5AKjImAQ6CZlBK9tympdsZJ2xThBiWWA==",
      "cpu": [
        "arm"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.2.tgz",
      "integrity": "sha512-FU20Bo66/f7He9Fp9sP2zaJ1Q8L9uLPZQDub/WlUip78JlPeMbVL8546HbZfcW9LNciEXc8d+tThSJjSC+tmsg==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.2.tgz",
      "integrity": "sha512-gsWNDCklNy7Ajk0vBBf9jEx04RUxuDQfBse918Ww+Qb9HCPoGzS+XJTLe96iN3BVK7grnLiYghP/M4L8VsaHeA==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-win32-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.2.tgz",
      "integrity": "sha512-O+6Gs8UeDbyFpbSh2CPEz/UOrrdWPTBYNblZK5CxxLisYt4kGX3Sc+czffFonyjiGSq3jWLwJS/CCJc7tBr4sQ==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@redis/bloom": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/client": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.5.8.tgz",
      "integrity": "sha512-xzElwHIO6rBAqzPeVnCzgvrnBEcFL1P0w8P65VNLRkdVW8rOE58f52hdj0BDgmsdOm4f1EoXPZtH4Fh7M/qUpw==",
      "dependencies": {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        "yallist": "4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@redis/graph": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.0.tgz",
      "integrity": "sha512-16yZWngxyXPd+MJxeSr0dqh2AIOi8j9yXKcKCwVaKDbH3HTuETpDVPcLujhFYVPtYrngSco31BUcSa9TH31Gqg==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/json": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.4.tgz",
      "integrity": "sha512-LUZE2Gdrhg0Rx7AN+cZkb1e6HjoSKaeeW8rYnt89Tly13GBI5eP4CwDVr+MY8BAYfCg4/N15OUrtLoona9uSgw==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/search": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.1.3.tgz",
      "integrity": "sha512-4Dg1JjvCevdiCBTZqjhKkGoC5/BcB7k9j99kdMnaXFXg8x4eyOIVg9487CMv7/BUVkFLZCaIh8ead9mU15DNng==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/time-series": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.0.4.tgz",
      "integrity": "sha512-ThUIgo2U/g7cCuZavucQTQzA9g9JbDDY2f64u3AbAoz/8vE2lt2U37LamDUVChhaDA3IRT9R6VvJwqnUfTJzng==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@sideway/address": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.4.tgz",
      "integrity": "sha512-7vwq+rOHVWjyXxVlR76Agnvhy8I9rpzjosTESvmhNeXOXdZZB15Fl+TI9x1SiHZH5Jv2wTGduSxFDIaq0m3DUw==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "node_modules/@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA=="
    },
    "node_modules/@sinonjs/commons": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.0.tgz",
      "integrity": "sha512-jXBtWAF4vmdNmZgD5FoKsVLv3rPgDnLgPbU84LIJ3otV44vJlDRokVng5v8NFJdCf/da9legHcKaRuZs4L7faA==",
      "peer": true,
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "peer": true,
      "dependencies": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA=="
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag=="
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow=="
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA=="
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.1.tgz",
      "integrity": "sha512-aACu/U/omhdk15O4Nfb+fHgH/z3QsfQzpnvRZhYhThms83ZnAOZz7zZAWO7mn2yyNQaA4xTO8GLK3uqFU4bYYw==",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.4",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.4.tgz",
      "integrity": "sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.1.tgz",
      "integrity": "sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.1.tgz",
      "integrity": "sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/bcrypt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.0.tgz",
      "integrity": "sha512-agtcFKaruL8TmcvqbndlqHPSJgsolhf/qPWchFlgnW1gECTN/nKbFcoFnvKAQRFfKbh+BO6A3SWdJu9t+xF3Lw==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/bcryptjs": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@types/bcryptjs/-/bcryptjs-2.4.2.tgz",
      "integrity": "sha512-LiMQ6EOPob/4yUL66SZzu6Yh77cbzJFYll+ZfaPiPPFswtIlA/Fs1MzdKYA7JApHU49zQTbJGX3PDmCpIdDBRQ==",
      "dev": true
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dev": true,
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cookiejar": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.2.tgz",
      "integrity": "sha512-t73xJJrvdTjXrn4jLS9VSGRbz0nUY3cl2DMGDU48lKl+HR9dbbjW2A9r3g40VA++mQpy6uuHg33gy7du2BKpog=="
    },
    "node_modules/@types/cors": {
      "version": "2.8.13",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.13.tgz",
      "integrity": "sha512-RG8AStHlUiV5ysZQKq97copd2UmVYw3/pRMLefISZ3S1hK104Cwm7iLQ3fTKx+lsUH2CE8FlLaYeEA2LSeqYUA==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/express": {
      "version": "4.17.17",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.17.tgz",
      "integrity": "sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==",
      "dev": true,
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.17.35",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz",
      "integrity": "sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/express-session": {
      "version": "1.17.7",
      "resolved": "https://registry.npmjs.org/@types/express-session/-/express-session-1.17.7.tgz",
      "integrity": "sha512-L25080PBYoRLu472HY/HNCxaXY8AaGgqGC8/p/8+BYMhG0RDOLQ1wpXOpAzr4Gi5TGozTKyJv5BVODM5UNyVMw==",
      "dev": true,
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.6.tgz",
      "integrity": "sha512-Sig0SNORX9fdW+bQuTEovKj3uHcUL6LQKbCrrqb1X7J6/ReAbhCXRAhc+SMejhLELFj2QcyuxmUooZ4bt5ReSw==",
      "peer": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.1.tgz",
      "integrity": "sha512-/K3ds8TRAfBvi5vfjuz8y6+GiAYBZ0x4tXv1Av6CWBWn0IlADc+ZX9pMq7oU0fNQPnBwIZl3rmeLp6SBApbxSQ==",
      "dev": true
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz",
      "integrity": "sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g=="
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
      "integrity": "sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz",
      "integrity": "sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/jest": {
      "version": "29.5.3",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-29.5.3.tgz",
      "integrity": "sha512-1Nq7YrO/vJE/FYnqYyw0FS8LdrjExSgIiHyKg7xPpn+yi8Q4huZryKnkJatN1ZRH89Kw2v33/8ZMB7DuZeSLlA==",
      "dev": true,
      "dependencies": {
        "expect": "^29.0.0",
        "pretty-format": "^29.0.0"
      }
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-drE6uz7QBKq1fYqqoFKTDRdFCPHd5TCub75BM+D+cMx7NU9hUz7SESLfC2fSCXVFMO5Yj8sOWHuGqPgjc+fz0Q==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==",
      "dev": true
    },
    "node_modules/@types/mocha": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/@types/mocha/-/mocha-10.0.1.tgz",
      "integrity": "sha512-/fvYntiO1GeICvqbQ3doGDIP97vWmvFt83GKguJ6prmQM2iXZfFcq6YE8KteFyRtX2/h5Hf91BYvPodJKFYv5Q==",
      "dev": true
    },
    "node_modules/@types/mongoose": {
      "version": "5.11.97",
      "resolved": "https://registry.npmjs.org/@types/mongoose/-/mongoose-5.11.97.tgz",
      "integrity": "sha512-cqwOVYT3qXyLiGw7ueU2kX9noE8DPGRY6z8eUxudhXY8NZ7DMKYAxyZkLSevGfhCX3dO/AoX5/SO9lAzfjon0Q==",
      "deprecated": "Mongoose publishes its own types, so you do not need to install this package.",
      "dev": true,
      "dependencies": {
        "mongoose": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "20.4.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.4.6.tgz",
      "integrity": "sha512-q0RkvNgMweWWIvSMDiXhflGUKMdIxBo2M2tYM/0kEGDueQByFzK4KZAgu5YHGFNxziTlppNpTIBcqHQAxlfHdA=="
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.4",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.4.tgz",
      "integrity": "sha512-1ZX9fcN4Rvkvgv4E6PAY5WXUFWFcRWxZa3EW83UjycOB9ljJCedb2CupIP4RZMEwF/M3eTcCihbBRgwtGbg5Rg==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "node_modules/@types/passport": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/@types/passport/-/passport-1.0.12.tgz",
      "integrity": "sha512-QFdJ2TiAEoXfEQSNDISJR1Tm51I78CymqcBa8imbjo6dNNu+l2huDxxbDEIoFIwOSKMkOfHEikyDuZ38WwWsmw==",
      "dev": true,
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/passport-jwt": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/@types/passport-jwt/-/passport-jwt-3.0.9.tgz",
      "integrity": "sha512-5XJt+79emfgpuBvBQusUPylFIVtW1QVAAkTRwCbRJAmxUjmLtIqUU6V1ovpnHPu6Qut3mR5Juc+s7kd06roNTg==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/jsonwebtoken": "*",
        "@types/passport-strategy": "*"
      }
    },
    "node_modules/@types/passport-local": {
      "version": "1.0.35",
      "resolved": "https://registry.npmjs.org/@types/passport-local/-/passport-local-1.0.35.tgz",
      "integrity": "sha512-K4eLTJ8R0yYW8TvCqkjB0pTKoqfUSdl5PfZdidTjV2ETV3604fQxtY6BHKjQWAx50WUS0lqzBvKv3LoI1ZBPeA==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/passport": "*",
        "@types/passport-strategy": "*"
      }
    },
    "node_modules/@types/passport-strategy": {
      "version": "0.2.35",
      "resolved": "https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.35.tgz",
      "integrity": "sha512-o5D19Jy2XPFoX2rKApykY15et3Apgax00RRLf0RUotPDUsYrQa7x4howLYr9El2mlUApHmCMv5CZ1IXqKFQ2+g==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/passport": "*"
      }
    },
    "node_modules/@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==",
      "dev": true
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==",
      "dev": true
    },
    "node_modules/@types/send": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.1.tgz",
      "integrity": "sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==",
      "dev": true,
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.2.tgz",
      "integrity": "sha512-J2LqtvFYCzaj8pVYKw8klQXrLLk7TBZmQ4ShlcdkELFKGwGMfevMLneMMRkMgZxotOD9wg497LpC7O8PcvAmfw==",
      "dev": true,
      "dependencies": {
        "@types/http-errors": "*",
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.1.tgz",
      "integrity": "sha512-Hl219/BT5fLAaz6NDkSuhzasy49dwQS/DSdu4MdggFB8zcXv7vflBI3xp7FEmkmdDkBUI2bPUNeMttp2knYdxw=="
    },
    "node_modules/@types/superagent": {
      "version": "4.1.18",
      "resolved": "https://registry.npmjs.org/@types/superagent/-/superagent-4.1.18.tgz",
      "integrity": "sha512-LOWgpacIV8GHhrsQU+QMZuomfqXiqzz3ILLkCtKx3Us6AmomFViuzKT9D693QTKgyut2oCytMG8/efOop+DB+w==",
      "dependencies": {
        "@types/cookiejar": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/supertest": {
      "version": "2.0.12",
      "resolved": "https://registry.npmjs.org/@types/supertest/-/supertest-2.0.12.tgz",
      "integrity": "sha512-X3HPWTwXRerBZS7Mo1k6vMVR1Z6zmJcDVn5O/31whe0tnjE4te6ZJSJGq1RiqHPjzPdMTfjCFogDJmwng9xHaQ==",
      "dependencies": {
        "@types/superagent": "*"
      }
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "dependencies": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "17.0.24",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.24.tgz",
      "integrity": "sha512-6i0aC7jV6QzQB8ne1joVZ0eSFIstHsCrobmOtghM11yGlH0j43FKL2UhWdELkyps0zuf7qVTUVCCR+tgSlyLLw==",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.0",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.0.tgz",
      "integrity": "sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA=="
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.10.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.10.0.tgz",
      "integrity": "sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw==",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agent-base/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/agent-base/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "peer": true,
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
    },
    "node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "peer": true,
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "node_modules/axios": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.4.0.tgz",
      "integrity": "sha512-S4XCWMEmzvo64T9GfvQDOXgYRDJ/wsSZc7Jvdgx5u1sd0JwsuPLqb3SYmusag+edF6ziyMensPVqLTSc1PiSEA==",
      "dependencies": {
        "follow-redirects": "^1.15.0",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/axios/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/babel-jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.6.2.tgz",
      "integrity": "sha512-BYCzImLos6J3BH/+HvUCHG1dTf2MzmAB4jaVxHV+29RZLjR29XuYTmsf2sdDwkrb+FczkGo3kOhE7ga6sI0P4A==",
      "peer": true,
      "dependencies": {
        "@jest/transform": "^29.6.2",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.5.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.5.0.tgz",
      "integrity": "sha512-zSuuuAlTMT4mzLj2nPnUm6fsE6270vdOfnpbJ+RmruU75UhLFvL0N2NgI7xpeS7NaB6hGqmd5pVpGTDYvi4Q3w==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz",
      "integrity": "sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==",
      "peer": true,
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.5.0.tgz",
      "integrity": "sha512-JOMloxOqdiBSxMAzjRaH023/vvcaSaec49zvg+2LmNsktC7ei39LTJGw02J+9uUtTZUq6xbLyJ4dxe9sSmIuAg==",
      "peer": true,
      "dependencies": {
        "babel-plugin-jest-hoist": "^29.5.0",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/bcrypt": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.0.tgz",
      "integrity": "sha512-RHBS7HI5N5tEnGTmtR/pppX0mmDSBpQ4aCBsj7CEQfYXDcO74A8sIBYcJMuCsis2E81zDxeENYhv66oZwLiA+Q==",
      "hasInstallScript": true,
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.10",
        "node-addon-api": "^5.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.21.10",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.10.tgz",
      "integrity": "sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true,
      "dependencies": {
        "caniuse-lite": "^1.0.30001517",
        "electron-to-chromium": "^1.4.477",
        "node-releases": "^2.0.13",
        "update-browserslist-db": "^1.0.11"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bs-logger": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
      "dev": true,
      "dependencies": {
        "fast-json-stable-stringify": "2.x"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "peer": true,
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/bson": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-5.4.0.tgz",
      "integrity": "sha512-WRZ5SQI5GfUuKnPTNmAYPiKIof3ORXAF4IRU5UcgmivNIon01rWQlw5RUH954dpu8yGL8T59YShVddIPaU/gFA==",
      "engines": {
        "node": ">=14.20.1"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "peer": true
    },
    "node_modules/bull": {
      "version": "4.10.4",
      "resolved": "https://registry.npmjs.org/bull/-/bull-4.10.4.tgz",
      "integrity": "sha512-o9m/7HjS/Or3vqRd59evBlWCXd9Lp+ALppKseoSKHaykK46SmRjAilX98PgmOz1yeVaurt8D5UtvEt4bUjM3eA==",
      "dependencies": {
        "cron-parser": "^4.2.1",
        "debuglog": "^1.0.0",
        "get-port": "^5.1.1",
        "ioredis": "^5.0.0",
        "lodash": "^4.17.21",
        "msgpackr": "^1.5.2",
        "semver": "^7.3.2",
        "uuid": "^8.3.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001519",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001519.tgz",
      "integrity": "sha512-0QHgqR+Jv4bxHMp8kZ1Kn8CH55OikjKJ6JmKkZYP1F3D7w+lnFXF70nG5eNfsZS89jadi5Ywy5UCSKLAglIRkg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ci-info": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.8.0.tgz",
      "integrity": "sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
      "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==",
      "peer": true
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "peer": true,
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "peer": true,
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "peer": true
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==",
      "dev": true
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ=="
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "peer": true
    },
    "node_modules/cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "node_modules/cron-parser": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.8.1.tgz",
      "integrity": "sha512-jbokKWGcyU4gl6jAfX97E1gDpY12DJ1cLJZmoDzaAln/shZ+S3KBFBuA2Q6WeUN4gJf/8klnV1EfvhA2lK5IRQ==",
      "dependencies": {
        "luxon": "^3.2.1"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "peer": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/debuglog": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
      "integrity": "sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw==",
      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/dedent": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.1.tgz",
      "integrity": "sha512-+LxW+KLWxu3HW3M2w2ympwtqPrqYRzU8fqi6Fhd18fBALe15blJPI/I4+UHveMVG6lJqB4JNd4UG0S5cnVHwIg==",
      "peer": true,
      "peerDependencies": {
        "babel-plugin-macros": "^3.1.0"
      },
      "peerDependenciesMeta": {
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ=="
    },
    "node_modules/denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "dependencies": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/diff-sequences": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.4.3.tgz",
      "integrity": "sha512-ofrBgwpPhCD85kMKtE9RYFFq6OC1A89oW2vvgWZNCwxrUpRUILopY7lsYyMDSjc8g6U6aiO0Qubg6r4Wgt5ZnA==",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/motdotla/dotenv?sponsor=1"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/electron-to-chromium": {
      "version": "1.4.482",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.482.tgz",
      "integrity": "sha512-h+UqpfmEr1Qkk0zp7ej/jid7CXoq4m4QzW6wNTb0ELJ/BZCpA4wgUylBIMGCe621tnr4l5VmoHjdoSx2lbnNJA==",
      "peer": true
    },
    "node_modules/emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "peer": true,
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "peer": true,
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "peer": true,
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "peer": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-iAErsLxJ8C+S02QbLAwgSGSezLQK+XXRDt8IuFXFpwCNw2ECmzZSmjKcCaFVp5VRMk+WAvz6h6jokzEzBFZEuA==",
      "dependencies": {
        "@jest/expect-utils": "^29.6.2",
        "@types/node": "*",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express-session": {
      "version": "1.17.3",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.3.tgz",
      "integrity": "sha512-4+otWXlShYlG1Ma+2Jnn+xgKUZTMJ5QD3YvfilX3AcocOAbIkVylSWEklzALe/+Pu4qV6TYBj5GwOBFfdKqLBw==",
      "dependencies": {
        "cookie": "0.4.2",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "node_modules/fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "peer": true,
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "peer": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "dev": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/formidable": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.1.2.tgz",
      "integrity": "sha512-CM3GuJ57US06mlpQ47YcunuUZ9jpm8Vx+P2CGt2j7HpgkKZO/DJYQ0Bobim8G6PFQmK5lOqOOdUXboU+h73A4g==",
      "dev": true,
      "dependencies": {
        "dezalgo": "^1.0.4",
        "hexoid": "^1.0.0",
        "once": "^1.4.0",
        "qs": "^6.11.0"
      },
      "funding": {
        "url": "https://ko-fi.com/tunnckoCore/commissions"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "node_modules/gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/generic-pool": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "peer": true,
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "peer": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-port": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/get-port/-/get-port-5.1.1.tgz",
      "integrity": "sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
    },
    "node_modules/helmet": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.0.0.tgz",
      "integrity": "sha512-MsIgYmdBh460ZZ8cJC81q4XJknjG567wzEmv46WOBblDb6TUd3z8/GhgmsM9pn8g2B80tAJ4m5/d3Bi1KrSUBQ==",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/hexoid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "peer": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "peer": true,
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "node_modules/import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "peer": true,
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "peer": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ioredis": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.3.2.tgz",
      "integrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA==",
      "dependencies": {
        "@ioredis/commands": "^1.1.1",
        "cluster-key-slot": "^1.1.0",
        "debug": "^4.3.4",
        "denque": "^2.1.0",
        "lodash.defaults": "^4.2.0",
        "lodash.isarguments": "^3.1.0",
        "redis-errors": "^1.2.0",
        "redis-parser": "^3.0.0",
        "standard-as-callback": "^2.1.0"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/ioredis"
      }
    },
    "node_modules/ioredis/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/ioredis/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "peer": true
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.12.1.tgz",
      "integrity": "sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==",
      "peer": true,
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "peer": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "peer": true
    },
    "node_modules/isomorphic-ws": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-5.0.0.tgz",
      "integrity": "sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz",
      "integrity": "sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "peer": true,
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "peer": true,
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "peer": true,
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
      "peer": true,
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.6.2.tgz",
      "integrity": "sha512-8eQg2mqFbaP7CwfsTpCxQ+sHzw1WuNWL5UUvjnWP4hx2riGz9fPSzYOaU5q8/GqWn1TfgZIVTqYJygbGbWAANg==",
      "peer": true,
      "dependencies": {
        "@jest/core": "^29.6.2",
        "@jest/types": "^29.6.1",
        "import-local": "^3.0.2",
        "jest-cli": "^29.6.2"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.5.0.tgz",
      "integrity": "sha512-IFG34IUMUaNBIxjQXF/iu7g6EcdMrGRRxaUSw92I/2g2YC6vCdTltl4nHvt7Ci5nSJwXIkCu8Ka1DKF+X7Z1Ag==",
      "peer": true,
      "dependencies": {
        "execa": "^5.0.0",
        "p-limit": "^3.1.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.6.2.tgz",
      "integrity": "sha512-G9mN+KOYIUe2sB9kpJkO9Bk18J4dTDArNFPwoZ7WKHKel55eKIS/u2bLthxgojwlf9NLCVQfgzM/WsOVvoC6Fw==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.6.2",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.6.2",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-cli": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.6.2.tgz",
      "integrity": "sha512-TT6O247v6dCEX2UGHGyflMpxhnrL0DNqP2fRTKYm3nJJpCTfXX3GCMQPGFjXDoj0i5/Blp3jriKXFgdfmbYB6Q==",
      "peer": true,
      "dependencies": {
        "@jest/core": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "prompts": "^2.0.1",
        "yargs": "^17.3.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.6.2.tgz",
      "integrity": "sha512-VxwFOC8gkiJbuodG9CPtMRjBUNZEHxwfQXmIudSTzFWxaci3Qub1ddTRbFNQlD/zUeaifLndh/eDccFX4wCMQw==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-jest": "^29.6.2",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.6.2",
        "jest-environment-node": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@types/node": "*",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-diff": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.6.2.tgz",
      "integrity": "sha512-t+ST7CB9GX5F2xKwhwCf0TAR17uNDiaPTZnVymP9lw0lssa9vG+AFyDZoeIHStU3WowFFwT+ky+er0WVl2yGhA==",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.4.3",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.4.3.tgz",
      "integrity": "sha512-fzdTftThczeSD9nZ3fzA/4KkHtnmllawWrXO69vtI+L9WjEIuXWs4AmyME7lN5hU7dB0sHhuPfcKofRsUb/2Fg==",
      "peer": true,
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.6.2.tgz",
      "integrity": "sha512-MsrsqA0Ia99cIpABBc3izS1ZYoYfhIy0NNWqPSE0YXbQjwchyt6B1HD2khzyPe1WiJA7hbxXy77ZoUQxn8UlSw==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "jest-util": "^29.6.2",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.6.2.tgz",
      "integrity": "sha512-YGdFeZ3T9a+/612c5mTQIllvWkddPbYcN2v95ZH24oWMbGA4GGS2XdIF92QMhUhvrjjuQWYgUGW2zawOyH63MQ==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.4.3.tgz",
      "integrity": "sha512-J5Xez4nRRMjk8emnTpWrlkyb9pfRQQanDrvWHhsR1+VUfbwxi30eVcZFlcdGInRibU4G5LwHXpI7IRHU0CY+gg==",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.6.2.tgz",
      "integrity": "sha512-+51XleTDAAysvU8rT6AnS1ZJ+WHVNqhj1k6nTvN2PYP+HjU3kqlaKQ1Lnw3NYW3bm2r8vq82X0Z1nDDHZMzHVA==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.6.2.tgz",
      "integrity": "sha512-aNqYhfp5uYEO3tdWMb2bfWv6f0b4I0LOxVRpnRLAeque2uqOVVMLh6khnTcE2qJ5wAKop0HcreM1btoysD6bPQ==",
      "peer": true,
      "dependencies": {
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.6.2.tgz",
      "integrity": "sha512-4LiAk3hSSobtomeIAzFTe+N8kL6z0JtF3n6I4fg29iIW7tt99R7ZcIFW34QkX+DuVrf+CUe6wuVOpm7ZKFJzZQ==",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.6.2.tgz",
      "integrity": "sha512-vnIGYEjoPSuRqV8W9t+Wow95SDp6KPX2Uf7EoeG9G99J2OVh7OSwpS4B6J0NfpEIpfkBNHlBZpA2rblEuEFhZQ==",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.6.2.tgz",
      "integrity": "sha512-hoSv3lb3byzdKfwqCuT6uTscan471GUECqgNYykg6ob0yiAw3zYc7OrPnI9Qv8Wwoa4lC7AZ9hyS4AiIx5U2zg==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock-extended": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-3.0.5.tgz",
      "integrity": "sha512-/eHdaNPUAXe7f65gHH5urc8SbRVWjYxBqmCgax2uqOBJy8UUcCBMN1upj1eZ8y/i+IqpyEm4Kq0VKss/GCCTdw==",
      "dependencies": {
        "ts-essentials": "^7.0.3"
      },
      "peerDependencies": {
        "jest": "^24.0.0 || ^25.0.0 || ^26.0.0 || ^27.0.0 || ^28.0.0 || ^29.0.0",
        "typescript": "^3.0.0 || ^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "peer": true,
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.4.3.tgz",
      "integrity": "sha512-O4FglZaMmWXbGHSQInfXewIsd1LMn9p3ZXB/6r4FOkyhX2/iP/soMG98jGvk/A3HAN78+5VWcBGO0BJAPRh4kg==",
      "peer": true,
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.6.2.tgz",
      "integrity": "sha512-G/iQUvZWI5e3SMFssc4ug4dH0aZiZpsDq9o1PtXTV1210Ztyb2+w+ZgQkB3iOiC5SmAEzJBOHWz6Hvrd+QnNPw==",
      "peer": true,
      "dependencies": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.6.2.tgz",
      "integrity": "sha512-LGqjDWxg2fuQQm7ypDxduLu/m4+4Lb4gczc13v51VMZbVP5tSBILqVx8qfWcsdP8f0G7aIqByIALDB0R93yL+w==",
      "peer": true,
      "dependencies": {
        "jest-regex-util": "^29.4.3",
        "jest-snapshot": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.6.2.tgz",
      "integrity": "sha512-wXOT/a0EspYgfMiYHxwGLPCZfC0c38MivAlb2lMEAlwHINKemrttu1uSbcGbfDV31sFaPWnWJPmb2qXM8pqZ4w==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/environment": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.4.3",
        "jest-environment-node": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-leak-detector": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-resolve": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "jest-worker": "^29.6.2",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.6.2.tgz",
      "integrity": "sha512-2X9dqK768KufGJyIeLmIzToDmsN0m7Iek8QNxRSI/2+iPFYHF0jTwlO3ftn7gdKd98G/VQw9XJCk77rbTGZnJg==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/globals": "^29.6.2",
        "@jest/source-map": "^29.6.0",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.6.2.tgz",
      "integrity": "sha512-1OdjqvqmRdGNvWXr/YZHuyhh5DeaLp1p/F8Tht/MrMw4Kr1Uu/j4lRG+iKl1DAqUJDWxtQBMk41Lnf/JETYBRA==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.6.2",
        "semver": "^7.5.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.6.2.tgz",
      "integrity": "sha512-3eX1qb6L88lJNCFlEADKOkjpXJQyZRiavX1INZ4tRnrBVr2COd3RgcTLyUiEXMNBlDU/cgYq6taUS0fExrWW4w==",
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.6.2.tgz",
      "integrity": "sha512-vGz0yMN5fUFRRbpJDPwxMpgSXW1LDKROHfBopAvDcmD6s+B/s8WJrwi+4bfH4SdInBA5C3P3BI19dBtKzx1Arg==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watcher": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.6.2.tgz",
      "integrity": "sha512-GZitlqkMkhkefjfN/p3SJjrDaxPflqxEAv3/ik10OirZqJGYH5rPiIsgVcfof0Tdqg3shQGdEIxDBx+B4tuLzA==",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.6.2",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.6.2.tgz",
      "integrity": "sha512-l3ccBOabTdkng8I/ORCkADz4eSMKejTYv1vB/Z83UiubqhC1oQ5Li6dWCyqOIvSifGjUBxuvxvlm6KGK2DtuAQ==",
      "peer": true,
      "dependencies": {
        "@types/node": "*",
        "jest-util": "^29.6.2",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "peer": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/joi": {
      "version": "17.9.2",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.9.2.tgz",
      "integrity": "sha512-Itk/r+V4Dx0V3c7RLFdRh12IOjySm2/WGPMubBT92cQvRfYZhPM2W0hZlctjj72iES8jsRCwp7S/cRmWBnJ4nw==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0",
        "@hapi/topo": "^5.0.0",
        "@sideway/address": "^4.1.3",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "peer": true,
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "peer": true,
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "peer": true
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.1.tgz",
      "integrity": "sha512-K8wx7eJ5TPvEjuiVSkv167EVboBDv9PZdDoF7BgeQnBLVvZWW9clr2PsQHVJDTKaEIH5JBIwHujGcHp7GgI2eg==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash": "^4.17.21",
        "ms": "^2.1.1",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA==",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "peer": true
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "peer": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ=="
    },
    "node_modules/lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg=="
    },
    "node_modules/lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "dev": true
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/luxon": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
      "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "peer": true,
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "peer": true
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "dependencies": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/midjourney": {
      "version": "2.7.79",
      "resolved": "https://registry.npmjs.org/midjourney/-/midjourney-2.7.79.tgz",
      "integrity": "sha512-klnOas1htHIIDlw+SyX6/kaT3wNNbbtxJaFpEqnJnw5w++a1WfbjFhgiD4QWggbSvsACbJukV6LWsvgyvf7WOQ==",
      "dependencies": {
        "@huggingface/inference": "^2.5.0",
        "isomorphic-ws": "^5.0.0",
        "mime": "^3.0.0",
        "p-queue": "^6.6.2",
        "snowyflake": "^2.0.0",
        "throat": "^6.0.2",
        "tslib": "^2.5.0",
        "websocket-ts": "^1.1.1",
        "ws": "^8.13.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/midjourney/node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/mongodb": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.7.0.tgz",
      "integrity": "sha512-zm82Bq33QbqtxDf58fLWBwTjARK3NSvKYjyz997KSy6hpat0prjeX/kxjbPVyZY60XYPDNETaHkHJI2UCzSLuw==",
      "dependencies": {
        "bson": "^5.4.0",
        "mongodb-connection-string-url": "^2.6.0",
        "socks": "^2.7.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "optionalDependencies": {
        "saslprep": "^1.0.3"
      },
      "peerDependencies": {
        "@aws-sdk/credential-providers": "^3.201.0",
        "@mongodb-js/zstd": "^1.1.0",
        "kerberos": "^2.0.1",
        "mongodb-client-encryption": ">=2.3.0 <3",
        "snappy": "^7.2.2"
      },
      "peerDependenciesMeta": {
        "@aws-sdk/credential-providers": {
          "optional": true
        },
        "@mongodb-js/zstd": {
          "optional": true
        },
        "kerberos": {
          "optional": true
        },
        "mongodb-client-encryption": {
          "optional": true
        },
        "snappy": {
          "optional": true
        }
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "dependencies": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/tr46": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
      "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/whatwg-url": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
      "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
      "dependencies": {
        "tr46": "^3.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongoose": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-7.4.1.tgz",
      "integrity": "sha512-o3E5KHHiHdaiwCJG3+9r70sncRKki71Ktf/TfXdW6myu+53rtZ56uLl5ylkQiCf60V3COJuOeekcxXVsjQ7cBA==",
      "dependencies": {
        "bson": "^5.4.0",
        "kareem": "2.5.1",
        "mongodb": "5.7.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mongoose"
      }
    },
    "node_modules/mongoose/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "dependencies": {
        "debug": "4.x"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/mquery/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/mquery/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/msgpackr": {
      "version": "1.9.6",
      "resolved": "https://registry.npmjs.org/msgpackr/-/msgpackr-1.9.6.tgz",
      "integrity": "sha512-50rmb6+ZWvEm0vJn8R8CwI1Eavss3h5rgtKrcdUal3EkZcpqw82+xsmc7RoHb8fYB5V4EOU2NDaOitDAdO0t+w==",
      "optionalDependencies": {
        "msgpackr-extract": "^3.0.2"
      }
    },
    "node_modules/msgpackr-extract": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/msgpackr-extract/-/msgpackr-extract-3.0.2.tgz",
      "integrity": "sha512-SdzXp4kD/Qf8agZ9+iTu6eql0m3kWm1A2y1hkpTeVNENutaB0BwHlSvAIaMxwntmRUAUjon2V4L8Z/njd0Ct8A==",
      "hasInstallScript": true,
      "optional": true,
      "dependencies": {
        "node-gyp-build-optional-packages": "5.0.7"
      },
      "bin": {
        "download-msgpackr-prebuilds": "bin/download-prebuilds.js"
      },
      "optionalDependencies": {
        "@msgpackr-extract/msgpackr-extract-darwin-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-darwin-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-win32-x64": "3.0.2"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "peer": true
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA=="
    },
    "node_modules/node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-C/fGU2E8ToujUivIO0H+tpQ6HWo4eEmchoPIoXtxCrVghxdKq+QOHqEZW7tuP3KlV3bC8FRMO5nMCC7Zm1VP6g==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-gyp-build-optional-packages": {
      "version": "5.0.7",
      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.0.7.tgz",
      "integrity": "sha512-YlCCc6Wffkx0kHkmam79GKvDQ6x+QZkMjFGrIMxgFNILFvGSbCp2fCBC55pGTT9gVaz8Na5CLmxt/urtzRv36w==",
      "optional": true,
      "bin": {
        "node-gyp-build-optional-packages": "bin.js",
        "node-gyp-build-optional-packages-optional": "optional.js",
        "node-gyp-build-optional-packages-test": "build-test.js"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "peer": true
    },
    "node_modules/node-releases": {
      "version": "2.0.13",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.13.tgz",
      "integrity": "sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==",
      "peer": true
    },
    "node_modules/nodemon": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz",
      "integrity": "sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==",
      "dev": true,
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/nodemon/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/nodemon/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/nodemon/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "peer": true,
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "peer": true,
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/openai": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-3.3.0.tgz",
      "integrity": "sha512-uqxI/Au+aPRnsaQRe8CojU0eCR7I0mBiKjD3sNMzY6DaC1ZVrc85u98mtJW6voDug8fgGN+DIZmTDxTthxb7dQ==",
      "dependencies": {
        "axios": "^0.26.0",
        "form-data": "^4.0.0"
      }
    },
    "node_modules/openai/node_modules/axios": {
      "version": "0.26.1",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.26.1.tgz",
      "integrity": "sha512-fPwcX4EvnSHuInCMItEhAGnaSEXRBjtzh9fOtsE6E1G6p7vl7edEeZe11QHf18+6+9gR5PbKV/sGKNaD8YaMeA==",
      "dependencies": {
        "follow-redirects": "^1.14.8"
      }
    },
    "node_modules/openai/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "peer": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "peer": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-locate/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "peer": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-queue": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/p-queue/-/p-queue-6.6.2.tgz",
      "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
      "dependencies": {
        "eventemitter3": "^4.0.4",
        "p-timeout": "^3.2.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "dependencies": {
        "p-finally": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/passport": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
      "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
      "dependencies": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1",
        "utils-merge": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/jaredhanson"
      }
    },
    "node_modules/passport-jwt": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.1.tgz",
      "integrity": "sha512-UCKMDYhNuGOBE9/9Ycuoyh7vP6jpeTp/+sfMJl7nLff/t6dps+iaeE0hhNkKN8/HZHcJ7lCdOyDxHdDoxoSvdQ==",
      "dependencies": {
        "jsonwebtoken": "^9.0.0",
        "passport-strategy": "^1.0.0"
      }
    },
    "node_modules/passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha512-9wCE6qKznvf9mQYYbgJ3sVOHmCWoUNMVFoZzNoznmISbhnNNPhN9xfY3sLmScHMetEJeoY7CXwfhCe7argfQow==",
      "dependencies": {
        "passport-strategy": "1.x.x"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha512-CB97UUvDKJde2V0KDWWB3lyf6PC3FaZP7YxZ2G8OAtn9p4HI9j9JLP9qjOGZFvyl8uwNT8qM+hGnz/n16NI7oA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "peer": true
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "node_modules/pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha512-KG8UEiEVkR3wGEb4m5yZkVCzigAD+cVEJck2CzYZO37ZGJfctvVptVO192MwrtPhzONn6go8ylnOdMhKqi4nfg=="
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "peer": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "peer": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "peer": true,
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pretty-format": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.6.2.tgz",
      "integrity": "sha512-1q0oC8eRveTg5nnBEWMXAU2qpv65Gnuf2eCQzSjxpWFkPaPARwqZZDGuNE0zPAZfTCHzIk3A8dIjwlQKKLphyg==",
      "dependencies": {
        "@jest/schemas": "^29.6.0",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "peer": true,
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "node_modules/punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pure-rand": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.0.2.tgz",
      "integrity": "sha512-6Yg0ekpKICSjPswYOuC5sku/TSWaRYlA0qsXqJgM/d/4pLPHPuTxK7Nbf7jFKzAeedUhR8C7K9Uv63FBsSo8xQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/dubzzz"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fast-check"
        }
      ],
      "peer": true
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react-is": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/redis": {
      "version": "4.6.7",
      "resolved": "https://registry.npmjs.org/redis/-/redis-4.6.7.tgz",
      "integrity": "sha512-KrkuNJNpCwRm5vFJh0tteMxW8SaUzkm5fBH7eL5hd/D0fAkzvapxbfGPP/r+4JAXdQuX7nebsBkBqA2RHB7Usw==",
      "dependencies": {
        "@redis/bloom": "1.2.0",
        "@redis/client": "1.5.8",
        "@redis/graph": "1.1.0",
        "@redis/json": "1.0.4",
        "@redis/search": "1.1.3",
        "@redis/time-series": "1.0.4"
      }
    },
    "node_modules/redis-errors": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/redis-parser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
      "dependencies": {
        "redis-errors": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.2",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.2.tgz",
      "integrity": "sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==",
      "peer": true,
      "dependencies": {
        "is-core-module": "^2.11.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "peer": true,
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve.exports": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
      "integrity": "sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "peer": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "node_modules/simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "dependencies": {
        "semver": "~7.0.0"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/simple-update-notifier/node_modules/semver": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
      "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "peer": true
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/snowyflake": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/snowyflake/-/snowyflake-2.0.0.tgz",
      "integrity": "sha512-BxeqV0KJxJASu6EBJGUkX194Zhh37AEa0ow/JRK39icWbLTG9Wl/7LAL6a/ZMSjNm4O9pZk6QoLcWP7f/YKmtA==",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "dependencies": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.13.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "peer": true,
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "peer": true
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/standard-as-callback": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A=="
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "peer": true,
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "peer": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/superagent": {
      "version": "8.0.9",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.0.9.tgz",
      "integrity": "sha512-4C7Bh5pyHTvU33KpZgwrNKh/VQnvgtCSqPRfJAUdmrtSYePVzVg4E4OzsrbkhJj9O7SO6Bnv75K/F8XVZT8YHA==",
      "dev": true,
      "dependencies": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^2.1.2",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=6.4.0 <13 || >=14"
      }
    },
    "node_modules/superagent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dev": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/superagent/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dev": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/superagent/node_modules/mime": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
      "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
      "dev": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/superagent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "dev": true
    },
    "node_modules/supertest": {
      "version": "6.3.3",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-6.3.3.tgz",
      "integrity": "sha512-EMCG6G8gDu5qEqRQ3JjjPs6+FYT1a7Hv5ApHvtSghmOFJYtsU5S+pSb6Y2EUeCEY3CmEL3mmQ8YWlPOzQomabA==",
      "dev": true,
      "dependencies": {
        "methods": "^1.1.2",
        "superagent": "^8.0.5"
      },
      "engines": {
        "node": ">=6.4.0"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "peer": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tar": {
      "version": "6.1.15",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.15.tgz",
      "integrity": "sha512-/zKt9UyngnxIT/EAGYuxaMYgOIJiP81ab9ZfkILq4oNLPFX50qyYmu7jRj9qeXoxmJHjGlbH0+cm2uy1WCs10A==",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "peer": true,
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ=="
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "peer": true
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "dependencies": {
        "nopt": "~1.0.10"
      },
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/touch/node_modules/nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
      "dev": true,
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/ts-essentials": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/ts-essentials/-/ts-essentials-7.0.3.tgz",
      "integrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ==",
      "peerDependencies": {
        "typescript": ">=3.7.0"
      }
    },
    "node_modules/ts-jest": {
      "version": "29.1.1",
      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.1.1.tgz",
      "integrity": "sha512-D6xjnnbP17cC85nliwGiL+tpoKN0StpgE0TeOjXQTU6MVCfsB4v7aW05CgQ/1OywGb0x/oy9hHFnN+sczTiRaA==",
      "dev": true,
      "dependencies": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^29.0.0",
        "json5": "^2.2.3",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "^7.5.3",
        "yargs-parser": "^21.0.1"
      },
      "bin": {
        "ts-jest": "cli.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": ">=7.0.0-beta.0 <8",
        "@jest/types": "^29.0.0",
        "babel-jest": "^29.0.0",
        "jest": "^29.0.0",
        "typescript": ">=4.3 <6"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "@jest/types": {
          "optional": true
        },
        "babel-jest": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        }
      }
    },
    "node_modules/ts-node": {
      "version": "10.9.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
      "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/tslib": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.1.tgz",
      "integrity": "sha512-t0hLfiEKfMUoqhG+U1oid7Pva4bbDPHYfJNiB7BiIjRkj1pyC++4N3huJfqY6aRH6VTB0rvtzQwjM4K6qpfOig=="
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typescript": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.1.6.tgz",
      "integrity": "sha512-zaWCozRZ6DLEWAWFrVDz1H6FVXzUSfTy5FUMWsQlU8Ym5JP9eO4xkTIROFCQvhQf61z6O/G6ugw3SgAnvvm+HA==",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz",
      "integrity": "sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true,
      "dependencies": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg=="
    },
    "node_modules/v8-to-istanbul": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.1.0.tgz",
      "integrity": "sha512-6z3GW9x8G1gd+JIIgQQQxXuiJtCXeAjp6RaPEPLv62mH3iPHPxV6W3robxtCzNErRo6ZwTmzWhsbNvjyEBKzKA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/v8-to-istanbul/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "peer": true
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "peer": true,
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/websocket-ts": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/websocket-ts/-/websocket-ts-1.1.1.tgz",
      "integrity": "sha512-rm+S60J74Ckw5iizzgID12ju+OfaHAa6dhXhULIOrXkl0e05RzxfY42/vMStpz5jWL3iz9mkyjPcFUY1IgI0fw=="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "peer": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "peer": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "peer": true,
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/ws": {
      "version": "8.13.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.13.0.tgz",
      "integrity": "sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "peer": true,
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  },
  "dependencies": {
    "@ampproject/remapping": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz",
      "integrity": "sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==",
      "peer": true,
      "requires": {
        "@jridgewell/gen-mapping": "^0.3.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@babel/code-frame": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.22.5.tgz",
      "integrity": "sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==",
      "requires": {
        "@babel/highlight": "^7.22.5"
      }
    },
    "@babel/compat-data": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.22.9.tgz",
      "integrity": "sha512-5UamI7xkUcJ3i9qVDS+KFDEK8/7oJ55/sJMB1Ge7IEapr7KfdfV/HErR+koZwOfd+SgtFKOKRhRakdg++DcJpQ==",
      "peer": true
    },
    "@babel/core": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.22.9.tgz",
      "integrity": "sha512-G2EgeufBcYw27U4hhoIwFcgc1XU7TlXJ3mv04oOv1WCuo900U/anZSPzEqNjwdjgffkk2Gs0AN0dW1CKVLcG7w==",
      "peer": true,
      "requires": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.9",
        "@babel/helper-compilation-targets": "^7.22.9",
        "@babel/helper-module-transforms": "^7.22.9",
        "@babel/helpers": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.8",
        "@babel/types": "^7.22.5",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.2",
        "semver": "^6.3.1"
      },
      "dependencies": {
        "convert-source-map": {
          "version": "1.9.0",
          "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
          "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
          "peer": true
        },
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        },
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        }
      }
    },
    "@babel/generator": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.22.9.tgz",
      "integrity": "sha512-KtLMbmicyuK2Ak/FTCJVbDnkN1SlT8/kceFTiuDiiRUUSMnHMidxSCdG4ndkTOHHpoomWe/4xkvHkEOncwjYIw==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5",
        "@jridgewell/gen-mapping": "^0.3.2",
        "@jridgewell/trace-mapping": "^0.3.17",
        "jsesc": "^2.5.1"
      }
    },
    "@babel/helper-compilation-targets": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.9.tgz",
      "integrity": "sha512-7qYrNM6HjpnPHJbopxmb8hSPoZ0gsX8IvUS32JGVoy+pU9e5N0nLr1VjJoR6kA4d9dmGLxNYOjeB8sUDal2WMw==",
      "peer": true,
      "requires": {
        "@babel/compat-data": "^7.22.9",
        "@babel/helper-validator-option": "^7.22.5",
        "browserslist": "^4.21.9",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "dependencies": {
        "lru-cache": {
          "version": "5.1.1",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
          "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
          "peer": true,
          "requires": {
            "yallist": "^3.0.2"
          }
        },
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        },
        "yallist": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
          "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
          "peer": true
        }
      }
    },
    "@babel/helper-environment-visitor": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz",
      "integrity": "sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==",
      "peer": true
    },
    "@babel/helper-function-name": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz",
      "integrity": "sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.22.5",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-hoist-variables": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz",
      "integrity": "sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-module-imports": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz",
      "integrity": "sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-module-transforms": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.22.9.tgz",
      "integrity": "sha512-t+WA2Xn5K+rTeGtC8jCsdAH52bjggG5TKRuRrAGNM/mjIbO4GxvlLMFOEz9wXY5I2XQ60PMFsAG2WIcG82dQMQ==",
      "peer": true,
      "requires": {
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-module-imports": "^7.22.5",
        "@babel/helper-simple-access": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/helper-validator-identifier": "^7.22.5"
      }
    },
    "@babel/helper-plugin-utils": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz",
      "integrity": "sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==",
      "peer": true
    },
    "@babel/helper-simple-access": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz",
      "integrity": "sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-split-export-declaration": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz",
      "integrity": "sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-string-parser": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz",
      "integrity": "sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==",
      "peer": true
    },
    "@babel/helper-validator-identifier": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz",
      "integrity": "sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ=="
    },
    "@babel/helper-validator-option": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz",
      "integrity": "sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==",
      "peer": true
    },
    "@babel/helpers": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.22.6.tgz",
      "integrity": "sha512-YjDs6y/fVOYFV8hAf1rxd1QvR9wJe1pDBZ2AREKq/SDayfPzgk0PBnVuTCE5X1acEpMMNOVUqoe+OwiZGJ+OaA==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.6",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/highlight": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.22.5.tgz",
      "integrity": "sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==",
      "requires": {
        "@babel/helper-validator-identifier": "^7.22.5",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "3.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
          "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
          "requires": {
            "color-convert": "^1.9.0"
          }
        },
        "chalk": {
          "version": "2.4.2",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
          "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
          "requires": {
            "ansi-styles": "^3.2.1",
            "escape-string-regexp": "^1.0.5",
            "supports-color": "^5.3.0"
          }
        },
        "color-convert": {
          "version": "1.9.3",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
          "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
          "requires": {
            "color-name": "1.1.3"
          }
        },
        "color-name": {
          "version": "1.1.3",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
          "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
        },
        "escape-string-regexp": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
          "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg=="
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw=="
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "@babel/parser": {
      "version": "7.22.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.22.7.tgz",
      "integrity": "sha512-7NF8pOkHP5o2vpmGgNGcfAeCvOYhGLyA3Z4eBQkT1RJlWu47n63bCs93QfJ2hIAFCil7L5P2IWhs1oToVgrL0Q==",
      "peer": true
    },
    "@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.12.13"
      }
    },
    "@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-jsx": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.22.5.tgz",
      "integrity": "sha512-gvyP4hZrgrs/wWMaocvxZ44Hw0b3W8Pe+cMxc8V1ULQ07oh8VNbIRaoD1LRZVTvD+0nieDKjfgKg89sD7rrKrg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.22.5"
      }
    },
    "@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.14.5"
      }
    },
    "@babel/plugin-syntax-typescript": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.22.5.tgz",
      "integrity": "sha512-1mS2o03i7t1c6VzH6fdQ3OA8tcEIxwG18zIPRp+UY1Ihv6W+XZzBCVxExF9upussPXJ0xE9XRHwMoNs1ep/nRQ==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.22.5"
      }
    },
    "@babel/template": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.5.tgz",
      "integrity": "sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.22.5",
        "@babel/parser": "^7.22.5",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/traverse": {
      "version": "7.22.8",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.22.8.tgz",
      "integrity": "sha512-y6LPR+wpM2I3qJrsheCTwhIinzkETbplIgPBbwvqPKc+uljeA5gP+3nP8irdYt1mjQaDnlIcG+dw8OjAco4GXw==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.7",
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-function-name": "^7.22.5",
        "@babel/helper-hoist-variables": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/types": "^7.22.5",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        }
      }
    },
    "@babel/types": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.22.5.tgz",
      "integrity": "sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==",
      "peer": true,
      "requires": {
        "@babel/helper-string-parser": "^7.22.5",
        "@babel/helper-validator-identifier": "^7.22.5",
        "to-fast-properties": "^2.0.0"
      }
    },
    "@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "peer": true
    },
    "@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "requires": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "dependencies": {
        "@jridgewell/trace-mapping": {
          "version": "0.3.9",
          "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
          "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
          "requires": {
            "@jridgewell/resolve-uri": "^3.0.3",
            "@jridgewell/sourcemap-codec": "^1.4.10"
          }
        }
      }
    },
    "@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@huggingface/inference": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@huggingface/inference/-/inference-2.6.1.tgz",
      "integrity": "sha512-qFYchgOCPeEkZJKiSr7Kz62QwukJtgkeQCT7Q0SSKUcvHpTQVNJp6i/JrJMR4dBdzQysJ1SZDC0pLBBnnskTag=="
    },
    "@ioredis/commands": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.2.0.tgz",
      "integrity": "sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg=="
    },
    "@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "peer": true,
      "requires": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      }
    },
    "@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "peer": true
    },
    "@jest/console": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.6.2.tgz",
      "integrity": "sha512-0N0yZof5hi44HAR2pPS+ikJ3nzKNoZdVu8FffRf3wy47I7Dm7etk/3KetMdRUqzVd16V4O2m2ISpNTbnIuqy1w==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0"
      }
    },
    "@jest/core": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.6.2.tgz",
      "integrity": "sha512-Oj+5B+sDMiMWLhPFF+4/DvHOf+U10rgvCLGPHP8Xlsy/7QxS51aU/eBngudHlJXnaWD5EohAgJ4js+T6pa+zOg==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/reporters": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.5.0",
        "jest-config": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-resolve-dependencies": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "@jest/environment": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.6.2.tgz",
      "integrity": "sha512-AEcW43C7huGd/vogTddNNTDRpO6vQ2zaQNrttvWV18ArBx9Z56h7BIsXkNFJVOO4/kblWEQz30ckw0+L3izc+Q==",
      "peer": true,
      "requires": {
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2"
      }
    },
    "@jest/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-m6DrEJxVKjkELTVAztTLyS/7C92Y2b0VYqmDROYKLLALHn8T/04yPs70NADUYPrV3ruI+H3J0iUIuhkjp7vkfg==",
      "peer": true,
      "requires": {
        "expect": "^29.6.2",
        "jest-snapshot": "^29.6.2"
      }
    },
    "@jest/expect-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.6.2.tgz",
      "integrity": "sha512-6zIhM8go3RV2IG4aIZaZbxwpOzz3ZiM23oxAlkquOIole+G6TrbeXnykxWYlqF7kz2HlBjdKtca20x9atkEQYg==",
      "requires": {
        "jest-get-type": "^29.4.3"
      }
    },
    "@jest/fake-timers": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.6.2.tgz",
      "integrity": "sha512-euZDmIlWjm1Z0lJ1D0f7a0/y5Kh/koLFMUBE5SUYWrmy8oNhJpbTBDAP6CxKnadcMLDoDf4waRYCe35cH6G6PA==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "@jest/globals": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.6.2.tgz",
      "integrity": "sha512-cjuJmNDjs6aMijCmSa1g2TNG4Lby/AeU7/02VtpW+SLcZXzOLK2GpN2nLqcFjmhy3B3AoPeQVx7BnyOf681bAw==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/types": "^29.6.1",
        "jest-mock": "^29.6.2"
      }
    },
    "@jest/reporters": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.6.2.tgz",
      "integrity": "sha512-sWtijrvIav8LgfJZlrGCdN0nP2EWbakglJY49J1Y5QihcQLfy7ovyxxjJBRXMNltgt4uPtEcFmIMbVshEDfFWw==",
      "peer": true,
      "requires": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      }
    },
    "@jest/schemas": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.0.tgz",
      "integrity": "sha512-rxLjXyJBTL4LQeJW3aKo0M/+GkCOXsO+8i9Iu7eDb6KwtP65ayoDsitrdPBtujxQ88k4wI2FNYfa6TOGwSn6cQ==",
      "requires": {
        "@sinclair/typebox": "^0.27.8"
      }
    },
    "@jest/source-map": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.0.tgz",
      "integrity": "sha512-oA+I2SHHQGxDCZpbrsCQSoMLb3Bz547JnM+jUr9qEbuw0vQlWZfpPS7CO9J7XiwKicEz9OFn/IYoLkkiUD7bzA==",
      "peer": true,
      "requires": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      }
    },
    "@jest/test-result": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.6.2.tgz",
      "integrity": "sha512-3VKFXzcV42EYhMCsJQURptSqnyjqCGbtLuX5Xxb6Pm6gUf1wIRIl+mandIRGJyWKgNKYF9cnstti6Ls5ekduqw==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      }
    },
    "@jest/test-sequencer": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.6.2.tgz",
      "integrity": "sha512-GVYi6PfPwVejO7slw6IDO0qKVum5jtrJ3KoLGbgBWyr2qr4GaxFV6su+ZAjdTX75Sr1DkMFRk09r2ZVa+wtCGw==",
      "peer": true,
      "requires": {
        "@jest/test-result": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "slash": "^3.0.0"
      }
    },
    "@jest/transform": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.6.2.tgz",
      "integrity": "sha512-ZqCqEISr58Ce3U+buNFJYUktLJZOggfyvR+bZMaiV1e8B1SIvJbwZMrYz3gx/KAPn9EXmOmN+uB08yLCjWkQQg==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      }
    },
    "@jest/types": {
      "version": "29.6.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.1.tgz",
      "integrity": "sha512-tPKQNMPuXgvdOn2/Lg9HNfUvjYVGolt04Hp03f5hAk878uwOLikN+JzeLY0HcVgKgFl9Hs3EIqpu3WX27XNhnw==",
      "requires": {
        "@jest/schemas": "^29.6.0",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      }
    },
    "@jridgewell/gen-mapping": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
      "peer": true,
      "requires": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w=="
    },
    "@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "peer": true
    },
    "@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "@jridgewell/trace-mapping": {
      "version": "0.3.18",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz",
      "integrity": "sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==",
      "peer": true,
      "requires": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      },
      "dependencies": {
        "@jridgewell/sourcemap-codec": {
          "version": "1.4.14",
          "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
          "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
          "peer": true
        }
      }
    },
    "@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "requires": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      }
    },
    "@msgpackr-extract/msgpackr-extract-darwin-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.2.tgz",
      "integrity": "sha512-9bfjwDxIDWmmOKusUcqdS4Rw+SETlp9Dy39Xui9BEGEk19dDwH0jhipwFzEff/pFg95NKymc6TOTbRKcWeRqyQ==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-darwin-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.2.tgz",
      "integrity": "sha512-lwriRAHm1Yg4iDf23Oxm9n/t5Zpw1lVnxYU3HnJPTi2lJRkKTrps1KVgvL6m7WvmhYVt/FIsssWay+k45QHeuw==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-arm": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.2.tgz",
      "integrity": "sha512-MOI9Dlfrpi2Cuc7i5dXdxPbFIgbDBGgKR5F2yWEa6FVEtSWncfVNKW5AKjImAQ6CZlBK9tympdsZJ2xThBiWWA==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.2.tgz",
      "integrity": "sha512-FU20Bo66/f7He9Fp9sP2zaJ1Q8L9uLPZQDub/WlUip78JlPeMbVL8546HbZfcW9LNciEXc8d+tThSJjSC+tmsg==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.2.tgz",
      "integrity": "sha512-gsWNDCklNy7Ajk0vBBf9jEx04RUxuDQfBse918Ww+Qb9HCPoGzS+XJTLe96iN3BVK7grnLiYghP/M4L8VsaHeA==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-win32-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.2.tgz",
      "integrity": "sha512-O+6Gs8UeDbyFpbSh2CPEz/UOrrdWPTBYNblZK5CxxLisYt4kGX3Sc+czffFonyjiGSq3jWLwJS/CCJc7tBr4sQ==",
      "optional": true
    },
    "@redis/bloom": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
      "requires": {}
    },
    "@redis/client": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.5.8.tgz",
      "integrity": "sha512-xzElwHIO6rBAqzPeVnCzgvrnBEcFL1P0w8P65VNLRkdVW8rOE58f52hdj0BDgmsdOm4f1EoXPZtH4Fh7M/qUpw==",
      "requires": {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        "yallist": "4.0.0"
      }
    },
    "@redis/graph": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.0.tgz",
      "integrity": "sha512-16yZWngxyXPd+MJxeSr0dqh2AIOi8j9yXKcKCwVaKDbH3HTuETpDVPcLujhFYVPtYrngSco31BUcSa9TH31Gqg==",
      "requires": {}
    },
    "@redis/json": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.4.tgz",
      "integrity": "sha512-LUZE2Gdrhg0Rx7AN+cZkb1e6HjoSKaeeW8rYnt89Tly13GBI5eP4CwDVr+MY8BAYfCg4/N15OUrtLoona9uSgw==",
      "requires": {}
    },
    "@redis/search": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.1.3.tgz",
      "integrity": "sha512-4Dg1JjvCevdiCBTZqjhKkGoC5/BcB7k9j99kdMnaXFXg8x4eyOIVg9487CMv7/BUVkFLZCaIh8ead9mU15DNng==",
      "requires": {}
    },
    "@redis/time-series": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.0.4.tgz",
      "integrity": "sha512-ThUIgo2U/g7cCuZavucQTQzA9g9JbDDY2f64u3AbAoz/8vE2lt2U37LamDUVChhaDA3IRT9R6VvJwqnUfTJzng==",
      "requires": {}
    },
    "@sideway/address": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.4.tgz",
      "integrity": "sha512-7vwq+rOHVWjyXxVlR76Agnvhy8I9rpzjosTESvmhNeXOXdZZB15Fl+TI9x1SiHZH5Jv2wTGduSxFDIaq0m3DUw==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA=="
    },
    "@sinonjs/commons": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.0.tgz",
      "integrity": "sha512-jXBtWAF4vmdNmZgD5FoKsVLv3rPgDnLgPbU84LIJ3otV44vJlDRokVng5v8NFJdCf/da9legHcKaRuZs4L7faA==",
      "peer": true,
      "requires": {
        "type-detect": "4.0.8"
      }
    },
    "@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "peer": true,
      "requires": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "@tsconfig/node10": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA=="
    },
    "@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag=="
    },
    "@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow=="
    },
    "@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA=="
    },
    "@types/babel__core": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.1.tgz",
      "integrity": "sha512-aACu/U/omhdk15O4Nfb+fHgH/z3QsfQzpnvRZhYhThms83ZnAOZz7zZAWO7mn2yyNQaA4xTO8GLK3uqFU4bYYw==",
      "peer": true,
      "requires": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "@types/babel__generator": {
      "version": "7.6.4",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.4.tgz",
      "integrity": "sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__template": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.1.tgz",
      "integrity": "sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==",
      "peer": true,
      "requires": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__traverse": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.1.tgz",
      "integrity": "sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.20.7"
      }
    },
    "@types/bcrypt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.0.tgz",
      "integrity": "sha512-agtcFKaruL8TmcvqbndlqHPSJgsolhf/qPWchFlgnW1gECTN/nKbFcoFnvKAQRFfKbh+BO6A3SWdJu9t+xF3Lw==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/bcryptjs": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@types/bcryptjs/-/bcryptjs-2.4.2.tgz",
      "integrity": "sha512-LiMQ6EOPob/4yUL66SZzu6Yh77cbzJFYll+ZfaPiPPFswtIlA/Fs1MzdKYA7JApHU49zQTbJGX3PDmCpIdDBRQ==",
      "dev": true
    },
    "@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dev": true,
      "requires": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/cookiejar": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.2.tgz",
      "integrity": "sha512-t73xJJrvdTjXrn4jLS9VSGRbz0nUY3cl2DMGDU48lKl+HR9dbbjW2A9r3g40VA++mQpy6uuHg33gy7du2BKpog=="
    },
    "@types/cors": {
      "version": "2.8.13",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.13.tgz",
      "integrity": "sha512-RG8AStHlUiV5ysZQKq97copd2UmVYw3/pRMLefISZ3S1hK104Cwm7iLQ3fTKx+lsUH2CE8FlLaYeEA2LSeqYUA==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/express": {
      "version": "4.17.17",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.17.tgz",
      "integrity": "sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==",
      "dev": true,
      "requires": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "@types/express-serve-static-core": {
      "version": "4.17.35",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz",
      "integrity": "sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "@types/express-session": {
      "version": "1.17.7",
      "resolved": "https://registry.npmjs.org/@types/express-session/-/express-session-1.17.7.tgz",
      "integrity": "sha512-L25080PBYoRLu472HY/HNCxaXY8AaGgqGC8/p/8+BYMhG0RDOLQ1wpXOpAzr4Gi5TGozTKyJv5BVODM5UNyVMw==",
      "dev": true,
      "requires": {
        "@types/express": "*"
      }
    },
    "@types/graceful-fs": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.6.tgz",
      "integrity": "sha512-Sig0SNORX9fdW+bQuTEovKj3uHcUL6LQKbCrrqb1X7J6/ReAbhCXRAhc+SMejhLELFj2QcyuxmUooZ4bt5ReSw==",
      "peer": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/http-errors": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.1.tgz",
      "integrity": "sha512-/K3ds8TRAfBvi5vfjuz8y6+GiAYBZ0x4tXv1Av6CWBWn0IlADc+ZX9pMq7oU0fNQPnBwIZl3rmeLp6SBApbxSQ==",
      "dev": true
    },
    "@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz",
      "integrity": "sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g=="
    },
    "@types/istanbul-lib-report": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
      "integrity": "sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==",
      "requires": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "@types/istanbul-reports": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz",
      "integrity": "sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==",
      "requires": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "@types/jest": {
      "version": "29.5.3",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-29.5.3.tgz",
      "integrity": "sha512-1Nq7YrO/vJE/FYnqYyw0FS8LdrjExSgIiHyKg7xPpn+yi8Q4huZryKnkJatN1ZRH89Kw2v33/8ZMB7DuZeSLlA==",
      "dev": true,
      "requires": {
        "expect": "^29.0.0",
        "pretty-format": "^29.0.0"
      }
    },
    "@types/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-drE6uz7QBKq1fYqqoFKTDRdFCPHd5TCub75BM+D+cMx7NU9hUz7SESLfC2fSCXVFMO5Yj8sOWHuGqPgjc+fz0Q==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==",
      "dev": true
    },
    "@types/mocha": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/@types/mocha/-/mocha-10.0.1.tgz",
      "integrity": "sha512-/fvYntiO1GeICvqbQ3doGDIP97vWmvFt83GKguJ6prmQM2iXZfFcq6YE8KteFyRtX2/h5Hf91BYvPodJKFYv5Q==",
      "dev": true
    },
    "@types/mongoose": {
      "version": "5.11.97",
      "resolved": "https://registry.npmjs.org/@types/mongoose/-/mongoose-5.11.97.tgz",
      "integrity": "sha512-cqwOVYT3qXyLiGw7ueU2kX9noE8DPGRY6z8eUxudhXY8NZ7DMKYAxyZkLSevGfhCX3dO/AoX5/SO9lAzfjon0Q==",
      "dev": true,
      "requires": {
        "mongoose": "*"
      }
    },
    "@types/node": {
      "version": "20.4.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.4.6.tgz",
      "integrity": "sha512-q0RkvNgMweWWIvSMDiXhflGUKMdIxBo2M2tYM/0kEGDueQByFzK4KZAgu5YHGFNxziTlppNpTIBcqHQAxlfHdA=="
    },
    "@types/node-fetch": {
      "version": "2.6.4",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.4.tgz",
      "integrity": "sha512-1ZX9fcN4Rvkvgv4E6PAY5WXUFWFcRWxZa3EW83UjycOB9ljJCedb2CupIP4RZMEwF/M3eTcCihbBRgwtGbg5Rg==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "@types/passport": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/@types/passport/-/passport-1.0.12.tgz",
      "integrity": "sha512-QFdJ2TiAEoXfEQSNDISJR1Tm51I78CymqcBa8imbjo6dNNu+l2huDxxbDEIoFIwOSKMkOfHEikyDuZ38WwWsmw==",
      "dev": true,
      "requires": {
        "@types/express": "*"
      }
    },
    "@types/passport-jwt": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/@types/passport-jwt/-/passport-jwt-3.0.9.tgz",
      "integrity": "sha512-5XJt+79emfgpuBvBQusUPylFIVtW1QVAAkTRwCbRJAmxUjmLtIqUU6V1ovpnHPu6Qut3mR5Juc+s7kd06roNTg==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/jsonwebtoken": "*",
        "@types/passport-strategy": "*"
      }
    },
    "@types/passport-local": {
      "version": "1.0.35",
      "resolved": "https://registry.npmjs.org/@types/passport-local/-/passport-local-1.0.35.tgz",
      "integrity": "sha512-K4eLTJ8R0yYW8TvCqkjB0pTKoqfUSdl5PfZdidTjV2ETV3604fQxtY6BHKjQWAx50WUS0lqzBvKv3LoI1ZBPeA==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/passport": "*",
        "@types/passport-strategy": "*"
      }
    },
    "@types/passport-strategy": {
      "version": "0.2.35",
      "resolved": "https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.35.tgz",
      "integrity": "sha512-o5D19Jy2XPFoX2rKApykY15et3Apgax00RRLf0RUotPDUsYrQa7x4howLYr9El2mlUApHmCMv5CZ1IXqKFQ2+g==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/passport": "*"
      }
    },
    "@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==",
      "dev": true
    },
    "@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==",
      "dev": true
    },
    "@types/send": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.1.tgz",
      "integrity": "sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==",
      "dev": true,
      "requires": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "@types/serve-static": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.2.tgz",
      "integrity": "sha512-J2LqtvFYCzaj8pVYKw8klQXrLLk7TBZmQ4ShlcdkELFKGwGMfevMLneMMRkMgZxotOD9wg497LpC7O8PcvAmfw==",
      "dev": true,
      "requires": {
        "@types/http-errors": "*",
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "@types/stack-utils": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.1.tgz",
      "integrity": "sha512-Hl219/BT5fLAaz6NDkSuhzasy49dwQS/DSdu4MdggFB8zcXv7vflBI3xp7FEmkmdDkBUI2bPUNeMttp2knYdxw=="
    },
    "@types/superagent": {
      "version": "4.1.18",
      "resolved": "https://registry.npmjs.org/@types/superagent/-/superagent-4.1.18.tgz",
      "integrity": "sha512-LOWgpacIV8GHhrsQU+QMZuomfqXiqzz3ILLkCtKx3Us6AmomFViuzKT9D693QTKgyut2oCytMG8/efOop+DB+w==",
      "requires": {
        "@types/cookiejar": "*",
        "@types/node": "*"
      }
    },
    "@types/supertest": {
      "version": "2.0.12",
      "resolved": "https://registry.npmjs.org/@types/supertest/-/supertest-2.0.12.tgz",
      "integrity": "sha512-X3HPWTwXRerBZS7Mo1k6vMVR1Z6zmJcDVn5O/31whe0tnjE4te6ZJSJGq1RiqHPjzPdMTfjCFogDJmwng9xHaQ==",
      "requires": {
        "@types/superagent": "*"
      }
    },
    "@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "requires": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "@types/yargs": {
      "version": "17.0.24",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.24.tgz",
      "integrity": "sha512-6i0aC7jV6QzQB8ne1joVZ0eSFIstHsCrobmOtghM11yGlH0j43FKL2UhWdELkyps0zuf7qVTUVCCR+tgSlyLLw==",
      "requires": {
        "@types/yargs-parser": "*"
      }
    },
    "@types/yargs-parser": {
      "version": "21.0.0",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.0.tgz",
      "integrity": "sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA=="
    },
    "abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "requires": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      }
    },
    "acorn": {
      "version": "8.10.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.10.0.tgz",
      "integrity": "sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw=="
    },
    "acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA=="
    },
    "agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "requires": {
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "peer": true,
      "requires": {
        "type-fest": "^0.21.3"
      }
    },
    "ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
    },
    "ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "requires": {
        "color-convert": "^2.0.1"
      }
    },
    "anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
    },
    "are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "requires": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      }
    },
    "arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "peer": true,
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "axios": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.4.0.tgz",
      "integrity": "sha512-S4XCWMEmzvo64T9GfvQDOXgYRDJ/wsSZc7Jvdgx5u1sd0JwsuPLqb3SYmusag+edF6ziyMensPVqLTSc1PiSEA==",
      "requires": {
        "follow-redirects": "^1.15.0",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      },
      "dependencies": {
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "babel-jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.6.2.tgz",
      "integrity": "sha512-BYCzImLos6J3BH/+HvUCHG1dTf2MzmAB4jaVxHV+29RZLjR29XuYTmsf2sdDwkrb+FczkGo3kOhE7ga6sI0P4A==",
      "peer": true,
      "requires": {
        "@jest/transform": "^29.6.2",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.5.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      }
    },
    "babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      }
    },
    "babel-plugin-jest-hoist": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.5.0.tgz",
      "integrity": "sha512-zSuuuAlTMT4mzLj2nPnUm6fsE6270vdOfnpbJ+RmruU75UhLFvL0N2NgI7xpeS7NaB6hGqmd5pVpGTDYvi4Q3w==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      }
    },
    "babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz",
      "integrity": "sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==",
      "peer": true,
      "requires": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      }
    },
    "babel-preset-jest": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.5.0.tgz",
      "integrity": "sha512-JOMloxOqdiBSxMAzjRaH023/vvcaSaec49zvg+2LmNsktC7ei39LTJGw02J+9uUtTZUq6xbLyJ4dxe9sSmIuAg==",
      "peer": true,
      "requires": {
        "babel-plugin-jest-hoist": "^29.5.0",
        "babel-preset-current-node-syntax": "^1.0.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "bcrypt": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.0.tgz",
      "integrity": "sha512-RHBS7HI5N5tEnGTmtR/pppX0mmDSBpQ4aCBsj7CEQfYXDcO74A8sIBYcJMuCsis2E81zDxeENYhv66oZwLiA+Q==",
      "requires": {
        "@mapbox/node-pre-gyp": "^1.0.10",
        "node-addon-api": "^5.0.0"
      }
    },
    "bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true
    },
    "body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "requires": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "browserslist": {
      "version": "4.21.10",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.10.tgz",
      "integrity": "sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==",
      "peer": true,
      "requires": {
        "caniuse-lite": "^1.0.30001517",
        "electron-to-chromium": "^1.4.477",
        "node-releases": "^2.0.13",
        "update-browserslist-db": "^1.0.11"
      }
    },
    "bs-logger": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
      "dev": true,
      "requires": {
        "fast-json-stable-stringify": "2.x"
      }
    },
    "bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "peer": true,
      "requires": {
        "node-int64": "^0.4.0"
      }
    },
    "bson": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-5.4.0.tgz",
      "integrity": "sha512-WRZ5SQI5GfUuKnPTNmAYPiKIof3ORXAF4IRU5UcgmivNIon01rWQlw5RUH954dpu8yGL8T59YShVddIPaU/gFA=="
    },
    "buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "peer": true
    },
    "bull": {
      "version": "4.10.4",
      "resolved": "https://registry.npmjs.org/bull/-/bull-4.10.4.tgz",
      "integrity": "sha512-o9m/7HjS/Or3vqRd59evBlWCXd9Lp+ALppKseoSKHaykK46SmRjAilX98PgmOz1yeVaurt8D5UtvEt4bUjM3eA==",
      "requires": {
        "cron-parser": "^4.2.1",
        "debuglog": "^1.0.0",
        "get-port": "^5.1.1",
        "ioredis": "^5.0.0",
        "lodash": "^4.17.21",
        "msgpackr": "^1.5.2",
        "semver": "^7.3.2",
        "uuid": "^8.3.0"
      }
    },
    "bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
    },
    "call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "requires": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      }
    },
    "callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "peer": true
    },
    "camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "peer": true
    },
    "caniuse-lite": {
      "version": "1.0.30001519",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001519.tgz",
      "integrity": "sha512-0QHgqR+Jv4bxHMp8kZ1Kn8CH55OikjKJ6JmKkZYP1F3D7w+lnFXF70nG5eNfsZS89jadi5Ywy5UCSKLAglIRkg==",
      "peer": true
    },
    "chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "requires": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      }
    },
    "char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "peer": true
    },
    "chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      }
    },
    "chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ=="
    },
    "ci-info": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.8.0.tgz",
      "integrity": "sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw=="
    },
    "cjs-module-lexer": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
      "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==",
      "peer": true
    },
    "cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "peer": true,
      "requires": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      }
    },
    "cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA=="
    },
    "co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "peer": true
    },
    "collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "peer": true
    },
    "color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "requires": {
        "color-name": "~1.1.4"
      }
    },
    "color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg=="
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==",
      "dev": true
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ=="
    },
    "content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "requires": {
        "safe-buffer": "5.2.1"
      }
    },
    "content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA=="
    },
    "convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "peer": true
    },
    "cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw=="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true
    },
    "cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "requires": {
        "object-assign": "^4",
        "vary": "^1"
      }
    },
    "create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "cron-parser": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.8.1.tgz",
      "integrity": "sha512-jbokKWGcyU4gl6jAfX97E1gDpY12DJ1cLJZmoDzaAln/shZ+S3KBFBuA2Q6WeUN4gJf/8klnV1EfvhA2lK5IRQ==",
      "requires": {
        "luxon": "^3.2.1"
      }
    },
    "cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "peer": true,
      "requires": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      }
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "debuglog": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
      "integrity": "sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw=="
    },
    "dedent": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.1.tgz",
      "integrity": "sha512-+LxW+KLWxu3HW3M2w2ympwtqPrqYRzU8fqi6Fhd18fBALe15blJPI/I4+UHveMVG6lJqB4JNd4UG0S5cnVHwIg==",
      "peer": true,
      "requires": {}
    },
    "deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "peer": true
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="
    },
    "delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ=="
    },
    "denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg=="
    },
    "detect-libc": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw=="
    },
    "detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "peer": true
    },
    "dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "requires": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A=="
    },
    "diff-sequences": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.4.3.tgz",
      "integrity": "sha512-ofrBgwpPhCD85kMKtE9RYFFq6OC1A89oW2vvgWZNCwxrUpRUILopY7lsYyMDSjc8g6U6aiO0Qubg6r4Wgt5ZnA=="
    },
    "dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "dev": true
    },
    "ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "electron-to-chromium": {
      "version": "1.4.482",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.482.tgz",
      "integrity": "sha512-h+UqpfmEr1Qkk0zp7ej/jid7CXoq4m4QzW6wNTb0ELJ/BZCpA4wgUylBIMGCe621tnr4l5VmoHjdoSx2lbnNJA==",
      "peer": true
    },
    "emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "peer": true
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w=="
    },
    "error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "peer": true,
      "requires": {
        "is-arrayish": "^0.2.1"
      }
    },
    "escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "peer": true
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w=="
    },
    "esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "peer": true
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg=="
    },
    "eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
    },
    "execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "peer": true,
      "requires": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      }
    },
    "exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "peer": true
    },
    "expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-iAErsLxJ8C+S02QbLAwgSGSezLQK+XXRDt8IuFXFpwCNw2ECmzZSmjKcCaFVp5VRMk+WAvz6h6jokzEzBFZEuA==",
      "requires": {
        "@jest/expect-utils": "^29.6.2",
        "@types/node": "*",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "requires": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      }
    },
    "express-session": {
      "version": "1.17.3",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.3.tgz",
      "integrity": "sha512-4+otWXlShYlG1Ma+2Jnn+xgKUZTMJ5QD3YvfilX3AcocOAbIkVylSWEklzALe/+Pu4qV6TYBj5GwOBFfdKqLBw==",
      "requires": {
        "cookie": "0.4.2",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "dependencies": {
        "cookie": {
          "version": "0.4.2",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
          "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA=="
        }
      }
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true
    },
    "fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "peer": true,
      "requires": {
        "bser": "2.1.1"
      }
    },
    "fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      }
    },
    "find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "peer": true,
      "requires": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      }
    },
    "follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA=="
    },
    "form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "dev": true,
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      }
    },
    "formidable": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.1.2.tgz",
      "integrity": "sha512-CM3GuJ57US06mlpQ47YcunuUZ9jpm8Vx+P2CGt2j7HpgkKZO/DJYQ0Bobim8G6PFQmK5lOqOOdUXboU+h73A4g==",
      "dev": true,
      "requires": {
        "dezalgo": "^1.0.4",
        "hexoid": "^1.0.0",
        "once": "^1.4.0",
        "qs": "^6.11.0"
      }
    },
    "forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow=="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q=="
    },
    "fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "requires": {
        "minipass": "^3.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        }
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "optional": true
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "requires": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      }
    },
    "generic-pool": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g=="
    },
    "gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "peer": true
    },
    "get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "peer": true
    },
    "get-intrinsic": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
      "requires": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3"
      }
    },
    "get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "peer": true
    },
    "get-port": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/get-port/-/get-port-5.1.1.tgz",
      "integrity": "sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ=="
    },
    "get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "peer": true
    },
    "glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "peer": true
    },
    "graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="
    },
    "has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg=="
    },
    "has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A=="
    },
    "has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
    },
    "helmet": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.0.0.tgz",
      "integrity": "sha512-MsIgYmdBh460ZZ8cJC81q4XJknjG567wzEmv46WOBblDb6TUd3z8/GhgmsM9pn8g2B80tAJ4m5/d3Bi1KrSUBQ=="
    },
    "hexoid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
      "dev": true
    },
    "html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "peer": true
    },
    "http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "requires": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      }
    },
    "https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "requires": {
        "agent-base": "6",
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "peer": true
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "peer": true,
      "requires": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      }
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "peer": true
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ioredis": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.3.2.tgz",
      "integrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA==",
      "requires": {
        "@ioredis/commands": "^1.1.1",
        "cluster-key-slot": "^1.1.0",
        "debug": "^4.3.4",
        "denque": "^2.1.0",
        "lodash.defaults": "^4.2.0",
        "lodash.isarguments": "^3.1.0",
        "redis-errors": "^1.2.0",
        "redis-parser": "^3.0.0",
        "standard-as-callback": "^2.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
    },
    "is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "peer": true
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-core-module": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.12.1.tgz",
      "integrity": "sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==",
      "peer": true,
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
    },
    "is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "peer": true
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="
    },
    "is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "peer": true
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "peer": true
    },
    "isomorphic-ws": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-5.0.0.tgz",
      "integrity": "sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==",
      "requires": {}
    },
    "istanbul-lib-coverage": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz",
      "integrity": "sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==",
      "peer": true
    },
    "istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        }
      }
    },
    "istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "peer": true,
      "requires": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "dependencies": {
        "make-dir": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
          "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
          "peer": true,
          "requires": {
            "semver": "^7.5.3"
          }
        }
      }
    },
    "istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "peer": true,
      "requires": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        }
      }
    },
    "istanbul-reports": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
      "peer": true,
      "requires": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      }
    },
    "jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.6.2.tgz",
      "integrity": "sha512-8eQg2mqFbaP7CwfsTpCxQ+sHzw1WuNWL5UUvjnWP4hx2riGz9fPSzYOaU5q8/GqWn1TfgZIVTqYJygbGbWAANg==",
      "peer": true,
      "requires": {
        "@jest/core": "^29.6.2",
        "@jest/types": "^29.6.1",
        "import-local": "^3.0.2",
        "jest-cli": "^29.6.2"
      }
    },
    "jest-changed-files": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.5.0.tgz",
      "integrity": "sha512-IFG34IUMUaNBIxjQXF/iu7g6EcdMrGRRxaUSw92I/2g2YC6vCdTltl4nHvt7Ci5nSJwXIkCu8Ka1DKF+X7Z1Ag==",
      "peer": true,
      "requires": {
        "execa": "^5.0.0",
        "p-limit": "^3.1.0"
      }
    },
    "jest-circus": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.6.2.tgz",
      "integrity": "sha512-G9mN+KOYIUe2sB9kpJkO9Bk18J4dTDArNFPwoZ7WKHKel55eKIS/u2bLthxgojwlf9NLCVQfgzM/WsOVvoC6Fw==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.6.2",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.6.2",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      }
    },
    "jest-cli": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.6.2.tgz",
      "integrity": "sha512-TT6O247v6dCEX2UGHGyflMpxhnrL0DNqP2fRTKYm3nJJpCTfXX3GCMQPGFjXDoj0i5/Blp3jriKXFgdfmbYB6Q==",
      "peer": true,
      "requires": {
        "@jest/core": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "prompts": "^2.0.1",
        "yargs": "^17.3.1"
      }
    },
    "jest-config": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.6.2.tgz",
      "integrity": "sha512-VxwFOC8gkiJbuodG9CPtMRjBUNZEHxwfQXmIudSTzFWxaci3Qub1ddTRbFNQlD/zUeaifLndh/eDccFX4wCMQw==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-jest": "^29.6.2",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.6.2",
        "jest-environment-node": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      }
    },
    "jest-diff": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.6.2.tgz",
      "integrity": "sha512-t+ST7CB9GX5F2xKwhwCf0TAR17uNDiaPTZnVymP9lw0lssa9vG+AFyDZoeIHStU3WowFFwT+ky+er0WVl2yGhA==",
      "requires": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.4.3",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-docblock": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.4.3.tgz",
      "integrity": "sha512-fzdTftThczeSD9nZ3fzA/4KkHtnmllawWrXO69vtI+L9WjEIuXWs4AmyME7lN5hU7dB0sHhuPfcKofRsUb/2Fg==",
      "peer": true,
      "requires": {
        "detect-newline": "^3.0.0"
      }
    },
    "jest-each": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.6.2.tgz",
      "integrity": "sha512-MsrsqA0Ia99cIpABBc3izS1ZYoYfhIy0NNWqPSE0YXbQjwchyt6B1HD2khzyPe1WiJA7hbxXy77ZoUQxn8UlSw==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "jest-util": "^29.6.2",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-environment-node": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.6.2.tgz",
      "integrity": "sha512-YGdFeZ3T9a+/612c5mTQIllvWkddPbYcN2v95ZH24oWMbGA4GGS2XdIF92QMhUhvrjjuQWYgUGW2zawOyH63MQ==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "jest-get-type": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.4.3.tgz",
      "integrity": "sha512-J5Xez4nRRMjk8emnTpWrlkyb9pfRQQanDrvWHhsR1+VUfbwxi30eVcZFlcdGInRibU4G5LwHXpI7IRHU0CY+gg=="
    },
    "jest-haste-map": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.6.2.tgz",
      "integrity": "sha512-+51XleTDAAysvU8rT6AnS1ZJ+WHVNqhj1k6nTvN2PYP+HjU3kqlaKQ1Lnw3NYW3bm2r8vq82X0Z1nDDHZMzHVA==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "fsevents": "^2.3.2",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      }
    },
    "jest-leak-detector": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.6.2.tgz",
      "integrity": "sha512-aNqYhfp5uYEO3tdWMb2bfWv6f0b4I0LOxVRpnRLAeque2uqOVVMLh6khnTcE2qJ5wAKop0HcreM1btoysD6bPQ==",
      "peer": true,
      "requires": {
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-matcher-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.6.2.tgz",
      "integrity": "sha512-4LiAk3hSSobtomeIAzFTe+N8kL6z0JtF3n6I4fg29iIW7tt99R7ZcIFW34QkX+DuVrf+CUe6wuVOpm7ZKFJzZQ==",
      "requires": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-message-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.6.2.tgz",
      "integrity": "sha512-vnIGYEjoPSuRqV8W9t+Wow95SDp6KPX2Uf7EoeG9G99J2OVh7OSwpS4B6J0NfpEIpfkBNHlBZpA2rblEuEFhZQ==",
      "requires": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      }
    },
    "jest-mock": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.6.2.tgz",
      "integrity": "sha512-hoSv3lb3byzdKfwqCuT6uTscan471GUECqgNYykg6ob0yiAw3zYc7OrPnI9Qv8Wwoa4lC7AZ9hyS4AiIx5U2zg==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-util": "^29.6.2"
      }
    },
    "jest-mock-extended": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-3.0.5.tgz",
      "integrity": "sha512-/eHdaNPUAXe7f65gHH5urc8SbRVWjYxBqmCgax2uqOBJy8UUcCBMN1upj1eZ8y/i+IqpyEm4Kq0VKss/GCCTdw==",
      "requires": {
        "ts-essentials": "^7.0.3"
      }
    },
    "jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "peer": true,
      "requires": {}
    },
    "jest-regex-util": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.4.3.tgz",
      "integrity": "sha512-O4FglZaMmWXbGHSQInfXewIsd1LMn9p3ZXB/6r4FOkyhX2/iP/soMG98jGvk/A3HAN78+5VWcBGO0BJAPRh4kg==",
      "peer": true
    },
    "jest-resolve": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.6.2.tgz",
      "integrity": "sha512-G/iQUvZWI5e3SMFssc4ug4dH0aZiZpsDq9o1PtXTV1210Ztyb2+w+ZgQkB3iOiC5SmAEzJBOHWz6Hvrd+QnNPw==",
      "peer": true,
      "requires": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      }
    },
    "jest-resolve-dependencies": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.6.2.tgz",
      "integrity": "sha512-LGqjDWxg2fuQQm7ypDxduLu/m4+4Lb4gczc13v51VMZbVP5tSBILqVx8qfWcsdP8f0G7aIqByIALDB0R93yL+w==",
      "peer": true,
      "requires": {
        "jest-regex-util": "^29.4.3",
        "jest-snapshot": "^29.6.2"
      }
    },
    "jest-runner": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.6.2.tgz",
      "integrity": "sha512-wXOT/a0EspYgfMiYHxwGLPCZfC0c38MivAlb2lMEAlwHINKemrttu1uSbcGbfDV31sFaPWnWJPmb2qXM8pqZ4w==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/environment": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.4.3",
        "jest-environment-node": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-leak-detector": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-resolve": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "jest-worker": "^29.6.2",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      }
    },
    "jest-runtime": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.6.2.tgz",
      "integrity": "sha512-2X9dqK768KufGJyIeLmIzToDmsN0m7Iek8QNxRSI/2+iPFYHF0jTwlO3ftn7gdKd98G/VQw9XJCk77rbTGZnJg==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/globals": "^29.6.2",
        "@jest/source-map": "^29.6.0",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      }
    },
    "jest-snapshot": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.6.2.tgz",
      "integrity": "sha512-1OdjqvqmRdGNvWXr/YZHuyhh5DeaLp1p/F8Tht/MrMw4Kr1Uu/j4lRG+iKl1DAqUJDWxtQBMk41Lnf/JETYBRA==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.6.2",
        "semver": "^7.5.3"
      }
    },
    "jest-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.6.2.tgz",
      "integrity": "sha512-3eX1qb6L88lJNCFlEADKOkjpXJQyZRiavX1INZ4tRnrBVr2COd3RgcTLyUiEXMNBlDU/cgYq6taUS0fExrWW4w==",
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      }
    },
    "jest-validate": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.6.2.tgz",
      "integrity": "sha512-vGz0yMN5fUFRRbpJDPwxMpgSXW1LDKROHfBopAvDcmD6s+B/s8WJrwi+4bfH4SdInBA5C3P3BI19dBtKzx1Arg==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.6.2"
      },
      "dependencies": {
        "camelcase": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
          "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
          "peer": true
        }
      }
    },
    "jest-watcher": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.6.2.tgz",
      "integrity": "sha512-GZitlqkMkhkefjfN/p3SJjrDaxPflqxEAv3/ik10OirZqJGYH5rPiIsgVcfof0Tdqg3shQGdEIxDBx+B4tuLzA==",
      "peer": true,
      "requires": {
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.6.2",
        "string-length": "^4.0.1"
      }
    },
    "jest-worker": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.6.2.tgz",
      "integrity": "sha512-l3ccBOabTdkng8I/ORCkADz4eSMKejTYv1vB/Z83UiubqhC1oQ5Li6dWCyqOIvSifGjUBxuvxvlm6KGK2DtuAQ==",
      "peer": true,
      "requires": {
        "@types/node": "*",
        "jest-util": "^29.6.2",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "dependencies": {
        "supports-color": {
          "version": "8.1.1",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
          "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
          "peer": true,
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "joi": {
      "version": "17.9.2",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.9.2.tgz",
      "integrity": "sha512-Itk/r+V4Dx0V3c7RLFdRh12IOjySm2/WGPMubBT92cQvRfYZhPM2W0hZlctjj72iES8jsRCwp7S/cRmWBnJ4nw==",
      "requires": {
        "@hapi/hoek": "^9.0.0",
        "@hapi/topo": "^5.0.0",
        "@sideway/address": "^4.1.3",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "peer": true,
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      }
    },
    "jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "peer": true
    },
    "json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "peer": true
    },
    "json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg=="
    },
    "jsonwebtoken": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.1.tgz",
      "integrity": "sha512-K8wx7eJ5TPvEjuiVSkv167EVboBDv9PZdDoF7BgeQnBLVvZWW9clr2PsQHVJDTKaEIH5JBIwHujGcHp7GgI2eg==",
      "requires": {
        "jws": "^3.2.2",
        "lodash": "^4.17.21",
        "ms": "^2.1.1",
        "semver": "^7.3.8"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "requires": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "requires": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA=="
    },
    "kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "peer": true
    },
    "leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "peer": true
    },
    "lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "peer": true
    },
    "locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "peer": true,
      "requires": {
        "p-locate": "^4.1.0"
      }
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ=="
    },
    "lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg=="
    },
    "lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "dev": true
    },
    "lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "luxon": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
      "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg=="
    },
    "make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "requires": {
        "semver": "^6.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA=="
        }
      }
    },
    "make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "peer": true,
      "requires": {
        "tmpl": "1.0.5"
      }
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ=="
    },
    "memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "peer": true
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w=="
    },
    "micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "requires": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      }
    },
    "midjourney": {
      "version": "2.7.79",
      "resolved": "https://registry.npmjs.org/midjourney/-/midjourney-2.7.79.tgz",
      "integrity": "sha512-klnOas1htHIIDlw+SyX6/kaT3wNNbbtxJaFpEqnJnw5w++a1WfbjFhgiD4QWggbSvsACbJukV6LWsvgyvf7WOQ==",
      "requires": {
        "@huggingface/inference": "^2.5.0",
        "isomorphic-ws": "^5.0.0",
        "mime": "^3.0.0",
        "p-queue": "^6.6.2",
        "snowyflake": "^2.0.0",
        "throat": "^6.0.2",
        "tslib": "^2.5.0",
        "websocket-ts": "^1.1.1",
        "ws": "^8.13.0"
      },
      "dependencies": {
        "mime": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
          "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A=="
        }
      }
    },
    "mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
    },
    "mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
    },
    "mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "requires": {
        "mime-db": "1.52.0"
      }
    },
    "mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "peer": true
    },
    "minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ=="
    },
    "minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "requires": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        }
      }
    },
    "mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw=="
    },
    "mongodb": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.7.0.tgz",
      "integrity": "sha512-zm82Bq33QbqtxDf58fLWBwTjARK3NSvKYjyz997KSy6hpat0prjeX/kxjbPVyZY60XYPDNETaHkHJI2UCzSLuw==",
      "requires": {
        "bson": "^5.4.0",
        "mongodb-connection-string-url": "^2.6.0",
        "saslprep": "^1.0.3",
        "socks": "^2.7.1"
      }
    },
    "mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "requires": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      },
      "dependencies": {
        "tr46": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
          "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
          "requires": {
            "punycode": "^2.1.1"
          }
        },
        "webidl-conversions": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
          "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g=="
        },
        "whatwg-url": {
          "version": "11.0.0",
          "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
          "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
          "requires": {
            "tr46": "^3.0.0",
            "webidl-conversions": "^7.0.0"
          }
        }
      }
    },
    "mongoose": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-7.4.1.tgz",
      "integrity": "sha512-o3E5KHHiHdaiwCJG3+9r70sncRKki71Ktf/TfXdW6myu+53rtZ56uLl5ylkQiCf60V3COJuOeekcxXVsjQ7cBA==",
      "requires": {
        "bson": "^5.4.0",
        "kareem": "2.5.1",
        "mongodb": "5.7.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew=="
    },
    "mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "requires": {
        "debug": "4.x"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "msgpackr": {
      "version": "1.9.6",
      "resolved": "https://registry.npmjs.org/msgpackr/-/msgpackr-1.9.6.tgz",
      "integrity": "sha512-50rmb6+ZWvEm0vJn8R8CwI1Eavss3h5rgtKrcdUal3EkZcpqw82+xsmc7RoHb8fYB5V4EOU2NDaOitDAdO0t+w==",
      "requires": {
        "msgpackr-extract": "^3.0.2"
      }
    },
    "msgpackr-extract": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/msgpackr-extract/-/msgpackr-extract-3.0.2.tgz",
      "integrity": "sha512-SdzXp4kD/Qf8agZ9+iTu6eql0m3kWm1A2y1hkpTeVNENutaB0BwHlSvAIaMxwntmRUAUjon2V4L8Z/njd0Ct8A==",
      "optional": true,
      "requires": {
        "@msgpackr-extract/msgpackr-extract-darwin-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-darwin-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-win32-x64": "3.0.2",
        "node-gyp-build-optional-packages": "5.0.7"
      }
    },
    "natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "peer": true
    },
    "negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
    },
    "node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA=="
    },
    "node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-C/fGU2E8ToujUivIO0H+tpQ6HWo4eEmchoPIoXtxCrVghxdKq+QOHqEZW7tuP3KlV3bC8FRMO5nMCC7Zm1VP6g==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "node-gyp-build-optional-packages": {
      "version": "5.0.7",
      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.0.7.tgz",
      "integrity": "sha512-YlCCc6Wffkx0kHkmam79GKvDQ6x+QZkMjFGrIMxgFNILFvGSbCp2fCBC55pGTT9gVaz8Na5CLmxt/urtzRv36w==",
      "optional": true
    },
    "node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "peer": true
    },
    "node-releases": {
      "version": "2.0.13",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.13.tgz",
      "integrity": "sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==",
      "peer": true
    },
    "nodemon": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz",
      "integrity": "sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==",
      "dev": true,
      "requires": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.7",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
          "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
          "dev": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
          "dev": true
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
          "dev": true
        },
        "semver": {
          "version": "5.7.2",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
          "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
          "dev": true
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "dev": true,
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "requires": {
        "abbrev": "1"
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="
    },
    "npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "peer": true,
      "requires": {
        "path-key": "^3.0.0"
      }
    },
    "npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "requires": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg=="
    },
    "object-inspect": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g=="
    },
    "on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA=="
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "requires": {
        "wrappy": "1"
      }
    },
    "onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "peer": true,
      "requires": {
        "mimic-fn": "^2.1.0"
      }
    },
    "openai": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-3.3.0.tgz",
      "integrity": "sha512-uqxI/Au+aPRnsaQRe8CojU0eCR7I0mBiKjD3sNMzY6DaC1ZVrc85u98mtJW6voDug8fgGN+DIZmTDxTthxb7dQ==",
      "requires": {
        "axios": "^0.26.0",
        "form-data": "^4.0.0"
      },
      "dependencies": {
        "axios": {
          "version": "0.26.1",
          "resolved": "https://registry.npmjs.org/axios/-/axios-0.26.1.tgz",
          "integrity": "sha512-fPwcX4EvnSHuInCMItEhAGnaSEXRBjtzh9fOtsE6E1G6p7vl7edEeZe11QHf18+6+9gR5PbKV/sGKNaD8YaMeA==",
          "requires": {
            "follow-redirects": "^1.14.8"
          }
        },
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow=="
    },
    "p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "peer": true,
      "requires": {
        "yocto-queue": "^0.1.0"
      }
    },
    "p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "peer": true,
      "requires": {
        "p-limit": "^2.2.0"
      },
      "dependencies": {
        "p-limit": {
          "version": "2.3.0",
          "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
          "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
          "peer": true,
          "requires": {
            "p-try": "^2.0.0"
          }
        }
      }
    },
    "p-queue": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/p-queue/-/p-queue-6.6.2.tgz",
      "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
      "requires": {
        "eventemitter3": "^4.0.4",
        "p-timeout": "^3.2.0"
      }
    },
    "p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "requires": {
        "p-finally": "^1.0.0"
      }
    },
    "p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "peer": true
    },
    "parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      }
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "passport": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
      "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
      "requires": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1",
        "utils-merge": "^1.0.1"
      }
    },
    "passport-jwt": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.1.tgz",
      "integrity": "sha512-UCKMDYhNuGOBE9/9Ycuoyh7vP6jpeTp/+sfMJl7nLff/t6dps+iaeE0hhNkKN8/HZHcJ7lCdOyDxHdDoxoSvdQ==",
      "requires": {
        "jsonwebtoken": "^9.0.0",
        "passport-strategy": "^1.0.0"
      }
    },
    "passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha512-9wCE6qKznvf9mQYYbgJ3sVOHmCWoUNMVFoZzNoznmISbhnNNPhN9xfY3sLmScHMetEJeoY7CXwfhCe7argfQow==",
      "requires": {
        "passport-strategy": "1.x.x"
      }
    },
    "passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha512-CB97UUvDKJde2V0KDWWB3lyf6PC3FaZP7YxZ2G8OAtn9p4HI9j9JLP9qjOGZFvyl8uwNT8qM+hGnz/n16NI7oA=="
    },
    "path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "peer": true
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg=="
    },
    "path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "peer": true
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "peer": true
    },
    "path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha512-KG8UEiEVkR3wGEb4m5yZkVCzigAD+cVEJck2CzYZO37ZGJfctvVptVO192MwrtPhzONn6go8ylnOdMhKqi4nfg=="
    },
    "picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "peer": true
    },
    "picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA=="
    },
    "pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "peer": true
    },
    "pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "peer": true,
      "requires": {
        "find-up": "^4.0.0"
      }
    },
    "pretty-format": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.6.2.tgz",
      "integrity": "sha512-1q0oC8eRveTg5nnBEWMXAU2qpv65Gnuf2eCQzSjxpWFkPaPARwqZZDGuNE0zPAZfTCHzIk3A8dIjwlQKKLphyg==",
      "requires": {
        "@jest/schemas": "^29.6.0",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
          "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA=="
        }
      }
    },
    "prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "peer": true,
      "requires": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      }
    },
    "proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "requires": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      }
    },
    "proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA=="
    },
    "pure-rand": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.0.2.tgz",
      "integrity": "sha512-6Yg0ekpKICSjPswYOuC5sku/TSWaRYlA0qsXqJgM/d/4pLPHPuTxK7Nbf7jFKzAeedUhR8C7K9Uv63FBsSo8xQ==",
      "peer": true
    },
    "qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "requires": {
        "side-channel": "^1.0.4"
      }
    },
    "random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ=="
    },
    "range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
    },
    "raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "requires": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      }
    },
    "react-is": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
    },
    "readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "requires": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "redis": {
      "version": "4.6.7",
      "resolved": "https://registry.npmjs.org/redis/-/redis-4.6.7.tgz",
      "integrity": "sha512-KrkuNJNpCwRm5vFJh0tteMxW8SaUzkm5fBH7eL5hd/D0fAkzvapxbfGPP/r+4JAXdQuX7nebsBkBqA2RHB7Usw==",
      "requires": {
        "@redis/bloom": "1.2.0",
        "@redis/client": "1.5.8",
        "@redis/graph": "1.1.0",
        "@redis/json": "1.0.4",
        "@redis/search": "1.1.3",
        "@redis/time-series": "1.0.4"
      }
    },
    "redis-errors": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w=="
    },
    "redis-parser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
      "requires": {
        "redis-errors": "^1.0.0"
      }
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "peer": true
    },
    "resolve": {
      "version": "1.22.2",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.2.tgz",
      "integrity": "sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==",
      "peer": true,
      "requires": {
        "is-core-module": "^2.11.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "peer": true,
      "requires": {
        "resolve-from": "^5.0.0"
      }
    },
    "resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "peer": true
    },
    "resolve.exports": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
      "integrity": "sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==",
      "peer": true
    },
    "rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "requires": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "requires": {
        "lru-cache": "^6.0.0"
      }
    },
    "send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "requires": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "requires": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      }
    },
    "set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "peer": true,
      "requires": {
        "shebang-regex": "^3.0.0"
      }
    },
    "shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "peer": true
    },
    "side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "requires": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      }
    },
    "sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "requires": {
        "semver": "~7.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
          "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
          "dev": true
        }
      }
    },
    "sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "peer": true
    },
    "slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q=="
    },
    "smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg=="
    },
    "snowyflake": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/snowyflake/-/snowyflake-2.0.0.tgz",
      "integrity": "sha512-BxeqV0KJxJASu6EBJGUkX194Zhh37AEa0ow/JRK39icWbLTG9Wl/7LAL6a/ZMSjNm4O9pZk6QoLcWP7f/YKmtA=="
    },
    "socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "requires": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "peer": true
    },
    "source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "peer": true,
      "requires": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "requires": {
        "memory-pager": "^1.0.2"
      }
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "peer": true
    },
    "stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "requires": {
        "escape-string-regexp": "^2.0.0"
      }
    },
    "standard-as-callback": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A=="
    },
    "statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
    },
    "string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "requires": {
        "safe-buffer": "~5.2.0"
      }
    },
    "string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "peer": true,
      "requires": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      }
    },
    "string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      }
    },
    "strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "requires": {
        "ansi-regex": "^5.0.1"
      }
    },
    "strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "peer": true
    },
    "strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "peer": true
    },
    "strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "peer": true
    },
    "superagent": {
      "version": "8.0.9",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.0.9.tgz",
      "integrity": "sha512-4C7Bh5pyHTvU33KpZgwrNKh/VQnvgtCSqPRfJAUdmrtSYePVzVg4E4OzsrbkhJj9O7SO6Bnv75K/F8XVZT8YHA==",
      "dev": true,
      "requires": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^2.1.2",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0",
        "semver": "^7.3.8"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "dev": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "dev": true,
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        },
        "mime": {
          "version": "2.6.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
          "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
          "dev": true
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "dev": true
        }
      }
    },
    "supertest": {
      "version": "6.3.3",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-6.3.3.tgz",
      "integrity": "sha512-EMCG6G8gDu5qEqRQ3JjjPs6+FYT1a7Hv5ApHvtSghmOFJYtsU5S+pSb6Y2EUeCEY3CmEL3mmQ8YWlPOzQomabA==",
      "dev": true,
      "requires": {
        "methods": "^1.1.2",
        "superagent": "^8.0.5"
      }
    },
    "supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "requires": {
        "has-flag": "^4.0.0"
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "peer": true
    },
    "tar": {
      "version": "6.1.15",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.15.tgz",
      "integrity": "sha512-/zKt9UyngnxIT/EAGYuxaMYgOIJiP81ab9ZfkILq4oNLPFX50qyYmu7jRj9qeXoxmJHjGlbH0+cm2uy1WCs10A==",
      "requires": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      }
    },
    "test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "peer": true,
      "requires": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      }
    },
    "throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ=="
    },
    "tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "peer": true
    },
    "to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "peer": true
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "requires": {
        "nopt": "~1.0.10"
      },
      "dependencies": {
        "nopt": {
          "version": "1.0.10",
          "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
          "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
          "dev": true,
          "requires": {
            "abbrev": "1"
          }
        }
      }
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "ts-essentials": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/ts-essentials/-/ts-essentials-7.0.3.tgz",
      "integrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ==",
      "requires": {}
    },
    "ts-jest": {
      "version": "29.1.1",
      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.1.1.tgz",
      "integrity": "sha512-D6xjnnbP17cC85nliwGiL+tpoKN0StpgE0TeOjXQTU6MVCfsB4v7aW05CgQ/1OywGb0x/oy9hHFnN+sczTiRaA==",
      "dev": true,
      "requires": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^29.0.0",
        "json5": "^2.2.3",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "^7.5.3",
        "yargs-parser": "^21.0.1"
      }
    },
    "ts-node": {
      "version": "10.9.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
      "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
      "requires": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      }
    },
    "tslib": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.1.tgz",
      "integrity": "sha512-t0hLfiEKfMUoqhG+U1oid7Pva4bbDPHYfJNiB7BiIjRkj1pyC++4N3huJfqY6aRH6VTB0rvtzQwjM4K6qpfOig=="
    },
    "type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "peer": true
    },
    "type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "peer": true
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "typescript": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.1.6.tgz",
      "integrity": "sha512-zaWCozRZ6DLEWAWFrVDz1H6FVXzUSfTy5FUMWsQlU8Ym5JP9eO4xkTIROFCQvhQf61z6O/G6ugw3SgAnvvm+HA=="
    },
    "uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "requires": {
        "random-bytes": "~1.0.0"
      }
    },
    "undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ=="
    },
    "update-browserslist-db": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz",
      "integrity": "sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==",
      "peer": true,
      "requires": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      }
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA=="
    },
    "uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg=="
    },
    "v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg=="
    },
    "v8-to-istanbul": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.1.0.tgz",
      "integrity": "sha512-6z3GW9x8G1gd+JIIgQQQxXuiJtCXeAjp6RaPEPLv62mH3iPHPxV6W3robxtCzNErRo6ZwTmzWhsbNvjyEBKzKA==",
      "peer": true,
      "requires": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0"
      },
      "dependencies": {
        "convert-source-map": {
          "version": "1.9.0",
          "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
          "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
          "peer": true
        }
      }
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg=="
    },
    "walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "peer": true,
      "requires": {
        "makeerror": "1.0.12"
      }
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "websocket-ts": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/websocket-ts/-/websocket-ts-1.1.1.tgz",
      "integrity": "sha512-rm+S60J74Ckw5iizzgID12ju+OfaHAa6dhXhULIOrXkl0e05RzxfY42/vMStpz5jWL3iz9mkyjPcFUY1IgI0fw=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "peer": true,
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "requires": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "peer": true,
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "peer": true,
      "requires": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      }
    },
    "ws": {
      "version": "8.13.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.13.0.tgz",
      "integrity": "sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==",
      "requires": {}
    },
    "y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "peer": true
    },
    "yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "peer": true,
      "requires": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      }
    },
    "yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw=="
    },
    "yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q=="
    },
    "yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "peer": true
    }
  }
}


--- File: package.json ---
{
  "name": "bodyone-backend-node",
  "version": "1.0.0",
  "description": "Backend for Ai Apis",
  "main": "index.js",
  "scripts": {
    "start": "npx ts-node src/app.ts",
    "test": "jest --watchAll --verbose --runInBand"
  },
  "keywords": [],
  "author": "Andy Lewis",
  "license": "ISC",
  "dependencies": {
    "@types/supertest": "^2.0.12",
    "axios": "^1.4.0",
    "bcrypt": "^5.1.0",
    "bcryptjs": "^2.4.3",
    "bull": "^4.10.4",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "express-session": "~1.17.0",
    "helmet": "^7.0.0",
    "ioredis": "^5.3.2",
    "jest-mock-extended": "^3.0.4",
    "joi": "^17.9.2",
    "jsonwebtoken": "^9.0.0",
    "lodash": "^4.17.21",
    "midjourney": "^2.2.31",
    "mongodb": "^5.5.0",
    "mongoose": "^7.1.1",
    "node-fetch": "^2.6.11",
    "openai": "^3.3.0",
    "passport": "^0.6.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "redis": "^4.6.6",
    "ts-node": "^10.9.1",
    "typescript": "^5.0.4"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.0",
    "@types/bcryptjs": "^2.4.2",
    "@types/cors": "^2.8.13",
    "@types/express-session": "~1.17.0",
    "@types/jest": "^29.5.1",
    "@types/jsonwebtoken": "^9.0.2",
    "@types/mocha": "^10.0.1",
    "@types/mongoose": "^5.11.97",
    "@types/node": "^20.1.7",
    "@types/node-fetch": "^2.6.4",
    "@types/passport": "^1.0.12",
    "@types/passport-jwt": "^3.0.8",
    "@types/passport-local": "^1.0.35",
    "dotenv": "^16.0.3",
    "nodemon": "^2.0.22",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.0"
  },
  "directories": {
    "test": "tests"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AJLewis/bodyone-backend-node.git"
  },
  "bugs": {
    "url": "https://github.com/AJLewis/bodyone-backend-node/issues"
  },
  "homepage": "https://github.com/AJLewis/bodyone-backend-node#readme"
}


--- File: project_structure.txt ---
--- Folder Structure ---
[.git]
    ├── COMMIT_EDITMSG
    ├── FETCH_HEAD
    ├── HEAD
    ├── ORIG_HEAD
    ├── config
    ├── description
    ├── [hooks]
        ├── applypatch-msg.sample
        ├── commit-msg.sample
        ├── fsmonitor-watchman.sample
        ├── post-update.sample
        ├── pre-applypatch.sample
        ├── pre-commit.sample
        ├── pre-merge-commit.sample
        ├── pre-push.sample
        ├── pre-rebase.sample
        ├── pre-receive.sample
        ├── prepare-commit-msg.sample
        └── update.sample
    ├── index
    ├── [info]
        └── exclude
    ├── [objects]
        ├── [13]
            └── fb5792205059bb7bfe0c7dd09fcc316b9cf0a3
        ├── [55]
            └── a1cbc146410e4ded134a70caf1b814276c3be3
        ├── [78]
            └── d64083d469249a1d4a85edbef0e5c93a8541a0
        ├── [cf]
            ├── d47797da57a7ce1a1c4a4f9e10f0678e9d085a
            └── dca8a458d4577dd687e079fc13f6af8c44d425
        ├── [info]
        └── [pack]
            ├── pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.idx
            └── pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.pack
    ├── packed-refs
    └── [refs]
        ├── [heads]
            └── main
        ├── [remotes]
            └── [origin]
                ├── HEAD
                └── main
        └── [tags]
.gitignore
[.history]
    └── [src]
        ├── app_20230803101441.ts
        ├── app_20230803121957.ts
        ├── app_20230803122001.ts
        ├── app_20230803140226.ts
        ├── app_20230803140229.ts
        ├── [config]
            ├── db_20230803095330.js
            ├── db_20230803191146.js
            ├── db_20230803191149.js
            ├── db_20230803191616.ts
            ├── db_20230803191617.js
            ├── db_20230803191747.ts
            ├── db_20230803191755.ts
            ├── db_20230803191837.ts
            ├── db_20230803191838.ts
            ├── db_20230803191907.ts
            ├── db_20230803192013.ts
            ├── db_20230803192020.ts
            ├── db_20230803192032.ts
            ├── db_20230803192056.ts
            ├── db_20230803192127.ts
            ├── db_20230803192135.ts
            ├── db_20230803192137.ts
            ├── db_20230803192212.ts
            ├── db_20230803192216.ts
            ├── db_20230803192316.ts
            ├── db_20230803192520.ts
            ├── db_20230803192521.ts
            ├── db_20230803201311.ts
            ├── passport_20230803095330.ts
            ├── passport_20230803120530.ts
            ├── passport_20230803120539.ts
            ├── passport_20230803121028.ts
            ├── passport_20230803134320.ts
            ├── passport_20230803134322.ts
            ├── passport_20230803134324.ts
            ├── passport_20230803134328.ts
            ├── passport_20230803134527.ts
            ├── passport_20230803134533.ts
            ├── passport_20230803134534.ts
            ├── passport_20230803134559.ts
            ├── passport_20230803134708.ts
            ├── passport_20230803134724.ts
            ├── passport_20230803134732.ts
            ├── passport_20230803134735.ts
            ├── passport_20230803134737.ts
            ├── passport_20230803135037.ts
            ├── passport_20230803135038.ts
            ├── passport_20230803135039.ts
            ├── passport_20230803135041.ts
            ├── passport_20230803135048.ts
            └── passport_20230803135119.ts
        ├── [controllers]
            ├── [external]
                └── [openai]
                    ├── chat_20230803101508.ts
                    ├── chat_20230803193317.ts
                    ├── chat_20230803211038.ts
                    ├── chat_20230803211039.ts
                    ├── chat_20230803211134.ts
                    ├── chat_20230803211135.ts
                    ├── chat_20230803211151.ts
                    ├── chat_20230803211228.ts
                    ├── chat_20230803211312.ts
                    ├── chat_20230803211431.ts
                    ├── chat_20230803211433.ts
                    ├── chat_20230803211434.ts
                    └── chat_20230803211435.ts
            └── [internal]
                ├── ai-coach_20230803195548.ts
                ├── ai-coach_20230803195603.ts
                ├── ai-coach_20230803195714.ts
                ├── ai-coach_20230803195731.ts
                ├── ai-coach_20230803195945.ts
                ├── ai-coach_20230803195954.ts
                ├── ai-coach_20230803201252.ts
                ├── ai-coach_20230803201415.ts
                ├── ai-coach_20230803201505.ts
                ├── ai-coach_20230803201506.ts
                ├── ai-coach_20230803203330.ts
                ├── ai-coach_20230803203337.ts
                ├── ai-coach_20230803203435.ts
                ├── ai-coach_20230803203615.ts
                ├── ai-coach_20230803203618.ts
                ├── ai-coach_20230803203619.ts
                ├── ai-coach_20230803204424.ts
                ├── ai-coach_20230803204432.ts
                ├── ai-coach_20230803204450.ts
                ├── ai-coach_20230803204454.ts
                ├── ai-coach_20230803204457.ts
                ├── ai-coach_20230803204501.ts
                ├── ai-coach_20230803204508.ts
                ├── ai-coach_20230803204512.ts
                ├── ai-coach_20230803204517.ts
                ├── ai-coach_20230803204652.ts
                ├── ai-coach_20230803210732.ts
                ├── ai-coach_20230803210845.ts
                ├── ai-coach_20230803210847.ts
                ├── ai-coach_20230803210852.ts
                ├── ai-coach_20230803211547.ts
                ├── ai-coach_20230803211633.ts
                ├── ai-coach_20230803211634.ts
                ├── ai-coach_20230803211635.ts
                ├── ai-coach_20230803211652.ts
                ├── ai-coach_20230803211754.ts
                ├── ai-coach_20230803211806.ts
                ├── ai-coach_20230803211916.ts
                ├── ai-coach_20230803211917.ts
                ├── ai-coach_20230803211920.ts
                ├── ai-coach_20230803212002.ts
                ├── ai-coach_20230803212039.ts
                ├── ai-coach_20230803212058.ts
                ├── ai-coach_20230803212059.ts
                ├── ai-coach_20230803212248.ts
                ├── ai-coach_20230803212249.ts
                ├── ai-coach_20230803212250.ts
                ├── ai-coach_20230803212421.ts
                ├── ai-coach_20230803212427.ts
                ├── ai-coach_20230803212428.ts
                ├── ai-coach_20230803212556.ts
                ├── ai-coach_20230803212611.ts
                ├── ai-coach_20230803212620.ts
                ├── ai-coach_20230803212621.ts
                ├── ai-coach_20230803212649.ts
                ├── ai-coach_20230803212714.ts
                ├── ai-coach_20230803212727.ts
                ├── ai-coach_20230803212730.ts
                ├── ai-coach_20230803212740.ts
                ├── ai-coach_20230803212836.ts
                ├── ai-coach_20230803212837.ts
                ├── ai-coach_20230803212904.ts
                ├── ai-coach_20230803212907.ts
                ├── ai-coach_20230803212911.ts
                ├── ai-coach_20230803212926.ts
                ├── ai-coach_20230803212927.ts
                ├── ai-coach_20230803212936.ts
                ├── ai-coach_20230803213009.ts
                ├── ai-coach_20230803213010.ts
                ├── ai-coach_20230803213011.ts
                ├── ai-coach_20230803213053.ts
                ├── ai-coach_20230803213101.ts
                ├── ai-coach_20230803213103.ts
                ├── ai-coach_20230803213126.ts
                ├── ai-coach_20230803213127.ts
                ├── ai-coach_20230803213302.ts
                ├── ai-coach_20230803213303.ts
                ├── ai-coach_20230803213304.ts
                ├── ai-coach_20230803213339.ts
                ├── ai-coach_20230803213340.ts
                ├── ai-coach_20230803213341.ts
                ├── ai-coach_20230803213342.ts
                ├── ai-coach_20230803213444.ts
                ├── ai-coach_20230803213445.ts
                ├── ai-coach_20230803213523.ts
                ├── ai-coach_20230803213619.ts
                ├── ai-coach_20230803213620.ts
                ├── ai-coach_20230803220900.ts
                ├── ai-coach_20230803220936.ts
                ├── ai-coach_20230803221146.ts
                ├── ai-coach_20230803221155.ts
                ├── [auth]
                    ├── authentication_20230803101508.ts
                    ├── authentication_20230803125922.ts
                    ├── authentication_20230803125923.ts
                    ├── authentication_20230803125932.ts
                    ├── authentication_20230803125940.ts
                    ├── authentication_20230803131847.ts
                    ├── authentication_20230803132119.ts
                    ├── authentication_20230803132147.ts
                    ├── authentication_20230803132204.ts
                    ├── authentication_20230803132345.ts
                    ├── authentication_20230803132348.ts
                    ├── authentication_20230803132353.ts
                    ├── authentication_20230803132401.ts
                    ├── authentication_20230803132404.ts
                    ├── authentication_20230803132513.ts
                    ├── authentication_20230803132532.ts
                    ├── authentication_20230803132533.ts
                    ├── authentication_20230803132619.ts
                    ├── authentication_20230803132710.ts
                    ├── authentication_20230803132720.ts
                    └── authentication_20230803132721.ts
                ├── authentication_20230803132720.ts
                ├── authentication_20230803204307.ts
                ├── authentication_20230803204722.ts
                ├── authentication_20230803204733.ts
                ├── authentication_20230803210637.ts
                ├── crud-user_20230803143023.ts
                ├── crud-user_20230803143327.ts
                ├── exercise_20230803143941.ts
                ├── exercise_20230803144544.ts
                ├── exercise_20230803144706.ts
                ├── exercise_20230803144846.ts
                ├── exercise_20230803144848.ts
                ├── exercise_20230803155423.ts
                ├── exercise_20230803155447.ts
                ├── exercise_20230803162555.ts
                ├── exercise_20230803162611.ts
                ├── ingredients_20230803155946.ts
                ├── ingredients_20230803160045.ts
                ├── ingredients_20230803162625.ts
                ├── ingredients_20230803162626.ts
                ├── ingredients_20230803165050.ts
                ├── ingredients_20230803165336.ts
                ├── ingredients_20230803165337.ts
                ├── ingredients_20230803165526.ts
                ├── ingredients_20230803165556.ts
                ├── ingredients_20230803165557.ts
                ├── ingredients_20230803165741.ts
                ├── ingredients_20230803165841.ts
                ├── ingredients_20230803165842.ts
                ├── ingredients_20230803170127.ts
                ├── meal-plan_20230803174835.ts
                ├── meal-plan_20230803174855.ts
                ├── meal-plan_20230803174908.ts
                ├── meal-plan_20230803174909.ts
                ├── meal-plan_20230803175049.ts
                ├── meal_20230803172615.ts
                ├── meal_20230803172807.ts
                ├── meal_20230803172808.ts
                ├── meal_20230803214223.ts
                ├── points_20230803214259.ts
                ├── points_20230803214335.ts
                ├── points_20230803214336.ts
                ├── recipe_20230803170949.ts
                ├── recipe_20230803171124.ts
                ├── recipe_20230803171127.ts
                ├── [user]
                    ├── update-user_20230803135955.ts
                    ├── update-user_20230803140408.ts
                    ├── update-user_20230803140541.ts
                    ├── update-user_20230803140602.ts
                    ├── update-user_20230803140723.ts
                    ├── update-user_20230803142034.ts
                    └── update-user_20230803143024.ts
                ├── user-meal-plan_20230803174131.ts
                ├── user-meal-plan_20230803174244.ts
                ├── user-meal-plan_20230803174256.ts
                ├── user-meal_20230803173848.ts
                ├── user-meal_20230803173851.ts
                ├── user-meal_20230803174132.ts
                ├── user_20230803143326.ts
                ├── user_20230803143412.ts
                ├── user_20230803143417.ts
                ├── user_20230803154125.ts
                ├── user_20230803154126.ts
                ├── user_20230803154412.ts
                ├── user_20230803154413.ts
                ├── user_20230803154414.ts
                ├── user_20230803154435.ts
                ├── user_20230803154520.ts
                ├── user_20230803154521.ts
                ├── user_20230803154657.ts
                ├── user_20230803154815.ts
                ├── user_20230803154817.ts
                ├── user_20230803154837.ts
                ├── user_20230803154838.ts
                ├── user_20230803155127.ts
                ├── user_20230803155143.ts
                ├── user_20230803155451.ts
                ├── user_20230803181116.ts
                ├── user_20230803181337.ts
                ├── user_20230803181523.ts
                ├── user_20230803181740.ts
                ├── user_20230803181836.ts
                ├── user_20230803181837.ts
                ├── user_20230803182018.ts
                ├── user_20230803182029.ts
                ├── user_20230803182030.ts
                ├── user_20230803182031.ts
                ├── user_20230803194239.ts
                ├── user_20230803194601.ts
                ├── user_20230803201827.ts
                ├── user_20230803202043.ts
                ├── user_20230803202047.ts
                ├── user_20230803202048.ts
                ├── user_20230803202049.ts
                ├── user_20230803215141.ts
        ├── [models]
            ├── AICoachChat.model_20230803123623.ts
            ├── AICoachChat.model_20230803130252.ts
            ├── AICoachChat.model_20230803201421.ts
            ├── AICoachChat.model_20230803213101.ts
            ├── AICoachChat.model_20230803213126.ts
            ├── AICoachChat.model_20230803213127.ts
            ├── AICoachChat.model_20230803213713.ts
            ├── AICoachMessage.model_20230803123527.ts
            ├── AICoachMessage.model_20230803123552.ts
            ├── AICoachMessage.model_20230803123624.ts
            ├── Acheivement.model_20230803122900.ts
            ├── Acheivement.model_20230803122902.ts
            ├── Acheivement.model_20230803122904.ts
            ├── ComminityPost.model_20230803122759.ts
            ├── ComminityPost.model_20230803122802.ts
            ├── Exercise.model_20230803115039.ts
            ├── Exercise.model_20230803115557.ts
            ├── Exercise.model_20230803120625.ts
            ├── Exercise.model_20230803120723.ts
            ├── Exercise.model_20230803120824.ts
            ├── Exercise.model_20230803120902.ts
            ├── Exercise.model_20230803120903.ts
            ├── Exercise.model_20230803121249.ts
            ├── Exercise.model_20230803121251.ts
            ├── Exercise.model_20230803144425.ts
            ├── Feedback.model_20230803122929.ts
            ├── Feedback.model_20230803122938.ts
            ├── Feedback.model_20230803122939.ts
            ├── Group.model_20230803123154.ts
            ├── Group.model_20230803123258.ts
            ├── Ingredient.model_20230803113925.ts
            ├── Ingredient.model_20230803113942.ts
            ├── Ingredient.model_20230803114024.ts
            ├── Ingredient.model_20230803114026.ts
            ├── Ingredient.model_20230803120720.ts
            ├── Ingredient.model_20230803121238.ts
            ├── Ingredient.model_20230803121240.ts
            ├── Ingredient.model_20230803161139.ts
            ├── Ingredient.model_20230803161653.ts
            ├── Ingredient.model_20230803161654.ts
            ├── Ingredient.model_20230803161702.ts
            ├── Ingredient.model_20230803163921.ts
            ├── Ingredient.model_20230803163922.ts
            ├── Ingredient.model_20230803163923.ts
            ├── Meal.model_20230803113629.ts
            ├── Meal.model_20230803113720.ts
            ├── Meal.model_20230803114036.ts
            ├── Meal.model_20230803120717.ts
            ├── Meal.model_20230803121226.ts
            ├── Meal.model_20230803121228.ts
            ├── MealPlan.model_20230803101601.ts
            ├── MealPlan.model_20230803112841.ts
            ├── MealPlan.model_20230803113703.ts
            ├── MealPlan.model_20230803120012.ts
            ├── MealPlan.model_20230803120014.ts
            ├── MealPlan.model_20230803120712.ts
            ├── MealPlan.model_20230803121218.ts
            ├── MealPlan.model_20230803121220.ts
            ├── MealPlan.model_20230803175617.ts
            ├── MealPlan.model_20230803175618.ts
            ├── MealPlan.model_20230803175619.ts
            ├── MealPlan.model_20230803180118.ts
            ├── Notification.model_20230803123127.ts
            ├── Notification.model_20230803123138.ts
            ├── Notification.model_20230803123139.ts
            ├── Payment.model_20230803123040.ts
            ├── Payment.model_20230803123042.ts
            ├── Pts.model_20230803121605.ts
            ├── Pts.model_20230803121624.ts
            ├── Pts.model_20230803121627.ts
            ├── Pts.model_20230803214004.ts
            ├── Pts.model_20230803214145.ts
            ├── Pts.model_20230803214148.ts
            ├── Pts.model_20230803214200.ts
            ├── Pts.model_20230803214203.ts
            ├── Recipe.model_20230803101601.ts
            ├── Recipe.model_20230803113300.ts
            ├── Recipe.model_20230803113320.ts
            ├── Recipe.model_20230803113324.ts
            ├── Recipe.model_20230803113917.ts
            ├── Recipe.model_20230803114052.ts
            ├── Recipe.model_20230803114153.ts
            ├── Recipe.model_20230803114333.ts
            ├── Recipe.model_20230803114336.ts
            ├── Recipe.model_20230803114337.ts
            ├── Recipe.model_20230803120707.ts
            ├── Recipe.model_20230803121211.ts
            ├── Recipe.model_20230803170840.ts
            ├── Recipe.model_20230803170841.ts
            ├── User.model_20230803101255.ts
            ├── User.model_20230803112212.ts
            ├── User.model_20230803112941.ts
            ├── User.model_20230803113002.ts
            ├── User.model_20230803115950.ts
            ├── User.model_20230803115952.ts
            ├── User.model_20230803120100.ts
            ├── User.model_20230803120130.ts
            ├── User.model_20230803120131.ts
            ├── User.model_20230803120703.ts
            ├── User.model_20230803121024.ts
            ├── User.model_20230803121158.ts
            ├── User.model_20230803121200.ts
            ├── User.model_20230803121816.ts
            ├── User.model_20230803121931.ts
            ├── User.model_20230803121948.ts
            ├── User.model_20230803122639.ts
            ├── User.model_20230803122648.ts
            ├── User.model_20230803123753.ts
            ├── User.model_20230803123754.ts
            ├── User.model_20230803124041.ts
            ├── User.model_20230803124042.ts
            ├── User.model_20230803130238.ts
            ├── User.model_20230803131341.ts
            ├── User.model_20230803131342.ts
            ├── User.model_20230803131517.ts
            ├── User.model_20230803131647.ts
            ├── User.model_20230803131648.ts
            ├── User.model_20230803131649.ts
            ├── User.model_20230803132852.ts
            ├── User.model_20230803132853.ts
            ├── User.model_20230803132931.ts
            ├── User.model_20230803132932.ts
            ├── User.model_20230803133128.ts
            ├── User.model_20230803133133.ts
            ├── User.model_20230803133405.ts
            ├── User.model_20230803133415.ts
            ├── User.model_20230803133419.ts
            ├── User.model_20230803133420.ts
            ├── User.model_20230803133450.ts
            ├── User.model_20230803133451.ts
            ├── User.model_20230803133452.ts
            ├── User.model_20230803133819.ts
            ├── User.model_20230803133822.ts
            ├── User.model_20230803133830.ts
            ├── User.model_20230803133832.ts
            ├── User.model_20230803133841.ts
            ├── User.model_20230803133842.ts
            ├── User.model_20230803134827.ts
            ├── User.model_20230803134828.ts
            ├── User.model_20230803134856.ts
            ├── User.model_20230803134858.ts
            ├── User.model_20230803134859.ts
            ├── User.model_20230803134905.ts
            ├── User.model_20230803134923.ts
            ├── User.model_20230803134925.ts
            ├── User.model_20230803134928.ts
            ├── User.model_20230803135002.ts
            ├── User.model_20230803135130.ts
            ├── User.model_20230803135220.ts
            ├── User.model_20230803135224.ts
            ├── User.model_20230803135228.ts
            ├── User.model_20230803135232.ts
            ├── User.model_20230803140718.ts
            ├── User.model_20230803191058.ts
            ├── User.model_20230803191605.ts
            ├── User.model_20230803191611.ts
            ├── User.model_20230803191612.ts
            ├── User.model_20230803191849.ts
            ├── User.model_20230803192204.ts
            ├── User.model_20230803192332.ts
            ├── User.model_20230803192345.ts
            ├── User.model_20230803214840.ts
            ├── User.model_20230803214841.ts
            ├── User.model_20230803214846.ts
            ├── User.model_20230803214848.ts
            ├── User.model_20230803215032.ts
            ├── User.model_20230803215041.ts
            ├── User.model_20230803215043.ts
            ├── User.model_20230803215044.ts
            ├── User.model_20230803215045.ts
            ├── User.model_20230803215047.ts
            ├── User.model_20230803215056.ts
            ├── User.model_20230803215057.ts
            ├── User.model_20230803215122.ts
            ├── User.model_20230803222425.ts
            ├── UserChat.model_20230803123317.ts
            ├── UserChat.model_20230803123408.ts
            ├── UserMealPlan.model_20230803120008.ts
            ├── UserMealPlan.model_20230803121150.ts
            ├── UserMealPlan_20230803115733
            ├── UserMealPlan_20230803115741
            ├── UserMealPlan_20230803115816
            ├── UserMealPlan_20230803115825
            ├── UserMealPlan_20230803115829
            ├── UserMealPlan_20230803115832
            ├── UserMealPlan_20230803115834
            ├── UserMealPlan_20230803120007
            ├── UserMealPlan_20230803120009
            ├── UserMetrics.model_20230803111806.ts
            ├── UserMetrics.model_20230803111813.ts
            ├── UserMetrics.model_20230803120657.ts
            ├── UserMetrics.model_20230803121139.ts
            ├── UserMetrics.model_20230803121140.ts
README.md
[node_modules]
package-lock.json
package.json
project_structure.txt
[src]
    ├── app.ts
    ├── [config]
        ├── db.ts
        └── passport.ts
    ├── [constants]
        └── openai-models.constant.ts
    ├── [controllers]
        ├── [external]
            ├── [bard]
                └── chat.ts
            ├── [openai]
                ├── chat.ts
                ├── completion.ts
                └── image.ts
            └── [stable-diffusion]
                ├── fetch_from_queue.ts
                ├── text_to_image.ts
                └── text_to_video.ts
        └── [internal]
            ├── ai-coach.ts
            ├── authentication.ts
            ├── exercise.ts
            ├── ingredients.ts
            ├── meal-plan.ts
            ├── meal.ts
            ├── points.ts
            ├── recipe.ts
            ├── user-meal-plan.ts
            ├── user.ts
    ├── [middlewares]
    ├── [models]
        ├── AICoachChat.model.ts
        ├── Acheivement.model.ts
        ├── ComminityPost.model.ts
        ├── Exercise.model.ts
        ├── Feedback.model.ts
        ├── Group.model.ts
        ├── Ingredient.model.ts
        ├── Meal.model.ts
        ├── MealPlan.model.ts
        ├── Notification.model.ts
        ├── Payment.model.ts
        ├── Pts.model.ts
        ├── Recipe.model.ts
        ├── User.model.ts
        ├── UserChat.model.ts
        ├── UserMealPlan.model.ts
        ├── UserMetrics.model.ts
    └── [utils]
tsconfig.json

--- File Contents ---

--- File: .git/COMMIT_EDITMSG ---
Initial setup including server


--- File: .git/FETCH_HEAD ---
55a1cbc146410e4ded134a70caf1b814276c3be3		branch 'main' of https://github.com/AJLewis/bodyone-backend-node


--- File: .git/HEAD ---
ref: refs/heads/main


--- File: .git/ORIG_HEAD ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .git/config ---
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/AJLewis/bodyone-backend-node.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main


--- File: .git/description ---
Unnamed repository; edit this file 'description' to name the repository.


--- File: .git/hooks/applypatch-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


--- File: .git/hooks/commit-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


--- File: .git/hooks/fsmonitor-watchman.sample ---
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


--- File: .git/hooks/post-update.sample ---
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


--- File: .git/hooks/pre-applypatch.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


--- File: .git/hooks/pre-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


--- File: .git/hooks/pre-merge-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


--- File: .git/hooks/pre-push.sample ---
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


--- File: .git/hooks/pre-rebase.sample ---
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


--- File: .git/hooks/pre-receive.sample ---
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


--- File: .git/hooks/prepare-commit-msg.sample ---
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


--- File: .git/hooks/update.sample ---
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


--- File: .git/index ---
DIRC      d�XzE�zd�XzE�z  �,  ��  �     �ƻ��8�i��Q-��<S�} 
.gitignore        d�XzH{�d�XzH{�  �-  ��  �      ��n1(K�C�V;WX%�L�� 	README.md d�Z�*�d�Z�*�  琫  ��  �    ��W� PY�{�}П�1k�� package-lock.json d�Z�+�;d�Z�+�;  ��  ��  �     Nx�@��i$�J������:�A� package.json      d�Z�-��d�Z�-��  �m  ��  �      ���w��W��JO��g��Z 	server.js TREE    5 0
�ܨ�X�W}և�y����D�%A��6�mT�������\=D

--- File: .git/info/exclude ---
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


--- File: .git/objects/13/fb5792205059bb7bfe0c7dd09fcc316b9cf0a3 ---
x�i��ڶ X��W����`�"��g����4�u3�D��ʼ����e��.Y�����Ľ:`�~�9���?0�=������_��㇧�Ə�������ن�x�n��?�72#�-߃_��D�D�u|�>X�!]��oGF�Z���'Qj� LŬ��	`���&oP���[�wK3��^͏뷫��X��i�ݓ�;��A��ޟ`M�߀������������iX\ۏ�w������b��5�� �~������w�;�' ��������	�Q���]_O#F��U�/����� �+�~�v{�𲾓:|�c��"Hd�V�D�^���?��|�������gbV�%����0#+)!�������|t��۵)�� F�Y�U�	�u?['{ۢϔZO�Η*i��Z�DPX8�&�Ҟ�T��+�QN\��o�����n$��|8����o_�b����_��!�\���k�b��@ <rHM���h�χ�׷��w孟��;�Y���3kD�)��'���. r}� ,ٻZ��o��5�/�tf$�6�y��,��=����� ��Ȥ c�*��^Q�Q����=3����ΐ��]�n�le2�����L����P���b䷙v"3j��$5֣rZ-����L{򌚮��� X=���zX8��>|�@�-���|�S�~� �)�;~'�>`��?~�y��B 1�%O�ʖ���R�to��ǖ;��X�[�RL��;Q���v�!�#�c�C!-�S�.��a��鱏J�B8F��]G%�͏4r^�	h�;��.���!z�>j���2M�)�n��יĮ�TzN���
��0ߐ�p���Y�F{�eB͘�1F���193�S�2�%�[��8�M������Z{���������7@h?��J��7/R��WU�h֞1&�wv�)�� ���B����3m��cEe<�'�:J*br�E$�(�Tǻ����^�TDy;�a�:���a?@�Mb���&X
���4#H^�%Tj���ƫ?Ä�?_��8������((m�--�4�'�	7F��%�bv�-���wmw�fyk5�#׭�L��DĮ<ԔBꈩ��Jn��?_��X̵\�f3�7�hzu�ץC�`�~b)�_�O�]����ϴ��}�Oc��������G_�_�n���3�ā���W��rIs��QC{O��~��4gJ���@�����S��kw_,�Cg}�:'�\��¶{}�%&��nN����R>ݓ�g�
�5v_Դ��W�5�9\z�Y�����d�������}㒦��!��~�0ޣ��l���;�$YϹ�[��lH�&=6e�i�qUlؓ^{��C�0�9Ҋ�]Hg�-%�Xs�"($�VG��!��گ�2Ѿ"�)���M`��n��r�����i�Q���E���[���h'�V�&*�q�+\�}�g�1�#��5^r�}]nÍ���G���ԍ)�+Z҉I�!��ڄ?�NGSr9��]���ݍ3������ldS*�-��Pnw�3��RtQ 35�8R������߽�� [�������̭\�B-s��QC{��0��w���Բ��xq���<����xG�Ǘ+��wIl9��~�a�<ЭMUn�����f"dYu�s����������[�@�'��{��ǭUc�� !���7@k�G�#]� �B�YP�$�����l『�|�:dg�"�s��q;u�&�hN�ܴg������ZV���`g���s`+��(�Q|.6�[��h�	8D�Oj��������g^,��bAk�|�[��>�7�;$d��˰�W�Ȁ^���~��OڝY��� �����f"��ބn8��$�'������.:2]Q�D�����(�h�7܊�~��F�R~%���MG�rM��'5u{��4\���pS\ԋx2�)r��zg�%w��fy�)�3�;}o�0��*�h|\��N����Rï7\��(�f��rV<�`H��{Y��N�PG������Ȣ#��q�]u/���Dr�f�Zl&{6�����56v]u3Tv��+4) ��`��.��'�GY�q_�k��2��M��"��+# ��v#���xbF�V���(�M6H;�u'�(Xw��(>cr}�w�%��~L�dmΤ�؊�d�&�A��c���>_Z�փ8*1�ŉ�8�YuT����/���c�g)�xq.�$E�}�C	�Zʡ����?�H9K?��X�G�Dq{FH��݇^S����	04�����E(��ʹrb�d;^kBJwkm��)�@���!�'9_�6��8G92��N�U��d��:Ia�*�6��j���a��&ӀF 6�bRo� ����҃o\��m����LRǏ-~����:�~!4��F�ѧS}o&�}F�@�6���0X�~x�L˳��9vݮC�w��,�y���?7R�H6����@�o�U�  ������z�ԯ����E <�oQ�GQ���?� {c����X��� л�O_��90i�E6��G����r�j����l25�َ��3�FzEP�D��F(*�]9�\��{X���g婣�#5�>��JWf�v��S�B�j0{�9��9��Q �iJ, <2��-F���'9���0���\c����` ���d����5ݣb��8a�e�Z����nv�i�ވ=Q3]+[Ѿ�b�v�位8��z��Kj�z�?J�Ns����̾��ʆ�J#� 'J&*lz�DH���ڗ���}y�vF�r�	Dk��Ha��I�1C��g�@�"[�	%X�@M��·����jMu�C�]�֞��t�����C|���W_� \4�3F{T�� ���G�=�!�!��P�|���Y�JĠ�G}-j��S8��I?��h=�]���g�X�s���W;>9	��*���H�d����Eߚ~�;kq�2��O��WA{�e��nv�)ʮPڮ�M=X�mMձu�F�-�Ne#֒���G�EWn�YZdl�-T��!�d췅���4��uR��5E��[� �a� ����C�i0BtA	���W�#d�8��,`D�g�g]p}%��[�>^Mb}Fs=96�䘪j��ā����#��Dj��܃Q���M�j��j�E�-�J�n2��T�����Rd��,AYRߗ���!�͖�أY�0�c.�\b�j�,u�H*]��D��[���~�Xo��kTG?>�/��ݹ��1��X�2������wޫ����@e�,2[�����!�����ڛ�C.�tZ�|ҩZۜ���dV�Y8�����n�q�����6?��������{����?Oq޻w����/�
C���ͷ��xq4>jh�Q��Q���\�F�H���e�CU>'�h֋��Hm�8���"o��)�qN@��������x���4S���} oBxV\wFf��C��V {}��y�3��=�f�QR"���`�>��&��CI7X��1��w�U��\XU�V̷��w�#��H�ď�0��)�MEi�τӖ���ҏ��B<�}�n�[Pپ�
6�LsQ��O??�t�����V)��]�p��V�,��K��!�V�I��.Bz�����t���þ6����ً���l�L�v+�t�ks+�>V�aP:{`�s󵯲�F76<<�n�^P�[��w)ߑ��:�����kX�B�]y�ގ���/�>���E����є�Tm�s�4�=�X��D�����d��|�讒y�>��,���
{��~G�!�o����-�;�Xz��7���9;�$��k�,��@rE���Cs"�ə����~)$�������t��Dv�!�؍�&�L�}Ė�)I�����>i~��+����R�=����QfZ�Ҥ>Md�2��s_̶r�O��+�.{X��@̥bMG��n����$�U��T�x�-����-���5�%~�̎<���J���q����1A:�>W���F�����X����-|t ������ ײ80�Ӯ�6�brr��#��d9�Yi*�1��Z�]Ώ�G����ÓgH�L�}�B�s��٦��z{����w{{L�Vc2�;'��|F�}V��q��Cd6\�r5wT�(6)w�QV����h�UޱM\|���xcs�	�z��t?`��p��X��7�C*��`�H�;?��D����΁>������}�dr{<� �31�|&�kr��w�O�ݯn\�����m��f���
�
D�[G�ϩ���hZ�`yך�+�=F&�@C�����yl�t�;Z:4=rV���P$�3�q��,��<.:�2X�Me����W��ۿn}L~�`������H�&(�����L��1��Y�������m��%��#�^����X�j-����]��ǳS'g;_��Vl�Y�d�jL����F�yI�������f"���8�yϙ4WM�y�胮:X.�I�#E.G[~Lv		�P)�]�X��7��lHw�p�`������]{:Tt�~p��p&�$}���O���s���3��?�ڰ�+�G�8�8�M�8$Q�[��)a�< P��_k�Ӥf�SL���#u����6�t�����'�r�������`��6�٪���s�TC�8\�f��=;N���z�s�~,���@��V��](i�6pBůC#q�Q�	��� ��V!o��,��omEe�je��B�?��}p����OMC�c!�l4�WD�폇F��v>�;�a�_,Q/�qL�֎��Q����������������=dq���[\0�I����F>���(��i��xy*��)�+�ە�>��L/��JZ�ֱ�B��iG���+�'�.E�_G�A�(�y��ݹ�[�+T���j�j`9n���p�H��o]�Nɵ����y�@��wSf9a�C0�,b#R��D��Њ��kb�ICV�Н���-��X��ob<@�\���}U ���8�\���Sj6�q�,>�]� ��;m�.b������H��x�LyO(@��V�02u�p�,X'e��N�y�����e�e��4x'R�r����c ��7�5 W���K�B/{ӂp�\R:(�8�G�]k��XH
�2�h�G{K��M�8�sl��kW]t��=�	۔�Ȃ�o��蠏F���59!��=�:~*�k���~e�+����ޣ��p��(N?�g�`bj�lf�������8�f�֜0�,�׻)9�IZ)�R4`���*Gd2v�x��L�Ј}� ���l�/g �8�}��ʣm߸Kt9�H�_�����8�>�y��ϰܓ<�s�>�1�T��1 r~��P
��%���<��� �̗�"���7e�p�I��{	w@���Ow��y�{0�p�PW	��><�]��kD&�A/�>�h���  �5���_2Z�㯇A���:���暇UJr�H�s��g��X��YG��u��&A�N���ڮ�[�0T|	�W��);������3ټEI�/�(��Jr>��~Ȭ���O|ȣ~]p��������
W��nu(�uQb9�GM��>�:S�:9	���s�7{`Ra���w��?��3����0P����i<�;M���f��v<S$�l��N	z�;���ᖶ��T�L��a��*�͒�RzYV��,%ו6
H��0����
�ꉿ&o_��-7��=�/2�OJ� ;�\��:��� �N�s�*d��58h�+j���C0J63^�C����v����:�7K��_�U�H�U�6Y-������S��^5(��%�X�ld���0P��	��x#U�m�ڿ1ڠ�(���G)��j�v�2��#rʦ�!u)�(P��بՐ�+U��n���L��n�0�nV��-���)�H;i����S��y���(I��(u7�gH�5E7��i7�u�O �E���TK�,(H�[\�B4vƩblI}5���ę3+:V�Y[J�K+�Rw�E3��M���Sr|�?��vX����G������#�T��Ɏ�-?��}M�p-��uY���$��J��Ę����\���W,m;ي���1G��GO*���l!̋��Xq����6u%�}<.8�
��H{��t���a��P� �4ʀV���Z4#ş�8Ɓ�x�398+���j��r��pk9�~�7��e�`�v����PW��T3����h��H^!�7I���i;���+jBM�ץ��l3*�m������n�@1���I?�=�p���bc�p�)�q�`���K�φ���i_vz�?��{q�/S�R�b��O��U�t��[X�P�`eMO�<�EiO��k|���:�d*���ꇛ��5D���_ ��
�]y�7�A9tog��t�Z�t{�N�Y��O5R:]m慼=�k�K�G�:�,�����r'=`lΜ��`v:,9�\����bx���JB���z7� ��_r��~��/���*��I����H=P� � A xc; �WO��0_ �SG�s&�h�4��[g%rV�wotξ��-�~�f�wq.�g��~,�~x�S�>_����)U���H�\6�q�9�>Er���zG�@6�-.Ñ*�f�a�*B�5ˤ���sI�]�-����J���t��Xw�TYTXQ��7H�9U�")i���S���xP&���+ v��q��|V�F���oǥ�����!�7O����k��a���x���D !��?�c���Jțn��f �屲)r<ϖ���g����Jt�˘>��a:s��bǣ�ۭ�#�֑�A��Y\M�#j��-k�<x���Н5��A�X�H��,�PO�r�-�[u�7�n@�R�	=���������=<���X�*J��\ET������.����r�+��$�,Ϙ���߶� �%(+��߳ҡ�g,*�8k�����#�xR+fx�=DZpA/�--u��~�!�B�n�[�6�t�)WJd�ڒ�:��_����},D�����i+����y���i*�W�����P㿁�&B�eq-���SP�O�Z�?�V$�s��%�:�b9�5ʚ���N����.�,�	S��c��cEq
�31����a�� yW��e�o\�vS篈q�~��p?�����@8��8��9Y��da�2EZG���Jy�x�8��s���di�#���tī�̍�Y$�����9m��������%���{F�G��;���I��Ou�O	�o��Y�6ぢ�i5��iw=��Xފ�ce ���<qMr/N�#b�
~��{��;�Dq����\Q�94v_艇��W��Y�Ƹ�����}j��7M�B�tT)�I66!k:%A�afY;��2r��c�3�w�Z��N7�	�:�|cƔ���iM�eo��~K7	+7�i.�����������x����K��u9W�~�E�_��{�j���-�]O�g�?'�\�0��OxxbӶ9�Tc�������m)[cd��D�Y���-&���.1nS���\q�>$��c�&�[~7�X}ז��AM�vo��x��/�z��;}��d�Z2����<����u8���]�ӆ4����Ub`k�k����:x=��x��?u�hj�np�J�} -���MD�av�M˼2����.=�� 6��a�즃�CHN�����(Q��j��L�6�q��@D�nc*����4������]�h,�7���?�߯ؖ�}�k=t��}F������d��9C"|^�^k��{Ц��<���n���C<G�hJ��.^���I$�귷��U*�#�p�j%2�o:H�6c.�l�q������[�<R�����n��#�����PBs���5Nϗ��Հ�m$��]����Jf�	kv'�,�E�#=��R���0��q�^�Hod�̠�x��L�[�#]6��:4�O�U7��(o��p�AS�r�PZ�tIaCl��ۣ�na�5o��-ˋÁ��*��+�o������%� N���.���4d��:N�n�Tr��-�K�`������.��|ݟP��^Q��+3tA#8J~����N+lz�ե/�-5,��y�_�����/�9��s�Φ��{|��X��@�yg�"�v��#o�1�C�8u��1�V�>hp���!�Ƙ|����w�s�gjU麽Vڊ�1�-'�p�'�3�f��Bs�U��\Lg�~g�<��ǧ������G����3t⭱芆���-�,7��4���Vz�k����.�?~�߳颟�1�	\F�RK���	RR��$p{}�O��i���R���-�.Em.^Ϥ�4� �Yo>��Yz��Y@P&�6�zp��1�W?q_W�Y~p&�fߢi0�{�4������2�����\�
�Y��ok�|q��ǽė���S��a���S����S�y[AV�x���T�=�0g�2��˴e���2��H�+v4��vz�o@���<�E�]2�l7���	�)����uEqc&��۹4/���,Z�RIr��s|j�Ո;�`(T�����
�_�z�J<�eji�E4!����9���c�x�G�1�uC'�u�$�ǅ���>)�~��?�o6��9��3��(t͉ T���о'�<s���0���$<7�vwBl�yMc�o3,9����UNL~��v��$2pC�r$л�;	f{���+�!1ΜϢ�\����b�=e؃�B��5E�$����X������4-6��:MZ�vl����!f�H��8�T���k;d�8�v,۽cQ6��>�m�g����vY�N�V��ַ��r�Ò�.����{S�����/`E����	i��Є�Q& �B��Φ�Kj��1�������*�׭�T�fR!��c���%�Ї��cIv�M�:O��ω�Mю��N`
��c�W�	�'�-�xMs��hw����9�w�؂R�z8��ۙ��j!&��p���-cˬ<��� ��S��=b#��P8R*8ƻ�N�����$�F^����g�����P���%ЃP��X�35�6�\��RE�q�O��확��*"Q�h�·R�L����F�V�h�::���l89�B���e�jx@z�����q�'���iǠ�tGǴ���͏>�uA�H�8b��F9��=_ I��}K�ц����Hh��bDnc���ɜ��������[�?Xڨ ��!���J"h�0(���.�u!����T��KӮ���9S�O͚v��n)u��W]�@.���.���'���ŷX��Vh8�b��uS�6B!Ѭ=�c���fjwK'��K��4�'�\vE���)HC}�L�Ƕ@��U���ŝ�n�#����l~Q~_Ӕ���(�=x���-�|wt#d�!�Z-��B����~~L(��H0fe>j�x�ա��Z�1�5�>1�J�|�����~���H^<l��x���Ꙥ>���q�SW����V<ȯ6�p���#�
�^�jl0�.�}e�_�y;U���]�Y՝R�9��{)ѝu\�H�K?bc_�t��}m`_���*̞�1]����'�u�X?�z�5��g�*\�x��&�5Zز]���U+_Ibw;v�l�d��2�Dx�8��[���܎�h���̱N,��C�+x�G6���:�����b ���`��V��׏���s��y��Tem����]�f*���KnA�2��,��ɬ��Zٮ�����F��6������1T򋮇�7��cݫ��b� �vz��=�1���E�Č�:�G��>�eȘ��D貓%�y���l�r�u�V	Z��u����h��rƚ��fsy�fܼ?�Ut�$���wm{bǔ�E���y���L�ax���ny5�`A$�g�>�}!����R9�W	´%�h(�*��X�t��j��fݸ�V�fJ���x��i�t���*����t���
K���7V���o��h6F�-�����J��:Zc��	��@�Ή �7��c�	��ؖ�:DkT��e{��zX�;�-QnU�ypp%d�������/Im�'�m-zJ8Z���!��4F��O\O˚)�[��W���3����8�D<,a�X���;ɩq�6�g,��,Ы�x�����R��@��{J��t�ml��OD�zw6E��tg���u��c����s�`Rrf辌�.�B��H����h��갈7��t8��d����������t)�>�|�m[a� ̴����,ؓhc�l8�#�b)��#5G�<����r0�����R�Vs��i����������\\��1�?k�΃��)�hD̄~uX��?�wk�P(�z#���>�Bi�.���h�G�0K44��[���$ܢ>-�*���D�ہ5�:�q �8@|k�Ǹ2���-��c����e��F^s��q������>^�O0���.�&D��
hl8)���W���(�t�j��(�[nG�pn��-�SY��.�#(�@��d��8��T�e���dE
�̞��8�@�`SKy�B���T��Y�~Y���248೘쳟(X��g�S_�/G�8`�����4�����l�'w�.�L|�;`n}�D�.Ry���s��#�W�N���SgƂ�:Pq��4��!P;�F��#��/X:�H'uo�i<|�6"Ո�j~:� [�����z*'4��7X����_o�p��%��ﰲ�I������\�w뽸����+=�	����\|����ۯ��m`W7��ӿ0��:�8]�sߎ�Q����zҝvz�&�aj���f�ޡ����D�=����Uq�=��攌	],M:�[��+�����d5L:˲���y�b�ը�%�C;�v��|}`rT~���ﰁ�Ù�m2{}����)�vO�.�?�ݣ#הv  ��iCL��p�hn�};j�7�Jy��a#�}zJV(�|�\vٮ��a�D'�9�
d?F��GGM���y#O~���D�z�]�2L?�������:����<�����g�������W��\�����M����(�'UJ`��0\oD/�F4��i��;����|�|�7��}Y%y��	(2i)>�g"�>���=h;�?�;�w����gh��+{4�Nބ�����3����,���,�����e2�Ā�'g��-�y �5hf����>;�yk����50ghkW��V����|�f�
rNM�i��O-qi�rY:0��2N��ά�'I~���xHi*��@/�\h���w��b6�f�b��9�i"�=m��-[�zX�ӷ�[��^'J�=<]:�ұ� ����9=OYð�b'ŧ5��j/8)���/��5�����^���6���l���d�{?�S�ܔ�1T��u4���u�+�AK��)�z�J?=���U�"?����X�q�:?��z�b=���W�F�C~y6@D<S��i̔u��<7�ͼ��<[�#5^3d@(�u�~�j���f-��cޛ��T*fFy)�S�{����R���1K^h�����:N�y�m�հ��[�=w�V�x�~��A����`��=Cأ\5FXb��hc���璋�S�e�S1�&q�/4Sf$pj�;���9ә�0d+L
l9b�-w�I8x���5I�~R�0�?���>ץ�G���*k���������g���"����Y���_�f��ҝn��)�+Z҉I�!��ڄ?�N��+�*o����]hP,�v�-����ldS*�-�r¢�&�gP���@fj�q�2��޿�)����ln���!p��iT�l���}0Y����鐇V����O�����瞀��ˍ9�b@��x��G��-$ZN�ɀ�
������O,��}amA��]�����(������ކ@[������	���q��]3��h6e�]~��G9k�{����"N�1��6)>�݁����V��@�2]u��P�ؠ���a� uO zD�L�|�����!� L`�ŤqD)�@ځ�o'aK��L>N�jd�'ZV7�vJ��hi��ʑ�P�( �I�뺪���1��y���)+�K�=���� �)ݕ�|#5�6�u�
k�N�ȁ�d_�ӓhe4��ZI��g[�k�.�����.)Ƒd��Z����'���,�������<f<&�.&q����V��E�~u]�p�=5����������⽓g���;�����;�A4��k��ʅӿ�׊����%߽�}���|8�f� i�	�	'��!�ch�]$�b���g�#�!H���b)*��e�KP w�Ř+
����'L��SWg̤a�/EU##�\�$X�ˑ�'��1x�;'bMʵ@m���r�6�$�L}QӦA�0�'q�2����SN�.�ᰫ���Z�Ym
g�b4������b\�ֳ�>E'��Ȥ�C���q���a;�ZjA5�Gn|$����(�s���a Z p�l�l-�0�����/�5�D@��gf1=?����"����/ߧ�d@��ϰ����EsSX{��Ͱx��K�x�SM:��M�x�cC�K��I;>%�ik�����퐎���֙�����jb�xj�4�;�p��|�}.L.@��Vk�o�ٔ�a�p��0��ڨ'�i��nZ˰*f%N�M���ynX�5fj1� ��n�)^�Ϣ��Z�	���Pyp#ډ:,�%��P!��ͧ!��>i.�c��g������\�_L���h��Eh}���6;�jx��J�z���Z�t����䁭���A<����_�.�'m���R�$��nk�Sd��$ꏏ�����׺�2|����^��{ �q4�}��F��a�M[5�l�2�Ʒ3�aD�JpV`�"�j�{�f=�5�\�@�NفiF�~O:ka/��T�
�Z���W�B�+�@����a����#�:��J�{�2�&�<�h+~�6��(���`6(���Ul10�n�s�j�vy���`/hV�$p�<<9�	IQ#��bQ"�(̾�)젝:�Y����Jf��Y���8���ΨI�Rq|����J���#�s��:���qJj��mc��x7�~0t����8��T(��;(��^ԛ8��aΦ�Ӏ?z{N�E#��V��p.g��[��z���q��@��Ӝ��\�y}ص��y�7�ک:���EQ�}w:2��Z�}%Y;=�& �:��#+�~�Z���<dp4�YOVz�|t�mQRe|��h��{ȝ�=C�����,D���# �{D8�:f��89��=鑈�"t<�^/�p�}��^��E�\dɾJ	�ڈ:AV�d4��ۋĂ������Æv�:����)���/�}`@:l��f�QN�]2�s����3� ���&W�՜�FjU�I?��e�Ɲ!�lŔ�Z��3�ƴ�~�dN/Y�v�S3}5�W��v0�n�fJ�Ӎ�E�x���*���U��"&�;���k�j��d�-����3`�2�D�*��x��>_�i��B>��*mƭl�L�=+�'��?��!�;I9�e±��^{�"�2�66mw�c�Y^��<Ne<�ȿU�4u�`G�_x�?ܧ���c�H�;��hy��8x����Ȍ���~	Π�Su��H\kp��%�;� ���J���|�Ձ�h�03��(�#�]��H�Jpz��揳���7���~EJ����x�^���wg�@c4�!��QB��ɣ{������;��qͨ.#����`�pУU6@���hW���JBf3}����i#��wVC5���y�c�P�Y�E���A��p@�هc�;��ԩܿ���'����l� �3:����W=A�H��#����i Y�}/0γƑܙ��zLnfՌ�R���.���T���x��i5�w�r?��^��h
l�^�����N���������&wm���>n�@�sn���OW;��o�R��A���������H:-7R���g�Z�ߠc����SPm�����R�)ǵ�p��q*�0#��*�O/���;���ˁ8�,"w|<��5��J���m�V�����x[�R�s,��hvl��_"��A{n=���mj<�౛�3�=N�l�\��4��b��Stxl4�u*��ʪX��P)���? Cl�
u�hK6�Ia�����V-j��'̙�R.�� �3w�{�6n���>}�?��[�\\R����?Z�k�������,��?����1`̇��s�<���{u&�w��ѩ��(��,@u�nU���_��O?2�8?J���������{Y�}������=�O��<n��ux��Y�����X������Ӳ"��<~M�Sg3ہ������4��=���Vg�i�ff�����:����_
N���ڛ~o.`g�5Ηu\�A�ad�#�n�܋y��u�	h>�޳U$�x�'!R�+y�ΐaul��?_�`8����l?Y(�ţ�|��j@.�Z���AP1�Y�s��iu��C��e�9�@��D���A�ثk��ܳ&<��ΝABjn����1u̓��sY�jc�,(�Τh�Nn}��~*�6Q1�S�\�Z���jb�˓��y!��v-/\O�{H���k�յ�U��zqt��Ѻ�>h<zj��ЩQ� >OV~F&x���Xn ĚJ�cW �{"��J�F���ijtW,��(�_��ϒߚ�d���N� =#�T�d�RXS����3�NS�|�&h� 0��I��	�`Lw���@%�")@��Sz�S�������cM	��c������M7�/��>��s��g����ȝ]z��|wz9��@���>~��{��N7�4jW�.;��m��P�����N^�i�3a'� s�J���|�^��#0��{��Q�f�:�D��K4sp8Z.nҊ4MGe�i�gf��';v+	�����UԤ%(�VU������ C�E�3���J�����ϛ�|*O�5� �?$'<��c$�9yo�k��>����]X��z[�,����l�:W�V���l}Xt�9H3bt�:H�t�������!!Q��E7�L�)<k,E�O������<CTI������(�G������~�B������~oa9=��Ϻ��b�_��9��Lǔ(����i�mw"�"��3�_0����ݞ��M&ww�\f���<p���wZ�G�!B�S�����W&ᔤ3��-��du��&���niQ����^�d�(��~���nn�#ŗ@ؼ�B���B�'���^�R�nw������M��d?&�|~��"����	?���R��g!���S�Y�tYZc J�j���3��
}��ӺW��-!M��6�%���A3ٲ�ʺn����W���G���u'H�e�/��c�d�l������j��z���l�g�{��5����p��[���6�ޤ�'[N���H��h�3��k�y�0��9T�!#���<.��h�O���D�^�5��-#�T;'�����̃�J����D@O� ��p������`���� �Z����A��@g�~ąk�]��,VF>�[Hm�|��vY���vI�-��=5��=��T���Aq�^Dcz��h�����ͦ��.�"@������,r��/��g�g�m�#蛧��"D)�XV�|�K�U�}�����[[���A<�d�,���8�zaS��ȉ�d�+�� v�T���5��S��.A�V�iy���zR�9_D�-�������s��&<s�/���@N �q���N��4�Q�丮�a��O�H�ǧ�
�A,�Ϊ�Ed�B8�G��)ۓ6G��&�������d��ʺ�R��nu,bS_+j{�:-�d��)��"B�¬ߏ�7t��y*~!����Ch��A���	���v>��&_{���G򒮦��L[ѱ��=5Uf�
�r�k���ۂ�5�n���v��R�'=�'V�+�U[@�;Fn���ˁ�3F�Ih7�h�Z��xϼ�U�8��pѠ �U6G{����4���e<���5�o���d<��f�������C*�"l{4���]�q&t�{j�i���a����r�?�F#=]/����!��W���3�+F�kC�@��E�ެ���� o��ש��̷�����:Ύ)fK,28�#\,�l�Jv������X�r+�/D������^�?Y�aE-�0wc,��_�5�����ːw�ŋ�����79�~x�39?�ۚ�����</��F�@�ȝ���3-���8�z�A��;P��f=0�oP��+Tu�(;:���G�gǞZP�~�BPߧ�Eĥ"_%�.�e��u�MB����\�q���߿QQMP�(�<I���<W;�T� @�m��0�	Ɖ�* �Z$��L���NbH�i�0���s��c�:�lzv�Ւ��zhX�nJ�6�Ah�$w>;Q�
z�hn;-��8�І
T��������?�M!���]H����5ׄ����@�] k���Λ���z��F ����gr_��ڍY�0䅻�uܠ�����[���L��ʝu;����(�$C��c?�Vh�4?-���i��Hp�bB�9E�=�HV8��@;��O����t��^��� 7�Q�1��:O�ދϪ������A��n����K�������;�2<��C~�Q,��r����H�jD,����H��b���)݌��8�������i������x�g��a�W�W ����"ĢP��>��1��U��j�bN������y�Y�noПK:i�iŭǞr˺v9X��a�U#�E���Q�ohq�J@a4�Y�F�pAu��'��O�lX}�1{N�{Ք*g��(�Z~8���l���C�u9�����"`�zg��*�s�u���O>B�Y]W�+�hK��hJH�UZ%�
7v<��d�������
s���Ƙ{H�|�C��I$7�X�+� 4:���X�< ��U��~�kCڢ�ކ	i<�@F1�m�V�(&��,d)��~a���Y�}-��E��3�슗"�;v��':>���*`@kF����)�M���Y�)��ֶMt_����@�a5*N�o���Ƴ�ON�*a;C$_�?�^;~�* 9��ZG�aȔ���sn�֎ @�`q���F+J�.:j����(����Y
Ǟ�mD/��Cu?/ǭ�Al�՚��ᢒCy3�ys��QǠ����ڰ2�i��g����{#��x���uT��gҞ�N�n����nߏ6c􈨚�L�%�l8��wil|ҧ-Ra��\�f�.],�݁�j�����QO|p�ڷ��:�����b}Ϧ
�"��̯����b��^6�ufr��:U�\V��HFw���/�\n.#��QzT��b� R��Ka
�C/��;2eg� ���G;�^~�x�����+ak���}/� � :�8�	[�=C5���o�n`!��Ϩ%��ɘ0�FV@��n���4������5��t����\Ar���zN�#�;�@t�h1�E�÷V�8S8��0�3q$��N����Z��!m������94�5���9V�e3p=b��hjQ�. �Ml�� _�d&�[B�������i⽃�mR���B����@�5�͋D�������f��3���&����=[=�ݽm���&X��PAqxk:�NY��{��w��+���;�i7t�-sLݶ��2���^�pר^j�m7���)_d`"u���#-[S��Z�����ש>��@j%P�N��r�?��F�����' ,�?��p4����Q"<lצ 3��f�V}'d��Xl��qHl�>Sj=y:_��A8fj!Aa���K{�S9�0xe��2ʉ~ld���&��Pc���V��D�j��K�N'���a�	:��_{40̠���eP߭GB^=p�FɥeR�w����I̥q�%��\���݈��R�A��{��n� ��s�I��s(����ѭ��A�>�N��C��It���*�J����kH��)D7v�2���n�g&��xp(q��t1��L;��Ij�`k9���~h�=yFMWEe	N��i�l=,����^O�vۆj��,6��8�{ƹ���5V~��eyt��ʅ r�[�l���+eO�&/ql������* &�N�;���]nH����PHP�f|��tz�Ҳ�`z�U�����ݯ���-ʿ��b�����{^�&�C7[��LbWQ*=��vYGW�o�I����,R���2!�f��#��D昜ʩ?k�Ғ�p�r���s}����r��_���_��Ƌ�K��I����n���A��/jߨ��e����ȱ��2�O���F�(�!U��n/`���)Q��C�DX��dx�l�G;��A�	����+�f�+Y�'m�x}+>CKp�3'����A	�̂�'�	HA�ʖ؊�!��Bߵ�M���p̃()�n�f�4%"v�ࡦRGL7W�����GymY�{~�����c�`��Db��<`�!�'�'<�غ����M�@7���(�r�uN�/t��U�V��*�������ƾ5��Ʋ�[5?h�q���°5����돮}���$|~�God�6�b��6��y�_�k�'q@H@F��ƻZ`�}��������M��Q��&�KU�sg�z�p$q����Hf3!K��	�da[
b�`��'l�燽�7�_�������1�V�_w`���v(��@��W���
��2H��	^%�yP��I�)�����Z���{�?�vG�9�LY�l����Z��ge=����Kɚ���������ҁdx�IK%f
zG��b[��R���#T��޽ �'?b����}K������o�i�O ����_���i�׭}�E�ݰG?iZ*���p�y�U����Iƫ���;�C���lv��/�"���b��� Q������2Ui���v�-�u��l��Ps�l�j;���~��`?8NG��_I�N�{p$5p�u��3���W�ͅd�sK��2j_��߈�K��t��w��ˬCw�s�gś&�!=����t3b|~�|h��Fҥd�jH�a9����=��������F��Ui�$&�AI�R5�Y���å5g����{�XFò�G�#�<1�B��l�R���x-#&���JV�ļp���o���ݦi����F�ZΏm�� �R�c�Z�h՟��e��w��_l�{ʭ���������&-w J�9����tl�Rcv���P���%d�s��*<�Nk��@B�`���I�����:�����-�k�e�@������խ�H�������K��J���7	t%e�Kx�:�����=�]v7��,e�o'�ҝ��Y7;�rE��|���@,��4�?�V�v����w(���-m0�����l驀��p=̈%���H��\�F��6��.>#6U�>��Rf��U>K�@|{��lk�X`X�/��5�?��pp�Ed��gP�p�vn������S?��-���	�A}!_8�s��n�|{�VC�{Y�;�tQWK��l7�(.�~�s��5�Vb�ͪ�!ef�P}.��&%B�:<�j�0ߔ4;۸��v/��L f �(k�э���{�No�h	�/��m�����w��*d�w͈-j�_.���W왆�G��·څF �
��{P��#��%`.Z�qn��5ώ���s�ahr�}����4Й�<='�Vp�_2<Gu�z��Qn�G�@,+�F�,߮BN%}���]�7��CX�m�XC%u�S�C���'�ף-~��K��)p2��"������@��8/���5B�`6����fs���`H��=��:����2��ʄ0[i(v�k&<A��n�íD��3�G��ñ*e�dxMBl�0_]�:��F^6`��l�K�3���~��#��H��7�#��������҂�y̯&"5*���'���b�s�>��Q�(+���b�Ν=���MXs�s�!=���֟e���L,��M/�EC��@�r�/o=��!�.V�x���.8����x�%##�w8w4��lT
<:�LBK��!]ͤ?�)o��+
v�9��FS�Pu�S\��Í�<V�N�~���sR�9�d:�Q:�Bo{V"�YX�9L�=����6���C�4�c�c�Y��d�r�o(*�OQ�������.3p����c�`��j�{j���?����{U�.$������{t&�99d��moi��4*������(_����q���r�� ��� �l���2�N$�LE��F1�ٟn�0U,L�\qg�_~�s�V��2�����o��J�cg�ztmp��FU�?�.��V{��oLA�`��{1G�ήdz�zNWiӔ�<�'��"%({'fl,�j�y?ݟ=��r]���%p=�Z��� �K�""$��L�j���#��Su��Q!���&b~���v�|]eO���3r��]�d�Bk0*�Li34�B��l��N֜+!��5�`�o����k�my��~ �gϸH��;�z�pgr-/���SB�~"��Pf��U�p�0M\ױq^����] rO_�+;Z�;��IIf1ZtwB-�Q�P�pmmDӸɦ�Fa�4#���[t�f��E4�
��8(ߺ'da��uN�݁q�'�N��'Kć��������q���<^�bp�Pv��i��dd�̑�W{�XZ�|mc��	/��>4�\�̞��Ǜǳ=�b?���ʲq�����-��w�4����VNĚ0�j��7��! �A �}�I�E����[�G���R�����d������9�Hv��%��a1��s�JY7���m֐l�n^����&R�(�H8�0q��+���c(%�0N ó�F�)5���\�6ogbV����':f�ǃ16塖x��p��s����?m�u�'_qެ��s���d���֑��_��d^�m�C1x�keQ��ީ�(�Ň�Yp�u��a�a��vm�@ީʀ��ח�0c�e®��3v��^�L��گ���MK�{f�N�����k:�;="��"ާ:j��t���S�uXF�Q���u���ٹ >��T�&��Z,�ҫ��kZ���}����5��y�
����U���n��>ʝ�D\a�pߓ���H�u�:�hH���,t��'˃^�Aԕ�G��h����e5dړ�s>|����*�x����lٍ�������a�'�1��;�"�'���P�,��`q�xI�Ym��9b=$EN|z�b�	 w��d�p�����O�n�I�2��-N�������İ)�~���0�-��tA-DMam�+�BX����Rq*2��h>����N�n��D��iTZ�l�V1��(��쌮�h��a��ǔ�c�3��/���ݖ��J�v�_{K
�RyP��)��RRj�w�!U��G����[qB�a�Բ[/&������l���y. 0�Y&8R�#���6Cph�	[�8��c�ص��l�n�7�%�U��g���dk��d���O5�X�1��ޖ�W�t<p*�c�r���LN, �L�bx�x���ʹ�O�ق��Zs���i ����&*w����� �'��Z9�~+��f��VM�u�y�Z0Q��a��(+�S�_d5V���A�e�� �����q��5O�H���pb��зG�ʏٟ�?���d�/"�wz�j��/$	��$m p��Af�ߊl�*�����NҶk�X�bL�ƌ������LҶt,b�%sf�g��lb���l�[���eɰP���l�Q��:��1������pG�����`{�X	�Z�57�Z儆����dQ�X�f	��3@j���@��Ȗ�OI�������͈�Q�\��V�d)�쓿|������#���|�ڰ#�����+/XM�_(�h���ǳ] �-|����^X�Ȇ5� _-�~����k$*0�D�:I�P�3w6�%�k{���	w�~^��ȯX�y|�}�a�����b3kGȣ���࢙`#�b�*@��ٯ�)Q�0�#�p����"Nl*�/�U�����"�%T�`�jĭ��?Q��s�G���@�a~ �@���1�!y�R��nW���A�u�bB</�A��p�ט�Y�[`�&��,��G��2��0�4?L��_�'� �GPQ�U��AE���7���P�����!§K̡x�A|vՓr V��J��P�4�����,p�*Js��Ĕ!�lQ�.���O�u5%��Ϥs=_=�z~�
+�t�}%�r?�Q@R����'�2�M�钜}|�!x��@m"�V�}�	4�>'G߯��߼��!����y�*�W[������w���n*�v��n����e75���xF�i>�|1�˔�G�� (�/!g��Q�����ۊ��^�Ni�X�14�����������cs~��v?����7q�_�T��#���_g���4��J�������Ů�d��8����E�p[ۿ����|����|��z�A�ߤ��~���go-���r=�}P��f��+����v�+����o��a��|��͊<�f����
R���ґEP~�뉅�z�Xe�7�5H@Z�%>���x��u��Ԧ�iD0��x�[���������m�r�����2ns?���Z����k�;�f�ä���ZZ߯��o��!�f[Zg�D���?eD���v���	�>�dz]�m�(�p\V02��ٖ�a=>O đ]��ΰ�8���n��:>g6��IxY�{�0��lc�/���l�Uo���nZ��"�l�^O�֥1�(�(���^U�T��T��~x����tЕU�[��ӵ���M���@|���N���7�c4J�펆BP�[�3���d#��,׬a�gh����jͤ�A��l�t�q �|BCc�Vb��[ڻ]��p��.G�j���g���?�����u���__e�V��U�7#Ioa��]P��/���:Jp���U��n<7mG�\��@�/����T��fK�YA����,l'�)���/�\��b�@����*>�0�炙8i9��>u��Q�;Y^�bk-1�al���p_���������d����طc�y�Z�~{�X�~H�	�������*��z��){_�ezG������W�������{ܟ&�����y�$�`pw%���f����$��7�9A�3j>�e'v�S03v���^�)������cm�s���/o����F��������i�LńŤ^)�qJ�T8:��b��2��?+����.泤�:�X�#j5^;��ә~д>y����`��,2-��C��:���ͨ�2�R�۟-H���3\`�C4T�t�+q�����$�8W�=�:�V������\{��9y{R��C|����=�\�5:��Ò7.Miw��d����p)�m���>{N�CmF�F���Kw%�~�:�囵���O~�xmS�;��u|�_�>��a�ng� ���:;�N�Y��F�p�ه�N�Op�wn�w<?uc?�=ӦG��em��?`x�3u�F��o=��Rn��a2��d�&3N��]e�L�#���;3�˥Ψ�k+Hn��A/�غw>K�i�-2��7!�nvI��J7ϴ�a߿��a�A�޸G?{��ue�����OZz�������C�<[�A%^^ �,����f�����Dn!-I0�P۞�p�(��T�����H�)Jq�2�~o���*�&��Q4���W�ٸ��"���)���ˎ�a�/�\�E�r|؊�� �%��j��� ���Û�
���
�.���������f�7[����m��w����Ż�ǳ�k��m;��v@��1@���r��Yp]Y�8�ŷ�&������%�!"�|4��h�ȃM��2=��6;���I_؉Vwlh�@�T���>���w��R��n��du�>?�Յ���'�r{���1�q���m�ΈaG
�dM`���:��f�,�כ.g�Aw�F"b��_��U�ϏCg"TO�Z7\��\M�����B���W��JM�tߘ{ʫj��f9������g��U7F[jvX���I�}I���h�1�0�U��
����y�fύ���u�u_4;��������Y��������om����mcu���[ku��m���L����l��ȷ��6��sYf�M�% ���Y�`�a=E'�$-A�8�\j��t�|������yY�o�{�o��Z"AfeB!V>�5F�nc��+��ƅ�(�bw*���E��Tl�rtѢ���ТWռB��|Ww�xvDi�q�+v_v�<�V>���0�^kc���En���6F���ٺ�������K��j[�I�J���z֗K�3Cf����e���9#q��:8�����ұ�i���&�R94���Ϭ���g*}5+_(~��4�����2�����}�+����	������@�-���T�U;����4v�wڤ�e�RXu��fJ"Q�i�'4����<JF�?ۮ�Q��9�jgota��~�hfC�{߬@W
�tũ*=Q"�a�L�̷`�bY&�E{e��_��`㌵���z�;Y=�ؖ�ٲ���Ӊ،��JWI���κm6��o�h���_�q���:jW�;7����y��/���wo����uOcwO�+޸� zwʂLe�,�CJ�7!��Q�M�ȅL��Q�v�8�sɜ��Ψr�E�c���.����	5[�`ܾ��������qw�=a���BOG0I�;��~{ƿ�|RP�2 $b���jV�NQ-�.b��N���k�]�;���:��l�8Ma5�)!dHk),����g6�U~rq��:_��s�ƉN�W���u�|I�&�mW��~��l�s���� ��X�^��#�_�'�P�DQ��ŽWͼ5a��p}$�AqT�s�7G�Ab��[�������>�s��r���@�{��e����,�!�S�G}Jݎ�����6��q_y����%�C���c[��������ϡ�n/_�x�����D���!�̎����Q�F(��iC�/��*�����RaW���Z�\���q�>k:��-���������S'Ӝ�T�=zVŧ����,v Y�)��'��v8rY�}����~���A���i)~�$�<��b(���,xE�	Y��b���yH�S�ڜ�K���vpN�|����z	�.�LI�.e�N�L�z!�䖗�
������ڥ�!=M�n~M���W�I��� oC@��P�;��-&�����k^̠�c"=F�Z*�2Q��0�y���E_C��l�[�ѭ�ax��J�I�JU
c���ыI�g��E�1��B"����!����n+���}#��
�^�MЯ�W�רc���j��߆cg� �#A��4Y`�3]�V���XW�p��Ei��T��:;��ȓ"apQ��\F��E�t�����>10�*6/�_�~��W�{Rt�������
b������������G �����^�*��gS�_�P�>��D)EL�����)������(�}]�s%��W�'f�����x��#z�
��S�K� ���5��{���<@\��/��G�W�w!	"�� /����V�q�<o���;����u���!��H6�Ny���1{��[d�s/U���\��n��#9�ͮG��.�V;��ҝ�}�^]�w��L_>��W9��//�����~�s���5�}�s_�CvO�+t[�%���=-�����~���Β)Z>ˮ��i_��LY�dQ��}/+�!Y��E�����8~�Nנ&�܉|���}}B����۰1s�����S�4��>���A�=E�˽ӱ�4�M9;v�e�r�T���'���؛��y�G
&Ǿ�e��x����?ӓ&��s�]����/��4��o������.�%tP�6���9 �'���n�gz����D�c�Z�� Yv*���T�	�^��&�;�N(��
���wN�EI�y��I����o�l��r��^��8� ��P���<_:�-.� Fv��yJ�R�,`�ы�'��k	0�u�7ۅ��1�g��L(����w#+�rW�d�U��,r���w+��8��*��*��@���;��^Y���HM	�O��·�eƝ��7cͣ#��[���Yf8o�� T?)��6�]a�!��)���q�P)�N		c@^��!ׁ���a�E�q?}�?H�ͦ�^�mA�� w�p�� ���i4H�}h�Xg�\D|����n��ǌ�=� ���tb���$8(�������]ak�z�ΐ�X����8����������P��\<���|����C�u.z�2ff��>�9���*AO�UO)�P�������&
���1�$E/��f���#^.�\L�}�21:�G�:��'������*�w���M�R6�2���M%Ʒ��0�Z�� �dv�w�Noٯ$�,�u��4�M'�\�H���E��a���O��X�Fws�J!$��T��Z�Y�;��-�����Y��6��[N�]�4J#����0�O���G��8X�igf;(�"[����qO���A��ylx���%B�$��M{�}����_b���M�o˦�c��jv~	��锗����_d�Ź,������Q^;`4M��P؝��8�Ԃ��pÕ�fñ�b4ct��E��B���IBm�-��tSE�Uh����?���k_YowC�{��s�����E����4>�]�ff*/v7��[�wd1H;q����]��������UJO{�9�-��c���^��*].~�_݊b�U�<3͙�Sp�Yie����{�,�C�[g▽��(��wP�3����qCe���{T�e�_WzYw�59���X*�P���;���c�$�˯�\[|�?笠��~q�kN��ؔS��n|��&Q_�f(yr��:c��+̃9��J/rf��<:�)HsnΗ�/�R����D���=��=?�vA�|Z��0�?c37ߪ��'_p��f~aI/D߸n���e�'�t;����w
M�9����(�;zB��:q�p���n.Ϝ+y=�����TGёZtգJ�C�u|��Ug~=? 6��������'�^�����q��\�g���"�<�u!���|���{!�Uȱ��Tt�<���ٍc�ۓ��'fD"�wݐ��:Dy����a7v��Z\M#$tv�~Lk����"F��n��=<��~��0���[�B����
�S3��[/�F�i��=���Ԙ/w�Rt'[]��U=�TaG�\�F�k)�wvu^��*�U`�ښ5ڣL_��P���U��Fk�����I�@�	:�����<o����y��TK}hn�Q�l���l"���]�8ģ��ob���t��{�|k��'�-��o��%�vW�{�kzw�f�z�.{;ԥ��z[7��>^f�|Xt��T%C+���z��˪?P��A�,�3�,�}��E�~��l���z��`��)?�5��������V��0���:��a��gC|ʷ�x[j�"4?��[J�r/>N�	�A�G#/�|Hzr���鰕��>w�u��	aD,����q���gC{R������Toz������Oj��w��T�54��7i6oߵ]e���p*X����T�V�1��s��/J��c@�����`��;<��\��4��u����a�َ�a~�2T|`�Ѫ3�+pE�F'�(��p�j���PuZ�Tv����3o#����=��`��Vb�r�W���·?�����7�y��υ�	�R"[V��y��y��+G^A��$��n��d�_���)8kt[���ئ��v��!��0g�"�2/jJ1l���}��=߾��B��z�����v}+�w��j��tc:�/' ���W��=o�����K�ŗ�!JY�vhSs�قB;��'c�z�c�^<(���3D�l?��?�|o�?֕j�s��gEN�nL�w=��d��������8<�SZ�Q������>��@�[ ��C����hމs������o����}��sh{) h���3��þ��jug�>>�����P*��W+�#�_����Y�F�۶�vy,���8�[l7�7:��9��z�i,"g����2Ro!�����x)��`�E�ً��g��ӺtP�s��Zϸ}Զ��mI6�/^��;��l;��e,�J)c<O��ٰՕ�ޡk���O��>^��N��a�7�,���������@� ��n��8�����[\��k���wW�}�+����=��^i)��ڟ�9Ǭ��»74�1���3O�������{+ӄ�o�������p;���޾�Q�uy���,�bd��W/r�P�N���)]��2Bt�'�ŀ��'jy���4��?deF�&�w���{"�Yx�x�*��B��/��nda��~��c������!�4��e��HmΎ{7=)Þ=P���<�f2O�񆶣y����O�96�q����N_�`pV}��ޔ9B�'\��ȹ������ ��qC��6���}+�إ��E�p7�;2`�V�z$�z�a.��[�d�Jt&
#/F|5�X��Dx8�B��͐��QY&�p$Z�~���g:�ܧ{?����^�>�������v�(	�C�a�JN�p]��E�ޅ�`τJv�%�}<�Н������,�Q֗Q}6"�+nxZ�f�>��|{�yw��{���E{񾜲�{w��A� �g2���|�Lp+�({�\uÓ�!6,k[%񂝬G���[��^��L��]ʸN�ʈ��%׺���3MC���w� 8u,̕���3�>���J��Y�_���xՄ^H6j焷"z!/=���\�q+6�Q��o2nb�v<��S>:��]o��\�1�n����JI1��Ф9�$?��㕴ʗ�z7��������a��:=ppB�����M�v����@�/� ci}��9�v��@�S�����l����ϗ�2����M�����K��9y҉�d9�DL���Mw0Z0���RG�ҡ�9�c$N��z*�'|}�NJJPAmixt;SC�d�߾`&DC������ǃxUSi��������%D ے
�Í��ԫ�4�`2`�\���s8����-r\*lO�:��-F�CNiE���;C�:,�5�d+5�b>�Y'��=9�z��_���ܞg�k�ٯ=%֓����f�3��惺�=o��3 1=Jg�1S�khTRO�n��W=��k�;G%����d4;;���+xo�	�}�>�Z����	�����ܗ�[���Ap-������p�����f����b�k
ञ�{�߈{��"�I���#:몰�јj�`�1 �͢G�N�B���`ܾ�ĺCS|. ��߿^Е(�����5*3���3)" C��z��r ̦���7��n��qNPԔ��|*�Ĳۤ�C�w0\�@W'��Un �I�NE���!�G�����Z�#�V
аs��6������z�J��5�clP�0�݃k�xm�T,�i�4�YE�d8���Â˗�X8��{^�O$+��s:����pi��/���Y� � 9���'�M ��I_%��p� ��k�pNzy�E/W7��9���0C���E?�.�9ԾĽ��I0�}��sF?�Qu�º1�R�!ZN�ʮK���yR�[+���>4^�/dp���￴W�x��M�Z
�\����5	�`µrN6�;�2	��
l�d�l�*�{�#�Y��d�Gl ��K8�J4(q�(������ؘ�G0Gpq�;�.Ʒi�{��ܥs�K�S�e��#j�����R�l��;�f>�d�J��?��㝔G���`�:���f�?�Xk�φza�IsMOwcr��9E�v��{>�~)��Z�g�~�W�*�q��S(�nS)�Z�U�+�aAh��K�b�uNA(�B�	�X��am���1��d��Tƅ*�ɂ�ō�j>,�㙊�}%GVڢ�z�7xẑ:pY7 Z�d]���p�`��N���~�uO�v�+��&������Nϝ0��
b�GRg5�����,�8�(� 1{�G[.��6���Ƥ���4)�_�7él"��5�+?wt܍�}����v�D[��?-F���;q��fD%�Bw�9#��%@�/��J��'ě�$���x��\�E�;���i ����P5���C2#�)�����wp-���t+��\��rX���c^�Q���ݟ�F����
`R� /k5��4���/����k� �O�,Q��pg�Ė�ib@��Ԑiə��'��˦jwXic��o��ܤt���[��P�7c�_H�];���w՛7����O�j2���KA��Bڬ@KCe<T����^�-l��H� �@���f�Åd#��v[��{o��{�$y����^������i���L��Q�~�]��i9���,g�.�Ȑ�2��3�oΰ�ȼ ����$T�����T}�|&�G��Wϙ;� ��� ���L"T�!3� `u����y#,\�dA���{d'��m�w;����0vpn����C�1�=��9��D�Z3��B���0;���|۟o�{�o�>������P�!ʎ���:��%zĆ�e�{��`����x����&�>4�Eպ?��)c��^Ֆ���^��&q��S,�N�����m��W?m��Z�//ۋ��6d�"<�ҽ����T08hr���&�����H��9�b���ꂣ�I}쏣q�X� �vڔB����=���������}�Mt8m�t';�$�8�-��j?Y$述:84 ��p�cw[K�{���3�d�/:N�G�9B��4�|��F��n��Dʐ������XL��#-]��Oqo�+�S���p��;�4^�:｟��i
nUl����gZ�9�#��;bC�Q9����QD��8��9�
�|�.i�\���n6�T��H�%�����,�	Ĺ��R�D��R���'wd��bV[칌�}{�u��0��6���Pr'8��! 3�j�~9����_�Cm�u�cs*]��p0lt�1	����������)|Fp=�����
���o������&�f�<ۙ�T׻�_>�(�;�� 8���T�ʷ�H��J�n�c'8�R��5a۾�id�_�m�+�
��E���y��55�Z���p���>2F`P�d���;�_�Z����އAA�߬`3\�1yW}�`)R=����B������r��*��*��N��䴣�jY��l�|;U[��Vr�i|��P��х��-:����?Kv�0J4����u�T�	����d�B�6�r��"��h/�/ȁ.�
�K�ѐu��~������l<\�u��2eR��LF�N�V�:�9�5z�yEXkQ�L�ou��Ku��>��1,�\
�����42�{N빽�)��b�`XڣLg�$j�K��9�H�
�pV�z�,���������՝j������a)�Vt��x!3ah�����]��Ws���I���<����]���e��gSY�|7^�9���R�y}��*[��?�������fX��.��a��2��"B����x3mӏ��JZ�?GH�є"ߠQF-��=w|� Ъ/�6;��5��|?z���r+�y$���e����S��.O�������!y(t�"`�N�[��*f�C=���-�j)�|VҠ��m�`������eҳu��q���2���g�-�������f~�/��; �~��yc̿u\ǃ#ۥ����7~��(�jӐSX��]�!�JQꌰ[i��x����-���j\%|�<'3f��0iRia
���F�g��!�rм��ņ��'�2Mp�[fa������xb��L(X�N�s��Ym-�|j�z��'bn.��Zw�U�dqe�����0�����v�b��F�-���V}VU�-^�U�EnN��km�E�ۋO7�g�l���~Y����>�K��^�v{E}t�"fŃw�� WП�y �U/X(�2*~e�U|�.0��Z�����F�����YO=63;'
:���!���k�=pǝ�~.�۴�g�mv�/��h#ҷ��K�n��d�Gp>a�X�.��\���q�)�:��i뫥.�9fpZ8���:�ʦ���l0qsU N����@����65�?컈�3ޛ\�Mq_֪ҭ��K���UFRo�.Hs�L�~�A���N�R
xV�I�mF�L���f$����XF��'a��Ǧ����)Y��]��Q��h"�_��-�Z̿1�ؘw��xyNk�_ؒ%[m���]tS&��D"�M*uW�]�E�p�v��1�`��!c��bRe�N�@�0���\�8���Ie!�0up_#��wnӜ۝ׄQn:�����Íb<|��8�/�����g��K�
V�2��m.���d/lfɼ@�G&��<m�E.(�K�C��f#�1�J4D�?b����$����3E���Cg>��:�L�������`�ϥ���ksC�"ёi_�&�䅻��/�@D��d������3R��X�N��̀:�����T�c?�i�x�e<�K�T�ݸR�w��8� ,h��u�3�~^�v���N��FHP\�.٢��?(��$�V��>p^�t�}��;���9����{~sS�?�Ὧ<��q>�3�oH�����'ܬ��sګ�JB��g	�F��f�T�"���L�Z�LO:�2j] �Kt���e��/�g��!S��Kau��#Qc��I��r?J �ai�q��o�Q����Q���c�|��e��y@��h�%� �%�Cy��ĳ+�t��T5�z�/#E�u�����SܧL;�tmobP���M|�7zW����B�Y��+X݆��L�ޖMƩ$�	z�2�L�q٩U�]�\���a��lǣ�l^���fv�!�?���L:�6�RA���腓���ْ�ď[�`Լ�m�싚��|�3�y��*�I��E�W^��En��գ��r�%ot|�X�pk��j.���usC@��A��4[���hJ��h��Vů㭗N�c�����O����6^��!������^HW�|�r�"!�3K����;��@mN���ihL�GW�Mpy��A��J�g5�)�TR󞩱�����@���vR���?-�ݗ��7F��ޞ�Ɍ �`<�gvD�*�\��៻����&��6�g�Á�L�zռ��M*]Oi:$�H��2�@`���V�Q:�z�O&�mz��Ň�珍HCn~ �M���~�����`v-�����Hr�uG�m�J<�b�!f��4���E5�R��7\L�Z�������$���^���p8|FC�b�����g� ����^�_80���	�G�-���HFa����*��y�ĳ-oR�ӛ�&�!��2P�S�Rrv9�����c1�8pz��>�Κ��<t*=ӁG/�Up#�����R�^R��<:{X��*:���T�n9]e;Z�=_����.3��T�Lz�(Q�e �q
��ɩ`f
�s�2JT��_�?���>�cs���0<�{<�|&�fo�ܓ��m$���5��xjw�n�5_q[U�F�A�a�`�hsSv5#�	A�Hş�C�{��,	�YI�"��U��YY��|�BgmK������y��9})�z�_|��?������_;��s��M���/�g�EQc�.�_=���!�mj�ɸ\bD!�;b�9a���xw�������c���YJ�h�#̆��� �ݎ6�� ��Ya�|��`�n��3��'���y��7����+�4:��eFK�r�}�iw4�$�0#N�N��U&>�[��m��S�
6]�26�A�W��[���H���e�T	#�og0���������P0

--- File: .git/objects/55/a1cbc146410e4ded134a70caf1b814276c3be3 ---
x��Ij1 s�+�n0ZZj	L���|BQ����Ț��>�7�Xu(�l��&XO/s�@�\r��#�'b�DS�Ÿr���zu�C�$Gd�Q2B��3c
![�i���SMu��>����?�!���K�<�y^��%Ko�5��\��LHFc$भ����$�{o��2�;�^��[�<�e�_�Q�

--- File: .git/objects/78/d64083d469249a1d4a85edbef0e5c93a8541a0 ---
x�SKo1�_1Z�r q(��V�V�r�D�c��v�clo��g�MJ\z���=fƪ%g���L *';��P)29�)��Й�#��4Wl1DK.-ĩ8��֧Cf���f���j�aCR�𞁿;��To�;����6
�"�i1��+�.adF�S02I%#�&�P�\>���+��c��	�B~0�3>Q�Ҏ�mPN��p-�rUd�*-����Q'm1i��=+������x���,P77��(,��D��n,��
NN �6�����2ˀ��M�G��/�m*��ч6Sp�e�������M���n~y�w6���2�Q��p�Q0Y��_E��SC!���Z������0�T_?�{��Ds#�埔�:��.LO�zP��b���ݢӖ���t|Y����+=�_�6�]/��k�8&p�Pɜ�Ņxu��Fr;T����;>����\M4l�Vpk�8������

--- File: .git/objects/cf/d47797da57a7ce1a1c4a4f9e10f0678e9d085a ---
x=�A�0�=�WD���cz��MQ���Ơ45�"l�w�Mv	/y�K���l��j2��XF� ��c��/�8�曇�~���"[��떩�	
�[�O��#��4ͣ�U��[����S\��¬�F�#jM	܉u�௯ɮ;ף���#kx�4*M�,��od��˘δ@��6Ch�rN���P>

--- File: .git/objects/cf/dca8a458d4577dd687e079fc13f6af8c44d425 ---
x+)JMU0�4g040031Q�K�,�L��/Je8�{�D!���gO���j�W��*�����U/7�A������?�a���'�l�**HL�NLO���O���*��c�>I! rw�?����f���U1D]�5��+�*�d�Z������U�����Ԣ��"�2��Wʧ�
_~NJ��������Q q,O�

--- File: .git/objects/pack/pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.idx ---
�tOc                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        �n1(K�C�V;WX%�L��G7q�yw@]Ԗj ���<7gܛ�B]cs���s�9��ƻ��8�i��Q-��<S�}W$�M�[�	E��Q�@�       
  ]*I��c�ؒM�=�p��ll?��r9�NȄz��%*�ȵ��Ƌ}

--- File: .git/objects/pack/pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.pack ---
PACK      �(x�u��r�@ E�|EשּM��*�J���(Q⎗�Ay���3I�3wwn�]�۷q0�B!���9ȿF�~�t����}ڴ��Q�`�Y��oz)�	�H*?+_¦�X,��'D�`9��m��}�%�C �ꦍo���d}:��%�����+���{`*&pTeO��-�`�؉�H�(Qj��VLl%[�I��jՑR�*���~fNӞ���@���f ��u���k�iu�7e�[����U2L�)��CvWص�����f���0���:2�s�KkyΟJ�չ���<�VOU�=��x�R�4��Ó�-�����F���=�Tf@��S]�r������b<�jy�R<9��'-q�F�i�4e��Z.rMP����.����sQДR�嗢�S�r)���9[<v������۽MIl����ڀ�wF�(o��BGH���n��g�i�a��H��H˛��*7oꖅ�i tQJ��n�ǎ�q&���6ƨu�g~	~��k4̱�x�340031Q�K�,�L��/Je8�{�D!���gO���j�W���*�����U/7�A������?�a���'�l� ����x��U[o�4~ϯ�ԇ�����-��b�,�E+!�FN|&�Ա-_�~=�q�tڂx�L��s���ⳛbc�q�ᯱ~nyb�9�`����l(Xy��+ͅ��r�.&=�@ޅ�7�)��}�[��;�^z�/��}��eS�?�m?�u����,���6附�I6^+NxF"��g|X�	4&Nb��6��g���0z�b"KA�8��!��q����G~m j�dS�P����s&��	��C6�j�ɮ�i�b�Y����sb�O�!�Da&���p�N7'ƀ����H&m�֛<!�F��d|h��P�l����v��"OV�Og�l��t���My���w�Œj�>�=R�{=ep�Q��w�Ǡ}ZȚ=܃m%�K����^X�k/Y�ߒ!��mĚb�6v�Si��!�y��� � �;�Y�?�
���#�Fa��������x��L�����1�W�H#0��*�� ����EZ�sTL'C��M�a�cpC���

>�ߕ�B�U؍��RA��<�����~�,�u�90�Q�[U�-m+�^��ę�wL��7����!~F'OA'L����Jѫ�a�%�G����d��ZH��/(������q�A�o�,j��s�To�<ε�+<zF2�B\��ښa9���٩�֏6��S�B�D��B۸e���sD�-�g0 ��e�%z�f\+X��P��H����`���Uz/N.���6�Fq�$�¬�5P��&��߀�]��C���b��Z����Rf��z���י��~Mh��wOXz�/!��>YY�Iwc�2�+�?z�ѕ��ʘS�65��|;�6X���=��i�=��=����������&ټ��-���ӝ`>j/cG۶��1�)���[C��ۨyݕ��/�Q�� ���å�����#ҖY�k��=[����E.hq�$�N��Z��1U�Y�[��j��/�P�x�-��nA��<�%�����?��>Af&���l��"޾��7��g{����C�|c)�h��Ķ�^��f���[��A�CZj<j\p��x��$�����U��FQU|�BA���U����M3�w��ga����7�Eo�2�][�Go��$�8��Ҕ�΁)��������L�*I��c�ؒM�=�p��ll?��

--- File: .git/packed-refs ---
# pack-refs with: peeled fully-peeled sorted 
473771e3791e77405dd4966a20b1f08f3c1f1f37 refs/remotes/origin/main


--- File: .git/refs/heads/main ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .git/refs/remotes/origin/HEAD ---
ref: refs/remotes/origin/main


--- File: .git/refs/remotes/origin/main ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


--- File: .history/src/app_20230803101441.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

app.use

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: .history/src/app_20230803121957.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: .history/src/app_20230803122001.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: .history/src/app_20230803140226.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);
app.use(express.json());
app.use(require('./routes/base-route'));

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: .history/src/app_20230803140229.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();
app.use(express.json());

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: .history/src/config/db_20230803095330.js ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch(err => console.log(err));

--- File: .history/src/config/db_20230803191146.js ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, , { useNewUrlParser: true, useUnifiedTopology: true })
.then(() => console.log('Database connected!'))
.catch(err => console.log(err));

--- File: .history/src/config/db_20230803191149.js ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
.then(() => console.log('Database connected!'))
.catch(err => console.log(err));

--- File: .history/src/config/db_20230803191616.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch(err => console.log(err));

--- File: .history/src/config/db_20230803191617.js ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch(err => console.log(err));

--- File: .history/src/config/db_20230803191747.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch(err:any => console.log(err));

--- File: .history/src/config/db_20230803191755.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch((err:any) => console.log(err));

--- File: .history/src/config/db_20230803191837.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');


const MONGODB_URI = 'mongodb+srv://andrewlewis3927:4FY2o5QFldoQbM7u@bodyone-backend-node.z7kl5jw.mongodb.net/';

export const userDBConnection = mongoose.createConnection(`${MONGODB_URI}userDB`, { useNewUrlParser: true, useUnifiedTopology: true });
export const contentDBConnection = mongoose.createConnection(`${MONGODB_URI}contentDB`, { useNewUrlParser: true, useUnifiedTopology: true });


dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch((err:any) => console.log(err));

--- File: .history/src/config/db_20230803191838.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');


const MONGODB_URI = 'mongodb+srv://andrewlewis3927:4FY2o5QFldoQbM7u@bodyone-backend-node.z7kl5jw.mongodb.net/';

export const userDBConnection = mongoose.createConnection(`${MONGODB_URI}userDB`, { useNewUrlParser: true, useUnifiedTopology: true });
export const contentDBConnection = mongoose.createConnection(`${MONGODB_URI}contentDB`, { useNewUrlParser: true, useUnifiedTopology: true });


dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch((err:any) => console.log(err));

--- File: .history/src/config/db_20230803191907.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch((err:any) => console.log(err));

--- File: .history/src/config/db_20230803192013.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch((err:any) => console.log(err));

function connection(DB_URL:any, maxPoolSize = 10, DB:any) {
    try {
    const dbConfig = { useNewUrlParser: true, useUnifiedTopology: true, readPreference: 'secondaryPreferred' }
    const conn = mongoose.createConnection(DB_URL, dbConfig)
    conn.on('connected', () => console.log(`Connected to ${DB} database.`))
    return conn
    } catch (error) {
    console.log(error) }}

--- File: .history/src/config/db_20230803192020.ts ---
const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose
    .connect(process.env.MONGODB_URI, {
        dbName: process.env.MONGODB_DB_NAME,
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => console.log('Database connected!'))
    .catch((err: any) => console.log(err));

function connection(DB_URL: any, maxPoolSize = 10, DB: any) {
    try {
        const dbConfig = {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            readPreference: 'secondaryPreferred',
        };
        const conn = mongoose.createConnection(DB_URL, dbConfig);
        conn.on('connected', () => console.log(`Connected to ${DB} database.`));
        return conn;
    } catch (error) {
        console.log(error);
    }
}


--- File: .history/src/config/db_20230803192032.ts ---
const mongoose = require('mongoose');
const dotenv = require('dotenv');

export const UsersDBConnect = connection('mongodb://localhost:27017/users',10,'Users')


dotenv.config();
mongoose
    .connect(process.env.MONGODB_URI, {
        dbName: process.env.MONGODB_DB_NAME,
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => console.log('Database connected!'))
    .catch((err: any) => console.log(err));

function connection(DB_URL: any, maxPoolSize = 10, DB: any) {
    try {
        const dbConfig = {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            readPreference: 'secondaryPreferred',
        };
        const conn = mongoose.createConnection(DB_URL, dbConfig);
        conn.on('connected', () => console.log(`Connected to ${DB} database.`));
        return conn;
    } catch (error) {
        console.log(error);
    }
}


--- File: .history/src/config/db_20230803192056.ts ---
const mongoose = require('mongoose');
const dotenv = require('dotenv');

export const UsersDBConnect = connection(process.env.MONGODB_URI)


dotenv.config();
mongoose
    .connect(process.env.MONGODB_URI, {
        dbName: process.env.MONGODB_DB_NAME,
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => console.log('Database connected!'))
    .catch((err: any) => console.log(err));

function connection(DB_URL: any, maxPoolSize = 10, DB: any) {
    try {
        const dbConfig = {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            readPreference: 'secondaryPreferred',
        };
        const conn = mongoose.createConnection(DB_URL, dbConfig);
        conn.on('connected', () => console.log(`Connected to ${DB} database.`));
        return conn;
    } catch (error) {
        console.log(error);
    }
}


--- File: .history/src/config/db_20230803192127.ts ---
const mongoose = require('mongoose');
const dotenv = require('dotenv');

export const UsersDBConnect = connection(process.env.MONGODB_URI, 'Users')


dotenv.config();
mongoose
    .connect(process.env.MONGODB_URI, {
        dbName: process.env.MONGODB_DB_NAME,
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => console.log('Database connected!'))
    .catch((err: any) => console.log(err));

function connection(DB_URL: any, maxPoolSize = 10, DB: any) {
    try {
        const dbConfig = {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            readPreference: 'secondaryPreferred',
        };
        const conn = mongoose.createConnection(DB_URL, dbConfig);
        conn.on('connected', () => console.log(`Connected to ${DB} database.`));
        return conn;
    } catch (error) {
        console.log(error);
    }
}


--- File: .history/src/config/db_20230803192135.ts ---
const mongoose = require('mongoose');
const dotenv = require('dotenv');

export const UsersDBConnect = connection(process.env.MONGODB_URI,10, 'Users')


dotenv.config();
mongoose
    .connect(process.env.MONGODB_URI, {
        dbName: process.env.MONGODB_DB_NAME,
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => console.log('Database connected!'))
    .catch((err: any) => console.log(err));

function connection(DB_URL: any, maxPoolSize = 10, DB: any) {
    try {
        const dbConfig = {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            readPreference: 'secondaryPreferred',
        };
        const conn = mongoose.createConnection(DB_URL, dbConfig);
        conn.on('connected', () => console.log(`Connected to ${DB} database.`));
        return conn;
    } catch (error) {
        console.log(error);
    }
}


--- File: .history/src/config/db_20230803192137.ts ---
const mongoose = require('mongoose');
const dotenv = require('dotenv');

export const UsersDBConnect = connection(process.env.MONGODB_URI,10,'Users')


dotenv.config();
mongoose
    .connect(process.env.MONGODB_URI, {
        dbName: process.env.MONGODB_DB_NAME,
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => console.log('Database connected!'))
    .catch((err: any) => console.log(err));

function connection(DB_URL: any, maxPoolSize = 10, DB: any) {
    try {
        const dbConfig = {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            readPreference: 'secondaryPreferred',
        };
        const conn = mongoose.createConnection(DB_URL, dbConfig);
        conn.on('connected', () => console.log(`Connected to ${DB} database.`));
        return conn;
    } catch (error) {
        console.log(error);
    }
}


--- File: .history/src/config/db_20230803192212.ts ---
const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose
    .connect(process.env.MONGODB_URI, {
        dbName: process.env.MONGODB_DB_NAME,
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => console.log('Database connected!'))
    .catch((err: any) => console.log(err));

function connection(DB_URL: any, maxPoolSize = 10, DB: any) {
    try {
        const dbConfig = {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            readPreference: 'secondaryPreferred',
        };
        const conn = mongoose.createConnection(DB_URL, dbConfig);
        conn.on('connected', () => console.log(`Connected to ${DB} database.`));
        return conn;
    } catch (error) {
        console.log(error);
    }
}


--- File: .history/src/config/db_20230803192216.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch((err:any) => console.log(err));

--- File: .history/src/config/db_20230803192316.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

mongoose.connect( process.env.MONGODB_URI, { dbName: process.env.MONGODB_DB_NAME, useNewUrlParser: true, useUnifiedTopology: true, })
.then(() => console.log('Database connected!'))
.catch((err:any) => console.log(err));


mongoose.connect( process.env.MONGODB_URI, { dbName: 'Users', useNewUrlParser: true, useUnifiedTopology: true, })
.then(() => console.log('Database connected!'))
.catch((err:any) => console.log(err));

--- File: .history/src/config/db_20230803192520.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

mongoose.connect(process.env.MONGODB_URI as string, { 
    dbName: process.env.MONGODB_DB_NAME as string, 
    useNewUrlParser: true, 
    useUnifiedTopology: true, 
  })
  .then(() => console.log('Database connected!'))
  .catch((err: any) => console.log(err));

--- File: .history/src/config/db_20230803192521.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

mongoose.connect(process.env.MONGODB_URI as string, { 
    dbName: process.env.MONGODB_DB_NAME as string, 
    useNewUrlParser: true, 
    useUnifiedTopology: true, 
  })
  .then(() => console.log('Database connected!'))
  .catch((err: any) => console.log(err));

--- File: .history/src/config/db_20230803201311.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

mongoose.connect(process.env.MONGODB_URI as string, { 
    dbName: process.env.MONGODB_DB_NAME as string, 
    useNewUrlParser: true, 
    useUnifiedTopology: true, 
  })
  .then(() => console.log('Database connected!'))
  .catch((err: any) => console.log(err));

--- File: .history/src/config/passport_20230803095330.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUser } from '../models/User';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUser) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUser) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803120530.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUser) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUser) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803120539.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803121028.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134320.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
                
				const savedUser = await newUser.save();
                console.log((savedUser))
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134322.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
                
				const savedUser = await newUser.save();
                console.log((savedUser);)
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134324.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
                
				const savedUser = await newUser.save();
                console.log((savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134328.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134527.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const {
                    email,
                    firstName,
                    lastName,
                    dateOfBirth,
                    gender,
                    metrics,
                    fitnessGoals,
                    dietaryRequirements,
                    allergies,
                    preferredCuisine,
                    pts,
                    subscription, // Make sure subscription is an object with type, startDate, and endDate
                } = req.body;
    
                // Create new user and set all properties
                const newUser = new User({
                    username: username.toLowerCase(),
                    password: hashedPassword,
                    email,
                    firstName,
                    lastName,
                    dateOfBirth,
                    gender,
                    metrics,
                    fitnessGoals,
                    dietaryRequirements,
                    allergies,
                    preferredCuisine,
                    pts,
                    subscription,
                });
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134533.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({
                    username: username.toLowerCase(),
                });
                if (!user) {
                    return done(null, false, {
                        message: `Username ${username} not found.`,
                    });
                }
                user.comparePassword(
                    password,
                    (err: Error, isMatch: boolean) => {
                        if (err) {
                            return done(err);
                        }
                        if (isMatch) {
                            return done(null, user);
                        } else {
                            return done(null, false, {
                                message: 'Invalid username or password.',
                            });
                        }
                    }
                );
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
        'local-signup',
        new LocalStrategy(
            { usernameField: 'username', passReqToCallback: true },
            async (req, username, password, done) => {
                try {
                    const existingUser = await User.findOne({
                        username: username.toLowerCase(),
                    });

                    if (existingUser) {
                        return done(null, false, {
                            message: `Username ${username} already exists.`,
                        });
                    }

                    // Hash password
                    const salt = await bcrypt.genSalt(10);
                    const hashedPassword = await bcrypt.hash(password, salt);

                    // Create new user
                    const {
                        email,
                        firstName,
                        lastName,
                        dateOfBirth,
                        gender,
                        metrics,
                        fitnessGoals,
                        dietaryRequirements,
                        allergies,
                        preferredCuisine,
                        pts,
                        subscription, // Make sure subscription is an object with type, startDate, and endDate
                    } = req.body;

                    // Create new user and set all properties
                    const newUser = new User({
                        username: username.toLowerCase(),
                        password: hashedPassword,
                        email,
                        firstName,
                        lastName,
                        dateOfBirth,
                        gender,
                        metrics,
                        fitnessGoals,
                        dietaryRequirements,
                        allergies,
                        preferredCuisine,
                        pts,
                        subscription,
                    });

                    const savedUser = await newUser.save();
                    console.log(savedUser);
                    return done(null, savedUser);
                } catch (err) {
                    done(err);
                }
            }
        )
    );

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne(
                    { username: jwtPayload.user },
                    (err: any, user: IUserDocument) => {
                        if (err) {
                            return done(err, false);
                        }
                        if (user) {
                            return done(null, user);
                        } else {
                            return done(null, false, {
                                message: 'Unauthorized access.',
                            });
                        }
                    }
                );
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
        done(null, user.id);
    });

    passport.deserializeUser((id: any, done: any) => {
        User.findById(
            id,
            (err: any, user: mongoose.Document & IUserDocument) => {
                done(err, user);
            }
        );
    });
};


--- File: .history/src/config/passport_20230803134534.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({
                    username: username.toLowerCase(),
                });
                if (!user) {
                    return done(null, false, {
                        message: `Username ${username} not found.`,
                    });
                }
                user.comparePassword(
                    password,
                    (err: Error, isMatch: boolean) => {
                        if (err) {
                            return done(err);
                        }
                        if (isMatch) {
                            return done(null, user);
                        } else {
                            return done(null, false, {
                                message: 'Invalid username or password.',
                            });
                        }
                    }
                );
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
        'local-signup',
        new LocalStrategy(
            { usernameField: 'username', passReqToCallback: true },
            async (req, username, password, done) => {
                try {
                    const existingUser = await User.findOne({
                        username: username.toLowerCase(),
                    });

                    if (existingUser) {
                        return done(null, false, {
                            message: `Username ${username} already exists.`,
                        });
                    }

                    // Hash password
                    const salt = await bcrypt.genSalt(10);
                    const hashedPassword = await bcrypt.hash(password, salt);

                    // Create new user
                    const {
                        email,
                        firstName,
                        lastName,
                        dateOfBirth,
                        gender,
                        metrics,
                        fitnessGoals,
                        dietaryRequirements,
                        allergies,
                        preferredCuisine,
                        pts,
                        subscription, // Make sure subscription is an object with type, startDate, and endDate
                    } = req.body;

                    // Create new user and set all properties
                    const newUser = new User({
                        username: username.toLowerCase(),
                        password: hashedPassword,
                        email,
                        firstName,
                        lastName,
                        dateOfBirth,
                        gender,
                        metrics,
                        fitnessGoals,
                        dietaryRequirements,
                        allergies,
                        preferredCuisine,
                        pts,
                        subscription,
                    });

                    const savedUser = await newUser.save();
                    console.log(savedUser);
                    return done(null, savedUser);
                } catch (err) {
                    done(err);
                }
            }
        )
    );

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne(
                    { username: jwtPayload.user },
                    (err: any, user: IUserDocument) => {
                        if (err) {
                            return done(err, false);
                        }
                        if (user) {
                            return done(null, user);
                        } else {
                            return done(null, false, {
                                message: 'Unauthorized access.',
                            });
                        }
                    }
                );
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
        done(null, user.id);
    });

    passport.deserializeUser((id: any, done: any) => {
        User.findById(
            id,
            (err: any, user: mongoose.Document & IUserDocument) => {
                done(err, user);
            }
        );
    });
};


--- File: .history/src/config/passport_20230803134559.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({
                    username: username.toLowerCase(),
                });
                if (!user) {
                    return done(null, false, {
                        message: `Username ${username} not found.`,
                    });
                }
                user.comparePassword(
                    password,
                    (err: Error, isMatch: boolean) => {
                        if (err) {
                            return done(err);
                        }
                        if (isMatch) {
                            return done(null, user);
                        } else {
                            return done(null, false, {
                                message: 'Invalid username or password.',
                            });
                        }
                    }
                );
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
        'local-signup',
        new LocalStrategy(
            { usernameField: 'username', passReqToCallback: true },
            async (req, username, password, done) => {
                try {
                    const existingUser = await User.findOne({
                        username: username.toLowerCase(),
                    });

                    if (existingUser) {
                        return done(null, false, {
                            message: `Username ${username} already exists.`,
                        });
                    }

                    // Hash password
                    const salt = await bcrypt.genSalt(10);
                    const hashedPassword = await bcrypt.hash(password, salt);

                    // Create new user
                    const {
                        email,
                        firstName,
                        lastName,
                        dateOfBirth,
                        gender,
                        metrics,
                        fitnessGoals,
                        dietaryRequirements,
                        allergies,
                        preferredCuisine,
                        pts,
                        subscription, // Make sure subscription is an object with type, startDate, and endDate
                    } = req.body;

                    // Create new user and set all properties
                    const newUser = new User({
                        username: username.toLowerCase(),
                        password: hashedPassword,
                        email,
                        firstName,
                        lastName,
                        dateOfBirth,
                        gender,
                        metrics,
                        fitnessGoals,
                        dietaryRequirements,
                        allergies,
                        preferredCuisine,
                        pts,
                        subscription,
                    });

                    const savedUser = await newUser.save();
                    return done(null, savedUser);
                } catch (err) {
                    done(err);
                }
            }
        )
    );

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne(
                    { username: jwtPayload.user },
                    (err: any, user: IUserDocument) => {
                        if (err) {
                            return done(err, false);
                        }
                        if (user) {
                            return done(null, user);
                        } else {
                            return done(null, false, {
                                message: 'Unauthorized access.',
                            });
                        }
                    }
                );
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
        done(null, user.id);
    });

    passport.deserializeUser((id: any, done: any) => {
        User.findById(
            id,
            (err: any, user: mongoose.Document & IUserDocument) => {
                done(err, user);
            }
        );
    });
};


--- File: .history/src/config/passport_20230803134708.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134724.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134732.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134735.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803134737.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803135037.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email, subscription } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email, subscription: subscription});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803135038.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email, subscription } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email, subscription: subscription});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803135039.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email, subscription } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email, subscription: subscription});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803135041.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email, subscription } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email, subscription: subscription});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803135048.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email, subscription } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email, subscription: subscription});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803135119.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email, subscription } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/controllers/external/openai/chat_20230803101508.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803193317.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211038.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAR')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211039.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211134.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211135.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211151.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211228.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        console.log(messages);
        console.log(model);
        console.log(maxTokens);

        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211312.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        console.log(messages);
        console.log(model);
        console.log(maxTokens);
        next();
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211431.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        console.log(messages);
        console.log(model);
        console.log(maxTokens);
        const sleep = () => new Promise(r => setTimeout(r, 1000));
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211433.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        console.log(messages);
        console.log(model);
        console.log(maxTokens);
        const sleep = () => new Promise(r => setTimeout(r, 1000));
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211434.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        console.log(messages);
        console.log(model);
        console.log(maxTokens);
        const sleep = () => new Promise(r => setTimeout(r, 1000));
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/external/openai/chat_20230803211435.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        console.log(messages);
        console.log(model);
        console.log(maxTokens);
        const sleep = () => new Promise(r => setTimeout(r, 1000));
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: .history/src/controllers/internal/ai-coach_20230803195548.ts ---


--- File: .history/src/controllers/internal/ai-coach_20230803195603.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });
    await conversation.save();

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: Date.now(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};



--- File: .history/src/controllers/internal/ai-coach_20230803195714.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });
    await conversation.save();

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: Date.now(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};


--- File: .history/src/controllers/internal/ai-coach_20230803195731.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });
    await conversation.save();

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};


--- File: .history/src/controllers/internal/ai-coach_20230803195945.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });
    await conversation.save();

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803195954.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });
    await conversation.save();

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803201252.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage
      }],
    });
    await conversation.save();

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803201415.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });
    await conversation.save();

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803201505.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });
    await conversation.save();

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803201506.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });
    await conversation.save();

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803203330.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest);

    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803203337.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    
    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803203435.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    
    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803203615.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803203618.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803203619.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204424.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, headers: {
      Authorization: `Bearer ${sharedSecret}`,
    },);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204432.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${sharedSecret}`,
    },);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204450.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.9f8207d2-322d-11ee-be56-0242ac120002}`,
    },);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204454.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SAHRED_SECRET}`,
    },);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204457.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`,
    },);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204501.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`,
    });

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204508.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`,
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204512.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204517.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803204652.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803210732.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803210845.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error:err});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803210847.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: err});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803210852.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211547.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211633.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NGNiOTUxMDQ5NzMwM2E3OWI4NmIyOWUiLCJpYXQiOjE2OTEwNjM1NjgsImV4cCI6MTY5MTE0OTk2OH0.j9oerk2V_5Rz3DhuuY_Kn24x_AFdpOH4c78gg9tEt4U`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211634.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NGNiOTUxMDQ5NzMwM2E3OWI4NmIyOWUiLCJpYXQiOjE2OTEwNjM1NjgsImV4cCI6MTY5MTE0OTk2OH0.j9oerk2V_5Rz3DhuuY_Kn24x_AFdpOH4c78gg9tEt4U`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211635.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NGNiOTUxMDQ5NzMwM2E3OWI4NmIyOWUiLCJpYXQiOjE2OTEwNjM1NjgsImV4cCI6MTY5MTE0OTk2OH0.j9oerk2V_5Rz3DhuuY_Kn24x_AFdpOH4c78gg9tEt4U`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211652.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 3000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: err});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211754.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 1000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: err});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211806.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt35turbo', // optional, replace with your model if different
      maxTokens: 1000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211916.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo', // optional, replace with your model if different
      maxTokens: 1000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211917.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo', // optional, replace with your model if different
      maxTokens: 1000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803211920.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212002.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212039.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECREdT}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212058.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212059.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212248.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      ContentType: 'application/json',
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212249.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      ContentType: 'application/json',
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212250.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      ContentType: 'application/json',
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212421.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212427.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212428.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212556.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212611.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error) {
    console.error(error:any);
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212620.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212621.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212649.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212714.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212727.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequestx);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212730.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 4000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest);

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212740.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from,
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212836.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        console.log('starting conversation');
        const { userId, aiCoachName, initialMessage } = req.body;
        const conversation = new AICoachChatModel({
            user: userId,
            aiCoachName,
            messages: [
                {
                    from: 'User',
                    body: initialMessage,
                    createdAt: Date.now(),
                },
            ],
        });

        await conversation.save();

        res.status(201).json({
            message: 'Conversation started successfully',
            conversation,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};

export const addMessage = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { conversationId, from, body } = req.body;
        const conversation = await AICoachChatModel.findById(conversationId);
        if (!conversation) {
            return res.status(404).json({ error: 'Conversation not found.' });
        }

        conversation.messages.push({
            from,
            body,
            createdAt: new Date(),
        });
        await conversation.save();

        const aiRequest = {
            messages: [
                {
                    role: 'system',
                    content: 'You are a helpful assistant.',
                },
                {
                    role: 'user',
                    content: 'Who won the world series in 2020?',
                },
            ],
            model: 'gpt-3.5-turbo',
            maxTokens: 60,
        };

        const aiResponse = await axios.post(
            'http://localhost:5001/api/private/openai/chat',
            aiRequest,
            {
                headers: {
                    Authorization: `Bearer ${process.env.SHARED_SECRET}`,
                },
            }
        );

        conversation.messages.push({
            from: 'AICoach',
            body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
            createdAt: new Date(),
        });

        await conversation.save();

        res.status(200).json({
            message: 'Message added successfully',
            conversation,
        });
    } catch (error: any) {
        res.status(500).json({ error: error.response.data });
    }
};

export const getConversation = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { conversationId } = req.params;
        const conversation = await AICoachChatModel.findById(conversationId);
        if (!conversation) {
            return res.status(404).json({ error: 'Conversation not found.' });
        }

        res.status(200).json({
            message: 'Conversation retrieved successfully',
            conversation,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};

export const getAllConversationsForUser = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { userId } = req.params;
        const conversations = await AICoachChatModel.find({ user: userId });
        if (!conversations) {
            return res
                .status(404)
                .json({ error: 'No conversations found for this user.' });
        }

        res.status(200).json({
            message: 'Conversations retrieved successfully',
            conversations,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};

export const deleteConversation = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { conversationId } = req.params;
        const conversation = await AICoachChatModel.findByIdAndDelete(
            conversationId
        );
        if (!conversation) {
            return res.status(404).json({ error: 'Conversation not found.' });
        }

        res.status(200).json({
            message: 'Conversation deleted successfully',
            conversation,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};


--- File: .history/src/controllers/internal/ai-coach_20230803212837.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        console.log('starting conversation');
        const { userId, aiCoachName, initialMessage } = req.body;
        const conversation = new AICoachChatModel({
            user: userId,
            aiCoachName,
            messages: [
                {
                    from: 'User',
                    body: initialMessage,
                    createdAt: Date.now(),
                },
            ],
        });

        await conversation.save();

        res.status(201).json({
            message: 'Conversation started successfully',
            conversation,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};

export const addMessage = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { conversationId, from, body } = req.body;
        const conversation = await AICoachChatModel.findById(conversationId);
        if (!conversation) {
            return res.status(404).json({ error: 'Conversation not found.' });
        }

        conversation.messages.push({
            from,
            body,
            createdAt: new Date(),
        });
        await conversation.save();

        const aiRequest = {
            messages: [
                {
                    role: 'system',
                    content: 'You are a helpful assistant.',
                },
                {
                    role: 'user',
                    content: 'Who won the world series in 2020?',
                },
            ],
            model: 'gpt-3.5-turbo',
            maxTokens: 60,
        };

        const aiResponse = await axios.post(
            'http://localhost:5001/api/private/openai/chat',
            aiRequest,
            {
                headers: {
                    Authorization: `Bearer ${process.env.SHARED_SECRET}`,
                },
            }
        );

        conversation.messages.push({
            from: 'AICoach',
            body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
            createdAt: new Date(),
        });

        await conversation.save();

        res.status(200).json({
            message: 'Message added successfully',
            conversation,
        });
    } catch (error: any) {
        res.status(500).json({ error: error.response.data });
    }
};

export const getConversation = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { conversationId } = req.params;
        const conversation = await AICoachChatModel.findById(conversationId);
        if (!conversation) {
            return res.status(404).json({ error: 'Conversation not found.' });
        }

        res.status(200).json({
            message: 'Conversation retrieved successfully',
            conversation,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};

export const getAllConversationsForUser = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { userId } = req.params;
        const conversations = await AICoachChatModel.find({ user: userId });
        if (!conversations) {
            return res
                .status(404)
                .json({ error: 'No conversations found for this user.' });
        }

        res.status(200).json({
            message: 'Conversations retrieved successfully',
            conversations,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};

export const deleteConversation = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { conversationId } = req.params;
        const conversation = await AICoachChatModel.findByIdAndDelete(
            conversationId
        );
        if (!conversation) {
            return res.status(404).json({ error: 'Conversation not found.' });
        }

        res.status(200).json({
            message: 'Conversation deleted successfully',
            conversation,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};


--- File: .history/src/controllers/internal/ai-coach_20230803212904.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLower(),
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212907.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212911.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      model: 'gpt-3.5-turbo-0613', // optional, replace with your model if different
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212926.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      model: 'gpt-3.5-turbo', // optional, replace with your model if different
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212927.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      model: 'gpt-3.5-turbo', // optional, replace with your model if different
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803212936.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      model: 'gpt-3.5-turbo', // optional, replace with your model if different
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213009.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213010.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213011.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'User',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213053.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213101.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213103.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213126.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213127.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213302.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from: role,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213303.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from: role,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213304.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from: role,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: 'AICoach',
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213339.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'ser',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213340.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'ser',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213341.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'ser',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213342.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'ser',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213444.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'ser',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213445.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'ser',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213523.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'ser',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    console.log(aiResponse)

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213619.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    console.log(aiResponse)

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803213620.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    console.log(aiResponse)

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();
    

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803220900.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, { headers: {
      Authorization: `Bearer ${process.env.SHARED_SECRET}`
    }});

    console.log(aiResponse)

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data});
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803220936.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        console.log('starting conversation');
        const { userId, aiCoachName, initialMessage } = req.body;
        const conversation = new AICoachChatModel({
            user: userId,
            aiCoachName,
            messages: [
                {
                    from: 'user',
                    body: initialMessage,
                    createdAt: Date.now(),
                },
            ],
        });

        await conversation.save();

        res.status(201).json({
            message: 'Conversation started successfully',
            conversation,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};

export const addMessage = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { conversationId, from, body } = req.body;
        const conversation = await AICoachChatModel.findById(conversationId);
        if (!conversation) {
            return res.status(404).json({ error: 'Conversation not found.' });
        }

        conversation.messages.push({
            from,
            body,
            createdAt: new Date(),
        });
        await conversation.save();

        const aiRequest = {
            messages: conversation.messages.map((message) => ({
                role: message.from.toLowerCase(),
                content: message.body,
            })),
            maxTokens: 2000, // optional, replace with your max tokens if different
        };

        const aiResponse = await axios.post(
            'http://localhost:5001/api/private/openai/chat',
            aiRequest,
            {
                headers: {
                    Authorization: `Bearer ${process.env.SHARED_SECRET}`,
                },
            }
        );

        console.log(aiResponse);

        conversation.messages.push({
            from: aiResponse.data.response.choices[0].message.role,
            body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
            createdAt: new Date(),
        });

        await conversation.save();

        res.status(200).json({
            message: 'Message added successfully',
            conversation,
        });
    } catch (error: any) {
        res.status(500).json({ error: error.response.data });
    }
};

export const getConversation = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { conversationId } = req.params;
        const conversation = await AICoachChatModel.findById(conversationId);
        if (!conversation) {
            return res.status(404).json({ error: 'Conversation not found.' });
        }

        res.status(200).json({
            message: 'Conversation retrieved successfully',
            conversation,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};

export const getAllConversationsForUser = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { userId } = req.params;
        const conversations = await AICoachChatModel.find({ user: userId });
        if (!conversations) {
            return res
                .status(404)
                .json({ error: 'No conversations found for this user.' });
        }

        res.status(200).json({
            message: 'Conversations retrieved successfully',
            conversations,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};

export const deleteConversation = async (
    req: Request,
    res: Response,
    next?: NextFunction
) => {
    try {
        const { conversationId } = req.params;
        const conversation = await AICoachChatModel.findByIdAndDelete(
            conversationId
        );
        if (!conversation) {
            return res.status(404).json({ error: 'Conversation not found.' });
        }

        res.status(200).json({
            message: 'Conversation deleted successfully',
            conversation,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: 'An error occurred while processing your request.',
        });
    }
};


--- File: .history/src/controllers/internal/ai-coach_20230803221146.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, {
      headers: {
        Authorization: `Bearer ${process.env.SHARED_SECRET}`
      }
    });

    console.log(aiResponse)

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/ai-coach_20230803221155.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, {
      headers: {
        Authorization: `Bearer ${process.env.SHARED_SECRET}`
      }
    });

    console.log(aiResponse)

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/auth/authentication_20230803101508.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET || 'OpenAIBackendSecretKey';

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};


export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803125922.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};


export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803125923.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};


export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803125932.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};


export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803125940.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803131847.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132119.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132147.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        console.log(user)
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132204.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        console.log(req)
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132345.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        console.log(req)
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132348.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const async register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        console.log(req)
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132353.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = async (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        console.log(req)
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132401.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        console.log(req)
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132404.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        console.log(req)
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132513.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        
        if (err) {
            return next(err);
        }
        if (!user) {
            console.log(user)
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132532.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        console.log(user)
        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132533.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    console.log('Register')
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        console.log(user)
        
        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132619.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        console.log(user)

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132710.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132720.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            console.log(user)
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/auth/authentication_20230803132721.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            console.log(user)
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/authentication_20230803132720.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            console.log(user)
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/authentication_20230803204307.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            console.log(user)
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}

      // Check if the token is the shared secret
    if (token === process.env.SHARED_SECRET) {
        // If it is, call next() to proceed to the next middleware function or route handler
        return next();
    }
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/authentication_20230803204722.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            console.log(user)
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}

      // Check if the token is the shared secret
    if (token === process.env.SHARED_SECRET) {
        // If it is, call next() to proceed to the next middleware function or route handler
        return next();
    }
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/authentication_20230803204733.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            console.log(user)
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

       // Check if the token is the shared secret
       if (token === process.env.SHARED_SECRET) {
        // If it is, call next() to proceed to the next middleware function or route handler
        return next();
    }
    
	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}

   
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/authentication_20230803210637.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            console.log(user)
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}

      // Check if the token is the shared secret
    if (token === process.env.SHARED_SECRET) {
        // If it is, call next() to proceed to the next middleware function or route handler
        return next();
    }
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: .history/src/controllers/internal/crud-user_20230803143023.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../../models/User.model'; // Assuming this is the location of your User model

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/crud-user_20230803143327.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model



export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/exercise_20230803143941.ts ---


--- File: .history/src/controllers/internal/exercise_20230803144544.ts ---
import express, { NextFunction, Request, Response } from 'express';
import Exercise from '../../Exercise.model'; // Assuming this is the location of your Exercise model

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const {
      title,
      description,
      type,
      tags,
      equipment,
      targetMuscleGroups,
      videoSearchTerm,
      safetyInstructions,
      tips,
      benefits,
      variations,
      warmUp,
      cooldown,
      prerequisites,
      commonMistakes,
      progression,
    } = req.body;

    const exercise = new Exercise({
      title,
      description,
      type,
      tags,
      equipment,
      targetMuscleGroups,
      videoSearchTerm,
      safetyInstructions,
      tips,
      benefits,
      variations,
      warmUp,
      cooldown,
      prerequisites,
      commonMistakes,
      progression,
    });

    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/exercise_20230803144706.ts ---
import express, { NextFunction, Request, Response } from 'express';
import ExerciseModel from '../../models/Exercise.model';

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, } = req.body;
    const exercise = new ExerciseModel({ title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, });
    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: .history/src/controllers/internal/exercise_20230803144846.ts ---
import express, { NextFunction, Request, Response } from 'express';
import ExerciseModel from '../../models/Exercise.model';

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, } = req.body;
    const exercise = new ExerciseModel({ title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, });
    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const exercise = await ExerciseModel.findById(req.params.id);
      if (!exercise) {
          return res.status(404).send();
      }
      res.send(exercise);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const exercise = await ExerciseModel.findByIdAndDelete(req.params.id);
    if (!exercise) {
        return res.status(404).send();
    }
    res.send(exercise);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/exercise_20230803144848.ts ---
import express, { NextFunction, Request, Response } from 'express';
import ExerciseModel from '../../models/Exercise.model';

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, } = req.body;
    const exercise = new ExerciseModel({ title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, });
    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const exercise = await ExerciseModel.findById(req.params.id);
      if (!exercise) {
          return res.status(404).send();
      }
      res.send(exercise);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const exercise = await ExerciseModel.findByIdAndDelete(req.params.id);
    if (!exercise) {
        return res.status(404).send();
    }
    res.send(exercise);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/exercise_20230803155423.ts ---
import express, { NextFunction, Request, Response } from 'express';
import ExerciseModel from '../../models/Exercise.model';

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, } = req.body;
    const exercise = new ExerciseModel({ title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, });
    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllUserExercises = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await ExerciseModel.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const exercise = await ExerciseModel.findById(req.params.id);
      if (!exercise) {
          return res.status(404).send();
      }
      res.send(exercise);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const exercise = await ExerciseModel.findByIdAndDelete(req.params.id);
    if (!exercise) {
        return res.status(404).send();
    }
    res.send(exercise);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/exercise_20230803155447.ts ---
import express, { NextFunction, Request, Response } from 'express';
import ExerciseModel from '../../models/Exercise.model';

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, } = req.body;
    const exercise = new ExerciseModel({ title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, });
    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllExercises = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await ExerciseModel.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const exercise = await ExerciseModel.findById(req.params.id);
      if (!exercise) {
          return res.status(404).send();
      }
      res.send(exercise);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const exercise = await ExerciseModel.findByIdAndDelete(req.params.id);
    if (!exercise) {
        return res.status(404).send();
    }
    res.send(exercise);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/exercise_20230803162555.ts ---
import express, { NextFunction, Request, Response } from 'express';
import ExerciseModel from '../../models/Exercise.model';

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const exercise = req.body;
    const exercise = new ExerciseModel(exercise);
    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllExercises = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await ExerciseModel.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const exercise = await ExerciseModel.findById(req.params.id);
      if (!exercise) {
          return res.status(404).send();
      }
      res.send(exercise);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const exercise = await ExerciseModel.findByIdAndDelete(req.params.id);
    if (!exercise) {
        return res.status(404).send();
    }
    res.send(exercise);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/exercise_20230803162611.ts ---
import express, { NextFunction, Request, Response } from 'express';
import ExerciseModel from '../../models/Exercise.model';

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, } = req.body;
    const exercise = new ExerciseModel({ title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, });
    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllExercises = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await ExerciseModel.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const exercise = await ExerciseModel.findById(req.params.id);
      if (!exercise) {
          return res.status(404).send();
      }
      res.send(exercise);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const exercise = await ExerciseModel.findByIdAndDelete(req.params.id);
    if (!exercise) {
        return res.status(404).send();
    }
    res.send(exercise);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803155946.ts ---


--- File: .history/src/controllers/internal/ingredients_20230803160045.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { name, quantity, unit, caloriesPerUnit } = req.body;
    const ingredient = new IngredientModel({ name, quantity, unit, caloriesPerUnit });
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803162625.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803162626.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803165050.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803165336.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const ingredients = await IngredientModel.insertMany(ingredientsData, { ordered: false });

    res.status(201).json({
      message: 'Ingredients created successfully',
      ingredients,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803165337.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const ingredients = await IngredientModel.insertMany(ingredientsData, { ordered: false });

    res.status(201).json({
      message: 'Ingredients created successfully',
      ingredients,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803165526.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const results = [];

    for (const ingredientData of ingredientsData) {
      const result = await IngredientModel.updateOne(
        { name: ingredientData.name },
        { $setOnInsert: ingredientData },
        { upsert: true }
      );
      if (result.upserted) {
        results.push(result.upserted);
      }
    }

    res.status(201).json({
      message: 'Ingredients created successfully',
      ingredients: results,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803165556.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const results = [];

    for (const ingredientData of ingredientsData) {
      const result = await IngredientModel.updateOne(
        { name: ingredientData.name },
        { $setOnInsert: ingredientData },
        { upsert: true }
      );
      if (result.upsertedId) {
        results.push(result.upsertedId);
      }
    }

    res.status(201).json({
      message: 'Ingredients created successfully',
      ingredients: results,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803165557.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const results = [];

    for (const ingredientData of ingredientsData) {
      const result = await IngredientModel.updateOne(
        { name: ingredientData.name },
        { $setOnInsert: ingredientData },
        { upsert: true }
      );
      if (result.upsertedId) {
        results.push(result.upsertedId);
      }
    }

    res.status(201).json({
      message: 'Ingredients created successfully',
      ingredients: results,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803165741.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const results = [];

    for (const ingredientData of ingredientsData) {
      // First, try to find an existing ingredient with the same name
      let ingredient = await IngredientModel.findOne({ name: ingredientData.name });

      // If the ingredient doesn't exist, create a new one
      if (!ingredient) {
        const result = await IngredientModel.updateOne(
          { name: ingredientData.name },
          { $setOnInsert: ingredientData },
          { upsert: true }
        );

        if (result.upsertedCount > 0) {
          ingredient = await IngredientModel.findById(result.upsertedId._id);
        }
      }

      // Add the ingredient (either existing or new) to the results array
      results.push(ingredient);
    }

    res.status(201).json({
      message: 'Ingredients processed successfully',
      ingredients: results,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803165841.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const results = [];

    for (const ingredientData of ingredientsData) {
      // First, try to find an existing ingredient with the same name
      let ingredient = await IngredientModel.findOne({ name: ingredientData.name });

      // If the ingredient doesn't exist, create a new one
      if (!ingredient) {
        const result = await IngredientModel.updateOne(
          { name: ingredientData.name },
          { $setOnInsert: ingredientData },
          { upsert: true }
        );

        // If an upsert took place, fetch the new ingredient
        if (result.upsertedCount > 0 && result.upsertedId) {
          ingredient = await IngredientModel.findById(result.upsertedId._id);
        }
      }

      // Add the ingredient (either existing or new) to the results array
      if (ingredient) {
        results.push(ingredient);
      }
    }

    res.status(201).json({
      message: 'Ingredients processed successfully',
      ingredients: results,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803165842.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const results = [];

    for (const ingredientData of ingredientsData) {
      // First, try to find an existing ingredient with the same name
      let ingredient = await IngredientModel.findOne({ name: ingredientData.name });

      // If the ingredient doesn't exist, create a new one
      if (!ingredient) {
        const result = await IngredientModel.updateOne(
          { name: ingredientData.name },
          { $setOnInsert: ingredientData },
          { upsert: true }
        );

        // If an upsert took place, fetch the new ingredient
        if (result.upsertedCount > 0 && result.upsertedId) {
          ingredient = await IngredientModel.findById(result.upsertedId._id);
        }
      }

      // Add the ingredient (either existing or new) to the results array
      if (ingredient) {
        results.push(ingredient);
      }
    }

    res.status(201).json({
      message: 'Ingredients processed successfully',
      ingredients: results,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/ingredients_20230803170127.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const results = [];

    for (const ingredientData of ingredientsData) {
      // First, try to find an existing ingredient with the same name
      let ingredient = await IngredientModel.findOne({ name: ingredientData.name });

      // If the ingredient doesn't exist, create a new one
      if (!ingredient) {
        const result = await IngredientModel.updateOne(
          { name: ingredientData.name },
          { $setOnInsert: ingredientData },
          { upsert: true }
        );

        // If an upsert took place, fetch the new ingredient
        if (result.upsertedCount > 0 && result.upsertedId) {
          ingredient = await IngredientModel.findById(result.upsertedId._id);
        }
      }

      // Add the ingredient (either existing or new) to the results array
      if (ingredient) {
        results.push(ingredient._id);
      }
    }

    res.status(201).json({
      message: 'Ingredients processed successfully',
      ingredients: results,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/meal-plan_20230803174835.ts ---


--- File: .history/src/controllers/internal/meal-plan_20230803174855.ts ---
import { NextFunction } from "express";
import MealPlanModel from "../../models/MealPlan.model";

export const createMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlanData = req.body;
    const mealPlan = new MealPlanModel(mealPlanData);
    await mealPlan.save();

    res.status(201).json({
      message: 'MealPlan created successfully',
      mealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};



--- File: .history/src/controllers/internal/meal-plan_20230803174908.ts ---
import { NextFunction, Request, Response } from "express";
import MealPlanModel from "../../models/MealPlan.model";

export const createMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlanData = req.body;
    const mealPlan = new MealPlanModel(mealPlanData);
    await mealPlan.save();

    res.status(201).json({
      message: 'MealPlan created successfully',
      mealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};



--- File: .history/src/controllers/internal/meal-plan_20230803174909.ts ---
import { NextFunction, Request, Response } from "express";
import MealPlanModel from "../../models/MealPlan.model";

export const createMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlanData = req.body;
    const mealPlan = new MealPlanModel(mealPlanData);
    await mealPlan.save();

    res.status(201).json({
      message: 'MealPlan created successfully',
      mealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};



--- File: .history/src/controllers/internal/meal-plan_20230803175049.ts ---
import { NextFunction, Request, Response } from "express";
import MealPlanModel from "../../models/MealPlan.model";

export const createMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlanData = req.body;
    const mealPlan = new MealPlanModel(mealPlanData);
    await mealPlan.save();

    res.status(201).json({
      message: 'MealPlan created successfully',
      mealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlan = await MealPlanModel.findById(req.params.id).populate('meals');
    if (!mealPlan) {
      return res.status(404).send();
    }
    res.send(mealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getAllMealPlans = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlans = await MealPlanModel.find({}).populate('meals');
    res.send(mealPlans);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};


export const updateMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['startDate', 'endDate', 'meals'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).send({ error: 'Invalid updates!' });
    }

    const mealPlan = await MealPlanModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!mealPlan) {
      return res.status(404).send();
    }

    res.send(mealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlan = await MealPlanModel.findByIdAndDelete(req.params.id);
    if (!mealPlan) {
      return res.status(404).send();
    }
    res.send(mealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/meal_20230803172615.ts ---


--- File: .history/src/controllers/internal/meal_20230803172807.ts ---
import express, { NextFunction, Request, Response } from 'express';
import MealModel from '../../models/Meal.model';

export const createMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealData = req.body;
    const meal = new MealModel(mealData);
    await meal.save();

    res.status(201).json({
      message: 'Meal created successfully',
      meal,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllMeals = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meals = await MealModel.find({}).populate('recipes');
      res.send(meals);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meal = await MealModel.findById(req.params.id).populate('recipes');
      if (!meal) {
          return res.status(404).send();
      }
      res.send(meal);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndDelete(req.params.id);
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/meal_20230803172808.ts ---
import express, { NextFunction, Request, Response } from 'express';
import MealModel from '../../models/Meal.model';

export const createMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealData = req.body;
    const meal = new MealModel(mealData);
    await meal.save();

    res.status(201).json({
      message: 'Meal created successfully',
      meal,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllMeals = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meals = await MealModel.find({}).populate('recipes');
      res.send(meals);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meal = await MealModel.findById(req.params.id).populate('recipes');
      if (!meal) {
          return res.status(404).send();
      }
      res.send(meal);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndDelete(req.params.id);
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/meal_20230803214223.ts ---
import express, { NextFunction, Request, Response } from 'express';
import MealModel from '../../models/Meal.model';

export const createMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealData = req.body;
    const meal = new MealModel(mealData);
    await meal.save();

    res.status(201).json({
      message: 'Meal created successfully',
      meal,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllMeals = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meals = await MealModel.find({}).populate('recipes');
      res.send(meals);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meal = await MealModel.findById(req.params.id).populate('recipes');
      if (!meal) {
          return res.status(404).send();
      }
      res.send(meal);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndDelete(req.params.id);
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};


--- File: .history/src/controllers/internal/points_20230803214259.ts ---


--- File: .history/src/controllers/internal/points_20230803214335.ts ---
import express, { NextFunction, Request, Response } from 'express';
import PointsModel from '../../models/Pts.model';

export const createPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const pointsData = req.body;
    const points = new PointsModel(pointsData);
    await points.save();

    res.status(201).json({
      message: 'Points created successfully',
      points,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const points = await PointsModel.find({});
      res.send(points);
  } catch (e) {
      console.error(e);
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const points = await PointsModel.findById(req.params.id);
      if (!points) {
          return res.status(404).send();
      }
      res.send(points);
  } catch (e) {
      console.error(e);
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updatePoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const points = await PointsModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!points) {
        return res.status(404).send();
    }
    res.send(points);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deletePoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const points = await PointsModel.findByIdAndDelete(req.params.id);
    if (!points) {
        return res.status(404).send();
    }
    res.send(points);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/points_20230803214336.ts ---
import express, { NextFunction, Request, Response } from 'express';
import PointsModel from '../../models/Pts.model';

export const createPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const pointsData = req.body;
    const points = new PointsModel(pointsData);
    await points.save();

    res.status(201).json({
      message: 'Points created successfully',
      points,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const points = await PointsModel.find({});
      res.send(points);
  } catch (e) {
      console.error(e);
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const points = await PointsModel.findById(req.params.id);
      if (!points) {
          return res.status(404).send();
      }
      res.send(points);
  } catch (e) {
      console.error(e);
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updatePoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const points = await PointsModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!points) {
        return res.status(404).send();
    }
    res.send(points);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deletePoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const points = await PointsModel.findByIdAndDelete(req.params.id);
    if (!points) {
        return res.status(404).send();
    }
    res.send(points);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/recipe_20230803170949.ts ---


--- File: .history/src/controllers/internal/recipe_20230803171124.ts ---

import express, { NextFunction, Request, Response } from 'express';
import RecipeModel from '../../models/Recipe.model';

export const createRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const recipeData = req.body;
    const recipe = new RecipeModel(recipeData);
    await recipe.save();

    res.status(201).json({
      message: 'Recipe created successfully',
      recipe,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllRecipes = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const recipes = await RecipeModel.find({}).populate('ingredients.ingredient');
      res.send(recipes);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const recipe = await RecipeModel.findById(req.params.id).populate('ingredients.ingredient');
      if (!recipe) {
          return res.status(404).send();
      }
      res.send(recipe);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const recipe = await RecipeModel.findByIdAndDelete(req.params.id);
    if (!recipe) {
        return res.status(404).send();
    }
    res.send(recipe);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['name', 'ingredients', 'instructions', 'preparationTime', 'cookingTime', 'servings', 'cuisine', 'course', 'diet', 'image'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).send({ error: 'Invalid updates!' });
    }

    const recipe = await RecipeModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!recipe) {
      return res.status(404).send();
    }

    res.send(recipe);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(400).send(e);
  }
};

--- File: .history/src/controllers/internal/recipe_20230803171127.ts ---

import express, { NextFunction, Request, Response } from 'express';
import RecipeModel from '../../models/Recipe.model';

export const createRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const recipeData = req.body;
    const recipe = new RecipeModel(recipeData);
    await recipe.save();

    res.status(201).json({
      message: 'Recipe created successfully',
      recipe,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllRecipes = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const recipes = await RecipeModel.find({}).populate('ingredients.ingredient');
      res.send(recipes);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const recipe = await RecipeModel.findById(req.params.id).populate('ingredients.ingredient');
      if (!recipe) {
          return res.status(404).send();
      }
      res.send(recipe);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const recipe = await RecipeModel.findByIdAndDelete(req.params.id);
    if (!recipe) {
        return res.status(404).send();
    }
    res.send(recipe);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['name', 'ingredients', 'instructions', 'preparationTime', 'cookingTime', 'servings', 'cuisine', 'course', 'diet', 'image'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).send({ error: 'Invalid updates!' });
    }

    const recipe = await RecipeModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!recipe) {
      return res.status(404).send();
    }

    res.send(recipe);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(400).send(e);
  }
};

--- File: .history/src/controllers/internal/user/update-user_20230803135955.ts ---


--- File: .history/src/controllers/internal/user/update-user_20230803140408.ts ---
import express, { NextFunction } from 'express';
import User from '../../../models/User.model'; // Assuming this is the location of your User model

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
    const updates = req.body;
    try {
        const user = await User.findById(req.params.id);
        if (!user) {
            return res.status(404).send();
        }
        Object.keys(updates).forEach((update) => user[update] = updates[update]);
        await user.save();
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

--- File: .history/src/controllers/internal/user/update-user_20230803140541.ts ---
import express, { NextFunction } from 'express';
import User from '../../../models/User.model'; // Assuming this is the location of your User model

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  const updates = req.body;
  try {
      const user = await User.findById(req.body.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user/update-user_20230803140602.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../../models/User.model'; // Assuming this is the location of your User model

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  const updates = req.body;
  try {
      const user = await User.findById(req.body.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user/update-user_20230803140723.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../../models/User.model'; // Assuming this is the location of your User model

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  const updates = req.body;
  try {
      const user = await User.findById(req.body.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user/update-user_20230803142034.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../../models/User.model'; // Assuming this is the location of your User model

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user/update-user_20230803143024.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../../models/User.model'; // Assuming this is the location of your User model

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user-meal-plan_20230803174131.ts ---
import express, { NextFunction, Request, Response } from 'express';
import UserMealPlanModel from '../../models/UserMealPlan.model';

export const createUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { user, mealPlan, date } = req.body;
    const userMealPlan = new UserMealPlanModel({ user, mealPlan, date });
    await userMealPlan.save();

    res.status(201).json({
      message: 'UserMealPlan created successfully',
      userMealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const userMealPlan = await UserMealPlanModel.findById(req.params.id).populate('user').populate('mealPlan');
      if (!userMealPlan) {
          return res.status(404).send();
      }
      res.send(userMealPlan);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlan = await UserMealPlanModel.findByIdAndDelete(req.params.id);
    if (!userMealPlan) {
        return res.status(404).send();
    }
    res.send(userMealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user-meal-plan_20230803174244.ts ---
import express, { NextFunction, Request, Response } from 'express';
import UserMealPlanModel from '../../models/UserMealPlan.model';

export const createUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { user, mealPlan, date } = req.body;
    const userMealPlan = new UserMealPlanModel({ user, mealPlan, date });
    await userMealPlan.save();

    res.status(201).json({
      message: 'UserMealPlan created successfully',
      userMealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllUserMealPlans = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlans = await UserMealPlanModel.find({});
    res.send(userMealPlans);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const userMealPlan = await UserMealPlanModel.findById(req.params.id).populate('user').populate('mealPlan');
      if (!userMealPlan) {
          return res.status(404).send();
      }
      res.send(userMealPlan);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlan = await UserMealPlanModel.findByIdAndDelete(req.params.id);
    if (!userMealPlan) {
        return res.status(404).send();
    }
    res.send(userMealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user-meal-plan_20230803174256.ts ---
import express, { NextFunction, Request, Response } from 'express';
import UserMealPlanModel from '../../models/UserMealPlan.model';

export const createUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { user, mealPlan, date } = req.body;
    const userMealPlan = new UserMealPlanModel({ user, mealPlan, date });
    await userMealPlan.save();

    res.status(201).json({
      message: 'UserMealPlan created successfully',
      userMealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllUserMealPlans = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlans = await UserMealPlanModel.find({});
    res.send(userMealPlans);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const userMealPlan = await UserMealPlanModel.findById(req.params.id).populate('user').populate('mealPlan');
      if (!userMealPlan) {
          return res.status(404).send();
      }
      res.send(userMealPlan);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['user', 'mealPlan', 'date'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).json({ error: 'Invalid updates!' });
    }

    const userMealPlan = await UserMealPlanModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!userMealPlan) {
      return res.status(404).send();
    }

    res.send(userMealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlan = await UserMealPlanModel.findByIdAndDelete(req.params.id);
    if (!userMealPlan) {
        return res.status(404).send();
    }
    res.send(userMealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user-meal_20230803173848.ts ---


--- File: .history/src/controllers/internal/user-meal_20230803173851.ts ---


--- File: .history/src/controllers/internal/user-meal_20230803174132.ts ---
import express, { NextFunction, Request, Response } from 'express';
import UserMealPlanModel from '../../models/UserMealPlan.model';

export const createUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { user, mealPlan, date } = req.body;
    const userMealPlan = new UserMealPlanModel({ user, mealPlan, date });
    await userMealPlan.save();

    res.status(201).json({
      message: 'UserMealPlan created successfully',
      userMealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const userMealPlan = await UserMealPlanModel.findById(req.params.id).populate('user').populate('mealPlan');
      if (!userMealPlan) {
          return res.status(404).send();
      }
      res.send(userMealPlan);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlan = await UserMealPlanModel.findByIdAndDelete(req.params.id);
    if (!userMealPlan) {
        return res.status(404).send();
    }
    res.send(userMealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803143326.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model



export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803143412.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803143417.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154125.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate('workoutPlans');;
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154126.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate('workoutPlans');;
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154412.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan'
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154413.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan'
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154414.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan'
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154435.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };


export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan'
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154520.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };


export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan'
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154521.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };


export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan'
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154657.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };


export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154815.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };


export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'ExerciseMOdel'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154817.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };


export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'ExerciseModel'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154837.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };


export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803154838.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };


export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803155127.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803155143.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803155451.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803181116.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          })
          .populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan',
              populate: {
                path: 'Meals',
                model: 'Meal'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803181337.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan',
              populate: {
                path: 'meals.meal',
                model: 'Meal'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803181523.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'UserMealPlan',
              populate: {
                path: 'meals.meal',
                model: 'Meal'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803181740.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan',
              populate: {
                path: 'meals',
                model: 'Meal'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803181836.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'UserMealPlan',
              populate: {
                path: 'meals',
                model: 'MealPlan'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803181837.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'UserMealPlan',
              populate: {
                path: 'meals',
                model: 'MealPlan'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803182018.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'UserMealPlan',
              populate: {
                path: 'meals',
                model: 'Meal'
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803182029.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803182030.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803182031.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803194239.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

  export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803194601.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803201827.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          }).populate({
            path: 'aiChats'
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803202043.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          }).populate({
            path: 'aiChats',
            options: { limit: 3, sort: { createdAt: -1 }
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803202047.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          }).populate({
            path: 'aiChats',
            options: { limit: 3, sort: { createdAt: -1 }}
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803202048.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          }).populate({
            path: 'aiChats',
            options: { limit: 3, sort: { createdAt: -1 }}
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803202049.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          }).populate({
            path: 'aiChats',
            options: { limit: 3, sort: { createdAt: -1 }}
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/controllers/internal/user_20230803215141.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          }).populate({
            path: 'aiChats',
            options: { limit: 3, sort: { createdAt: -1 }}
          }).populate({
            path: 'points',
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: .history/src/models/AICoachChat.model_20230803123623.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachMessageDocument extends Document {
  user: IUserDocument;
  aiModel: string;
  message: string;
  date: Date;
}

const AICoachMessageSchema = new Schema<IAICoachMessageDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiModel: { type: String, required: true },
  message: { type: String, required: true },
  date: { type: Date, required: true },
});

const AICoachMessageModel = mongoose.model<IAICoachMessageDocument>('AICoachMessage', AICoachMessageSchema);

export default AICoachMessageModel;

--- File: .history/src/models/AICoachChat.model_20230803130252.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachChatDocument extends Document {
  user: IUserDocument;
  aiCoachName: string;
  messages: {
    from: 'User' | 'AICoach';
    body: string;
    createdAt: Date;
  }[];
}

const AICoachChatSchema = new Schema<IAICoachChatDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiCoachName: { type: String, required: true },
  messages: [{
    from: { type: String, enum: ['User', 'AICoach'], required: true },
    body: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
  }],
});

const AICoachChatModel = mongoose.model<IAICoachChatDocument>('AICoachChat', AICoachChatSchema);

export default AICoachChatModel;

--- File: .history/src/models/AICoachChat.model_20230803201421.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachChatDocument extends Document {
  user: IUserDocument;
  aiCoachName: string;
  messages: {
    from: 'User' | 'AICoach';
    body: string;
    createdAt: Date;
  }[];
}

const AICoachChatSchema = new Schema<IAICoachChatDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiCoachName: { type: String, required: true },
  messages: [{
    from: { type: String, enum: ['User', 'AICoach'], required: true },
    body: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
  }],
});

const AICoachChatModel = mongoose.model<IAICoachChatDocument>('AICoachChat', AICoachChatSchema);

export default AICoachChatModel;

--- File: .history/src/models/AICoachChat.model_20230803213101.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachChatDocument extends Document {
  user: IUserDocument;
  aiCoachName: string;
  messages: {
    from: 'User' | 'AICoach';
    body: string;
    createdAt: Date;
  }[];
}

const AICoachChatSchema = new Schema<IAICoachChatDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiCoachName: { type: String, required: true },
  messages: [{
    from: { type: String, enum: ['user', 'AICoach'], required: true },
    body: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
  }],
});

const AICoachChatModel = mongoose.model<IAICoachChatDocument>('AICoachChat', AICoachChatSchema);

export default AICoachChatModel;

--- File: .history/src/models/AICoachChat.model_20230803213126.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachChatDocument extends Document {
  user: IUserDocument;
  aiCoachName: string;
  messages: {
    from: 'User' | 'AICoach';
    body: string;
    createdAt: Date;
  }[];
}

const AICoachChatSchema = new Schema<IAICoachChatDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiCoachName: { type: String, required: true },
  messages: [{
    from: { type: String, required: true },
    body: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
  }],
});

const AICoachChatModel = mongoose.model<IAICoachChatDocument>('AICoachChat', AICoachChatSchema);

export default AICoachChatModel;

--- File: .history/src/models/AICoachChat.model_20230803213127.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachChatDocument extends Document {
  user: IUserDocument;
  aiCoachName: string;
  messages: {
    from: 'User' | 'AICoach';
    body: string;
    createdAt: Date;
  }[];
}

const AICoachChatSchema = new Schema<IAICoachChatDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiCoachName: { type: String, required: true },
  messages: [{
    from: { type: String, required: true },
    body: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
  }],
});

const AICoachChatModel = mongoose.model<IAICoachChatDocument>('AICoachChat', AICoachChatSchema);

export default AICoachChatModel;

--- File: .history/src/models/AICoachChat.model_20230803213713.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachChatDocument extends Document {
  user: IUserDocument;
  aiCoachName: string;
  messages: {
    from: 'User' | 'AICoach';
    body: string;
    createdAt: Date;
  }[];
}

const AICoachChatSchema = new Schema<IAICoachChatDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiCoachName: { type: String, required: true },
  messages: [{
    from: { type: String, enum: ['user', 'assistant', 'system'], required: true },
    body: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
  }],
});

const AICoachChatModel = mongoose.model<IAICoachChatDocument>('AICoachChat', AICoachChatSchema);

export default AICoachChatModel;

--- File: .history/src/models/AICoachMessage.model_20230803123527.ts ---


--- File: .history/src/models/AICoachMessage.model_20230803123552.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachMessageDocument extends Document {
  user: IUserDocument;
  aiModel: string;
  message: string;
  date: Date;
}

const AICoachMessageSchema = new Schema<IAICoachMessageDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiModel: { type: String, required: true },
  message: { type: String, required: true },
  date: { type: Date, required: true },
});

const AICoachMessageModel = mongoose.model<IAICoachMessageDocument>('AICoachMessage', AICoachMessageSchema);

export default AICoachMessageModel;

--- File: .history/src/models/AICoachMessage.model_20230803123624.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachMessageDocument extends Document {
  user: IUserDocument;
  aiModel: string;
  message: string;
  date: Date;
}

const AICoachMessageSchema = new Schema<IAICoachMessageDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiModel: { type: String, required: true },
  message: { type: String, required: true },
  date: { type: Date, required: true },
});

const AICoachMessageModel = mongoose.model<IAICoachMessageDocument>('AICoachMessage', AICoachMessageSchema);

export default AICoachMessageModel;

--- File: .history/src/models/Acheivement.model_20230803122900.ts ---


--- File: .history/src/models/Acheivement.model_20230803122902.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IAchievementDocument extends Document {
  name: string;
  description: string;
  icon: string; // URL to the icon image
  xp: number; // Amount of XP points awarded for this achievement
  condition: string; // Description of the condition to earn the achievement
}

const achievementSchema = new Schema<IAchievementDocument>({
  name: { type: String, required: true },
  description: { type: String, required: true },
  icon: { type: String, required: true },
  xp: { type: Number, required: true },
  condition: { type: String, required: true },
});

const Achievement = mongoose.model<IAchievementDocument>('Achievement', achievementSchema);

export default Achievement;

--- File: .history/src/models/Acheivement.model_20230803122904.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IAchievementDocument extends Document {
  name: string;
  description: string;
  icon: string; // URL to the icon image
  xp: number; // Amount of XP points awarded for this achievement
  condition: string; // Description of the condition to earn the achievement
}

const achievementSchema = new Schema<IAchievementDocument>({
  name: { type: String, required: true },
  description: { type: String, required: true },
  icon: { type: String, required: true },
  xp: { type: Number, required: true },
  condition: { type: String, required: true },
});

const Achievement = mongoose.model<IAchievementDocument>('Achievement', achievementSchema);

export default Achievement;

--- File: .history/src/models/ComminityPost.model_20230803122759.ts ---


--- File: .history/src/models/ComminityPost.model_20230803122802.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IComment {
  user: IUserDocument;
  content: string;
  date: Date;
}

export interface ICommunityPostDocument extends Document {
  user: IUserDocument;
  content: string;
  date: Date;
  likes: IUserDocument[];
  comments: IComment[];
}

const commentSchema = new Schema<IComment>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, default: Date.now },
});

const communityPostSchema = new Schema<ICommunityPostDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, default: Date.now },
  likes: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  comments: [commentSchema],
});

const CommunityPost = mongoose.model<ICommunityPostDocument>('CommunityPost', communityPostSchema);

export default CommunityPost;

--- File: .history/src/models/Exercise.model_20230803115039.ts ---


--- File: .history/src/models/Exercise.model_20230803115557.ts ---
import { ObjectId } from 'mongodb';
import mongoose, { Document, Schema } from 'mongoose';

export enum ExerciseType {
  ENDURANCE = 'endurance',
  CARDIO = 'cardio',
  RECOVERY = 'recovery',
  STRENGTH = 'strength',
  FLEXIBILITY = 'flexibility',
  MOBILITY = 'mobility',
  BALANCE = 'balance',
  PLYOMETRICS = 'plyometrics',
  FUNCTIONAL_TRAINING = 'functional_training',
  YOGA = 'yoga',
  PILATES = 'pilates',
  HIIT = 'hiit',
  INTERVAL_TRAINING = 'interval_training',
  CORE_STRENGTHENING = 'core_strengthening',
  AEROBICS = 'aerobics',
  DANCE = 'dance',
  SWIMMING = 'swimming',
  CYCLING = 'cycling',
  ROWING = 'rowing',
  CLIMBING = 'climbing',
  CROSSFIT = 'crossfit',
  MARTIAL_ARTS = 'martial_arts',
  SPORT_SPECIFIC_TRAINING = 'sport_specific_training',
  // Add more exercise types as needed
}

export interface IMuscleGroup {
  name: string;
}

export enum EquipmentType {
  BODYWEIGHT = 'bodyweight',
  DUMBBELLS = 'dumbbells',
  BARBELL = 'barbell',
  RESISTANCE_BANDS = 'resistance bands',
  CARDIO_MACHINE = 'cardio machine',
  TREADMILL = 'treadmill',
  EXERCISE_BIKE = 'exercise bike',
  ELLIPTICAL_MACHINE = 'elliptical machine',
  ROWING_MACHINE = 'rowing machine',
  KETTLEBELLS = 'kettlebells',
  MEDICINE_BALL = 'medicine ball',
  JUMP_ROPE = 'jump rope',
  // Add more equipment types as needed
}

export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: ExerciseType;
  tags: string[];
  explanation: string;
  equipment: EquipmentType[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, enum: Object.values(ExerciseType), required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], enum: Object.values(EquipmentType), required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120625.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export enum ExerciseType {
  ENDURANCE = 'endurance',
  CARDIO = 'cardio',
  RECOVERY = 'recovery',
  STRENGTH = 'strength',
  FLEXIBILITY = 'flexibility',
  MOBILITY = 'mobility',
  BALANCE = 'balance',
  PLYOMETRICS = 'plyometrics',
  FUNCTIONAL_TRAINING = 'functional_training',
  YOGA = 'yoga',
  PILATES = 'pilates',
  HIIT = 'hiit',
  INTERVAL_TRAINING = 'interval_training',
  CORE_STRENGTHENING = 'core_strengthening',
  AEROBICS = 'aerobics',
  DANCE = 'dance',
  SWIMMING = 'swimming',
  CYCLING = 'cycling',
  ROWING = 'rowing',
  CLIMBING = 'climbing',
  CROSSFIT = 'crossfit',
  MARTIAL_ARTS = 'martial_arts',
  SPORT_SPECIFIC_TRAINING = 'sport_specific_training',
  // Add more exercise types as needed
}

export interface IMuscleGroup {
  name: string;
}

export enum EquipmentType {
  BODYWEIGHT = 'bodyweight',
  DUMBBELLS = 'dumbbells',
  BARBELL = 'barbell',
  RESISTANCE_BANDS = 'resistance bands',
  CARDIO_MACHINE = 'cardio machine',
  TREADMILL = 'treadmill',
  EXERCISE_BIKE = 'exercise bike',
  ELLIPTICAL_MACHINE = 'elliptical machine',
  ROWING_MACHINE = 'rowing machine',
  KETTLEBELLS = 'kettlebells',
  MEDICINE_BALL = 'medicine ball',
  JUMP_ROPE = 'jump rope',
  // Add more equipment types as needed
}

export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: ExerciseType;
  tags: string[];
  explanation: string;
  equipment: EquipmentType[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, enum: Object.values(ExerciseType), required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], enum: Object.values(EquipmentType), required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120723.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export enum ExerciseType {
  ENDURANCE = 'endurance',
  CARDIO = 'cardio',
  RECOVERY = 'recovery',
  STRENGTH = 'strength',
  FLEXIBILITY = 'flexibility',
  MOBILITY = 'mobility',
  BALANCE = 'balance',
  PLYOMETRICS = 'plyometrics',
  FUNCTIONAL_TRAINING = 'functional_training',
  YOGA = 'yoga',
  PILATES = 'pilates',
  HIIT = 'hiit',
  INTERVAL_TRAINING = 'interval_training',
  CORE_STRENGTHENING = 'core_strengthening',
  AEROBICS = 'aerobics',
  DANCE = 'dance',
  SWIMMING = 'swimming',
  CYCLING = 'cycling',
  ROWING = 'rowing',
  CLIMBING = 'climbing',
  CROSSFIT = 'crossfit',
  MARTIAL_ARTS = 'martial_arts',
  SPORT_SPECIFIC_TRAINING = 'sport_specific_training',
  // Add more exercise types as needed
}

export interface IMuscleGroup {
  name: string;
}

export enum EquipmentType {
  BODYWEIGHT = 'bodyweight',
  DUMBBELLS = 'dumbbells',
  BARBELL = 'barbell',
  RESISTANCE_BANDS = 'resistance bands',
  CARDIO_MACHINE = 'cardio machine',
  TREADMILL = 'treadmill',
  EXERCISE_BIKE = 'exercise bike',
  ELLIPTICAL_MACHINE = 'elliptical machine',
  ROWING_MACHINE = 'rowing machine',
  KETTLEBELLS = 'kettlebells',
  MEDICINE_BALL = 'medicine ball',
  JUMP_ROPE = 'jump rope',
  // Add more equipment types as needed
}

export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: ExerciseType;
  tags: string[];
  explanation: string;
  equipment: EquipmentType[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, enum: Object.values(ExerciseType), required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], enum: Object.values(EquipmentType), required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120824.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, enum: Object.values(ExerciseType), required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], enum: Object.values(EquipmentType), required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120902.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120903.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803121249.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);

export default ExerciseModel;




--- File: .history/src/models/Exercise.model_20230803121251.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);

export default ExerciseModel;




--- File: .history/src/models/Exercise.model_20230803144425.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}

export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[];
  targetMuscleGroups: IMuscleGroup[];
  videoSearchTerm: string;
  safetyInstructions: string;
  tips: string[];
  benefits: string[];
  variations: string[];
  warmUp: string;
  cooldown: string;
  prerequisites: string[];
  commonMistakes: string[];
  progression: string;
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true, default: "" },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true, default: "" },
  description: { type: String, required: true, default: "" },
  type: { type: String, required: true, default: "" },
  tags: { type: [String], required: true, default: [] },
  equipment: { type: [String], required: true, default: [] },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: true, default: [] },
  videoSearchTerm: { type: String, required: true, default: "" },
  safetyInstructions: { type: String, required: true, default: "" },
  tips: { type: [String], required: true, default: [] },
  benefits: { type: [String], required: true, default: [] },
  variations: { type: [String], required: true, default: [] },
  warmUp: { type: String, required: true, default: "" },
  cooldown: { type: String, required: true, default: "" },
  prerequisites: { type: [String], required: true, default: [] },
  commonMistakes: { type: [String], required: true, default: [] },
  progression: { type: String, required: true, default: "" },
});

const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);

export default ExerciseModel;

--- File: .history/src/models/Feedback.model_20230803122929.ts ---


--- File: .history/src/models/Feedback.model_20230803122938.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IFeedbackDocument extends Document {
  user: mongoose.Schema.Types.ObjectId; // Reference to the user who gave the feedback
  rating: number; // User's rating of the app
  comments: string; // User's comments
  date: Date; // Date when the feedback was given
}

const feedbackSchema = new Schema<IFeedbackDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  rating: { type: Number, required: true },
  comments: { type: String, required: false },
  date: { type: Date, default: Date.now },
});

const Feedback = mongoose.model<IFeedbackDocument>('Feedback', feedbackSchema);

export default Feedback;

--- File: .history/src/models/Feedback.model_20230803122939.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IFeedbackDocument extends Document {
  user: mongoose.Schema.Types.ObjectId; // Reference to the user who gave the feedback
  rating: number; // User's rating of the app
  comments: string; // User's comments
  date: Date; // Date when the feedback was given
}

const feedbackSchema = new Schema<IFeedbackDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  rating: { type: Number, required: true },
  comments: { type: String, required: false },
  date: { type: Date, default: Date.now },
});

const Feedback = mongoose.model<IFeedbackDocument>('Feedback', feedbackSchema);

export default Feedback;

--- File: .history/src/models/Group.model_20230803123154.ts ---


--- File: .history/src/models/Group.model_20230803123258.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IGroupDocument extends Document {
  name: string;
  description: string;
  createdDate: Date;
  members: IUserDocument[];
  // Add more fields as needed
}

const groupSchema = new Schema<IGroupDocument>({
  name: { type: String, required: true },
  description: { type: String, required: true },
  createdDate: { type: Date, default: Date.now },
  members: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  // Add more fields based on your requirements
});

const GroupModel = mongoose.model<IGroupDocument>('Group', groupSchema);

export default GroupModel;

--- File: .history/src/models/Ingredient.model_20230803113925.ts ---


--- File: .history/src/models/Ingredient.model_20230803113942.ts ---
import { Schema } from "mongoose";

export interface Ingredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}


const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

export default ingredientSchema

--- File: .history/src/models/Ingredient.model_20230803114024.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}


const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default ingredientSchema

--- File: .history/src/models/Ingredient.model_20230803114026.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default ingredientSchema

--- File: .history/src/models/Ingredient.model_20230803120720.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

export const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);


--- File: .history/src/models/Ingredient.model_20230803121238.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

export const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Ingredient.model_20230803121240.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Ingredient.model_20230803161139.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Ingredient.model_20230803161653.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  unit: string;
  caloriesPerUnit: number;
  macros: {
    carbohydrates: number;
    proteins: number;
    fats: number;
    cholesterol: number;
    fiber: number;
    water: number;
  };
  micros: {
    vitaminA: number;
    vitaminB1: number;
    vitaminB2: number;
    vitaminB3: number;
    vitaminB5: number;
    vitaminB6: number;
    vitaminB7: number;
    vitaminB9: number;
    vitaminB12: number;
    vitaminC: number;
    vitaminD: number;
    vitaminE: number;
    vitaminK: number;
    calcium: number;
    iron: number;
    magnesium: number;
    phosphorus: number;
    potassium: number;
    sodium: number;
    zinc: number;
    copper: number;
    manganese: number;
    selenium: number;
    iodine: number;
    chromium: number;
    molybdenum: number;
  };
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
  macros: {
    carbohydrates: { type: Number, required: true },
    proteins: { type: Number, required: true },
    fats: { type: Number, required: true },
    cholesterol: { type: Number, required: true },
    fiber: { type: Number, required: true },
    water: { type: Number, required: true },
  },
  micros: {
    vitaminA: { type: Number, required: true },
    vitaminB1: { type: Number, required: true },
    vitaminB2: { type: Number, required: true },
    vitaminB3: { type: Number, required: true },
    vitaminB5: { type: Number, required: true },
    vitaminB6: { type: Number, required: true },
    vitaminB7: { type: Number, required: true },
    vitaminB9: { type: Number, required: true },
    vitaminB12: { type: Number, required: true },
    vitaminC: { type: Number, required: true },
    vitaminD: { type: Number, required: true },
    vitaminE: { type: Number, required: true },
    vitaminK: { type: Number, required: true },
    calcium: { type: Number, required: true },
    iron: { type: Number, required: true },
    magnesium: { type: Number, required: true },
    phosphorus: { type: Number, required: true },
    potassium: { type: Number, required: true },
    sodium: { type: Number, required: true },
    zinc: { type: Number, required: true },
    copper: { type: Number, required: true },
    manganese: { type: Number, required: true },
    selenium: { type: Number, required: true },
    iodine: { type: Number, required: true },
    chromium: { type: Number, required: true },
    molybdenum: { type: Number, required: true },
  },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Ingredient.model_20230803161654.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  unit: string;
  caloriesPerUnit: number;
  macros: {
    carbohydrates: number;
    proteins: number;
    fats: number;
    cholesterol: number;
    fiber: number;
    water: number;
  };
  micros: {
    vitaminA: number;
    vitaminB1: number;
    vitaminB2: number;
    vitaminB3: number;
    vitaminB5: number;
    vitaminB6: number;
    vitaminB7: number;
    vitaminB9: number;
    vitaminB12: number;
    vitaminC: number;
    vitaminD: number;
    vitaminE: number;
    vitaminK: number;
    calcium: number;
    iron: number;
    magnesium: number;
    phosphorus: number;
    potassium: number;
    sodium: number;
    zinc: number;
    copper: number;
    manganese: number;
    selenium: number;
    iodine: number;
    chromium: number;
    molybdenum: number;
  };
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
  macros: {
    carbohydrates: { type: Number, required: true },
    proteins: { type: Number, required: true },
    fats: { type: Number, required: true },
    cholesterol: { type: Number, required: true },
    fiber: { type: Number, required: true },
    water: { type: Number, required: true },
  },
  micros: {
    vitaminA: { type: Number, required: true },
    vitaminB1: { type: Number, required: true },
    vitaminB2: { type: Number, required: true },
    vitaminB3: { type: Number, required: true },
    vitaminB5: { type: Number, required: true },
    vitaminB6: { type: Number, required: true },
    vitaminB7: { type: Number, required: true },
    vitaminB9: { type: Number, required: true },
    vitaminB12: { type: Number, required: true },
    vitaminC: { type: Number, required: true },
    vitaminD: { type: Number, required: true },
    vitaminE: { type: Number, required: true },
    vitaminK: { type: Number, required: true },
    calcium: { type: Number, required: true },
    iron: { type: Number, required: true },
    magnesium: { type: Number, required: true },
    phosphorus: { type: Number, required: true },
    potassium: { type: Number, required: true },
    sodium: { type: Number, required: true },
    zinc: { type: Number, required: true },
    copper: { type: Number, required: true },
    manganese: { type: Number, required: true },
    selenium: { type: Number, required: true },
    iodine: { type: Number, required: true },
    chromium: { type: Number, required: true },
    molybdenum: { type: Number, required: true },
  },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Ingredient.model_20230803161702.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  unit: string;
  caloriesPerUnit: number;
  macros: {
    carbohydrates: number;
    proteins: number;
    fats: number;
    cholesterol: number;
    fiber: number;
    water: number;
  };
  micros: {
    vitaminA: number;
    vitaminB1: number;
    vitaminB2: number;
    vitaminB3: number;
    vitaminB5: number;
    vitaminB6: number;
    vitaminB7: number;
    vitaminB9: number;
    vitaminB12: number;
    vitaminC: number;
    vitaminD: number;
    vitaminE: number;
    vitaminK: number;
    calcium: number;
    iron: number;
    magnesium: number;
    phosphorus: number;
    potassium: number;
    sodium: number;
    zinc: number;
    copper: number;
    manganese: number;
    selenium: number;
    iodine: number;
    chromium: number;
    molybdenum: number;
  };
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
  macros: {
    carbohydrates: { type: Number, required: true },
    proteins: { type: Number, required: true },
    fats: { type: Number, required: true },
    cholesterol: { type: Number, required: true },
    fiber: { type: Number, required: true },
    water: { type: Number, required: true },
  },
  micros: {
    vitaminA: { type: Number, required: true },
    vitaminB1: { type: Number, required: true },
    vitaminB2: { type: Number, required: true },
    vitaminB3: { type: Number, required: true },
    vitaminB5: { type: Number, required: true },
    vitaminB6: { type: Number, required: true },
    vitaminB7: { type: Number, required: true },
    vitaminB9: { type: Number, required: true },
    vitaminB12: { type: Number, required: true },
    vitaminC: { type: Number, required: true },
    vitaminD: { type: Number, required: true },
    vitaminE: { type: Number, required: true },
    vitaminK: { type: Number, required: true },
    calcium: { type: Number, required: true },
    iron: { type: Number, required: true },
    magnesium: { type: Number, required: true },
    phosphorus: { type: Number, required: true },
    potassium: { type: Number, required: true },
    sodium: { type: Number, required: true },
    zinc: { type: Number, required: true },
    copper: { type: Number, required: true },
    manganese: { type: Number, required: true },
    selenium: { type: Number, required: true },
    iodine: { type: Number, required: true },
    chromium: { type: Number, required: true },
    molybdenum: { type: Number, required: true },
  },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Ingredient.model_20230803163921.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  calories: number;
  serving_size_g: number;
  fat_total_g: number;
  fat_saturated_g: number;
  protein_g: number;
  sodium_mg: number;
  potassium_mg: number;
  cholesterol_mg: number;
  carbohydrates_total_g: number;
  fiber_g: number;
  sugar_g: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  calories: { type: Number, required: true },
  serving_size_g: { type: Number, required: true },
  fat_total_g: { type: Number, required: true },
  fat_saturated_g: { type: Number, required: true },
  protein_g: { type: Number, required: true },
  sodium_mg: { type: Number, required: true },
  potassium_mg: { type: Number, required: true },
  cholesterol_mg: { type: Number, required: true },
  carbohydrates_total_g: { type: Number, required: true },
  fiber_g: { type: Number, required: true },
  sugar_g: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>("Ingredient", ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Ingredient.model_20230803163922.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  calories: number;
  serving_size_g: number;
  fat_total_g: number;
  fat_saturated_g: number;
  protein_g: number;
  sodium_mg: number;
  potassium_mg: number;
  cholesterol_mg: number;
  carbohydrates_total_g: number;
  fiber_g: number;
  sugar_g: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  calories: { type: Number, required: true },
  serving_size_g: { type: Number, required: true },
  fat_total_g: { type: Number, required: true },
  fat_saturated_g: { type: Number, required: true },
  protein_g: { type: Number, required: true },
  sodium_mg: { type: Number, required: true },
  potassium_mg: { type: Number, required: true },
  cholesterol_mg: { type: Number, required: true },
  carbohydrates_total_g: { type: Number, required: true },
  fiber_g: { type: Number, required: true },
  sugar_g: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>("Ingredient", ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Ingredient.model_20230803163923.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  calories: number;
  serving_size_g: number;
  fat_total_g: number;
  fat_saturated_g: number;
  protein_g: number;
  sodium_mg: number;
  potassium_mg: number;
  cholesterol_mg: number;
  carbohydrates_total_g: number;
  fiber_g: number;
  sugar_g: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  calories: { type: Number, required: true },
  serving_size_g: { type: Number, required: true },
  fat_total_g: { type: Number, required: true },
  fat_saturated_g: { type: Number, required: true },
  protein_g: { type: Number, required: true },
  sodium_mg: { type: Number, required: true },
  potassium_mg: { type: Number, required: true },
  cholesterol_mg: { type: Number, required: true },
  carbohydrates_total_g: { type: Number, required: true },
  fiber_g: { type: Number, required: true },
  sugar_g: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>("Ingredient", ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Meal.model_20230803113629.ts ---


--- File: .history/src/models/Meal.model_20230803113720.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export { Meal };

--- File: .history/src/models/Meal.model_20230803114036.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export default Meal ;

--- File: .history/src/models/Meal.model_20230803120717.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

export const Meal = mongoose.model<IMeal>('Meal', mealSchema);


--- File: .history/src/models/Meal.model_20230803121226.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

export const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export default Meal;

--- File: .history/src/models/Meal.model_20230803121228.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export default Meal;

--- File: .history/src/models/MealPlan.model_20230803101601.ts ---
import mongoose, { Document, Schema, Types } from 'mongoose';

export type WeekDays = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
export type IMealPlan = Record<WeekDays, Types.ObjectId[]>;

export interface IMealPlanDocument extends IMealPlan, Document {}

const MealPlanSchema = new Schema<IMealPlanDocument>({
  monday: { type: [Schema.Types.ObjectId], required: false },
  tuesday: { type: [Schema.Types.ObjectId], required: false },
  wednesday: { type: [Schema.Types.ObjectId], required: false },
  thursday: { type: [Schema.Types.ObjectId], required: false },
  friday: { type: [Schema.Types.ObjectId], required: false },
  saturday: { type: [Schema.Types.ObjectId], required: false },
  sunday: { type: [Schema.Types.ObjectId], required: false },
});

export const MealPlanModel = mongoose.model<IMealPlanDocument>('MealPlan', MealPlanSchema);

--- File: .history/src/models/MealPlan.model_20230803112841.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMealPlan extends Document {
    startDate: Date;
    endDate: Date;
    meals: mongoose.Schema.Types.ObjectId[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Recipe' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803113703.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMealPlan extends Document {
  user: IUser;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803120012.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUser;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803120014.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803120712.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

export const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);


--- File: .history/src/models/MealPlan.model_20230803121218.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

export const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803121220.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803175617.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlanMeal {
  meal: IMeal;
  date: Date;
}

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMealPlanMeal[];
}

const MealPlanMealSchema = new Schema({
  meal: { type: mongoose.Schema.Types.ObjectId, ref: 'Meal', required: true },
  date: { type: Date, required: true },
});

const MealPlanSchema = new Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true },
  meals: [MealPlanMealSchema],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', MealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803175618.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlanMeal {
  meal: IMeal;
  date: Date;
}

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMealPlanMeal[];
}

const MealPlanMealSchema = new Schema({
  meal: { type: mongoose.Schema.Types.ObjectId, ref: 'Meal', required: true },
  date: { type: Date, required: true },
});

const MealPlanSchema = new Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true },
  meals: [MealPlanMealSchema],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', MealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803175619.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlanMeal {
  meal: IMeal;
  date: Date;
}

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMealPlanMeal[];
}

const MealPlanMealSchema = new Schema({
  meal: { type: mongoose.Schema.Types.ObjectId, ref: 'Meal', required: true },
  date: { type: Date, required: true },
});

const MealPlanSchema = new Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true },
  meals: [MealPlanMealSchema],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', MealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803180118.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/Notification.model_20230803123127.ts ---


--- File: .history/src/models/Notification.model_20230803123138.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface INotificationDocument extends Document {
  user: IUserDocument;
  content: string;
  date: Date;
  viewed: boolean;
}

const NotificationSchema = new Schema<INotificationDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, required: true },
  viewed: { type: Boolean, default: false },
});

const NotificationModel = mongoose.model<INotificationDocument>('Notification', NotificationSchema);

export default NotificationModel;

--- File: .history/src/models/Notification.model_20230803123139.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface INotificationDocument extends Document {
  user: IUserDocument;
  content: string;
  date: Date;
  viewed: boolean;
}

const NotificationSchema = new Schema<INotificationDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, required: true },
  viewed: { type: Boolean, default: false },
});

const NotificationModel = mongoose.model<INotificationDocument>('Notification', NotificationSchema);

export default NotificationModel;

--- File: .history/src/models/Payment.model_20230803123040.ts ---


--- File: .history/src/models/Payment.model_20230803123042.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IPaymentDocument extends Document {
  user: IUserDocument;
  amount: number;
  date: Date;
  service: string;
  subscriptionType: string;
  transactionId: string;
  status: string;
}

const paymentSchema = new Schema<IPaymentDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  date: { type: Date, required: true },
  service: { type: String, required: true },
  subscriptionType: { type: String, required: true },
  transactionId: { type: String, required: true },
  status: { type: String, required: true },
});

const PaymentModel = mongoose.model<IPaymentDocument>('Payment', paymentSchema);

export default PaymentModel;

--- File: .history/src/models/Pts.model_20230803121605.ts ---


--- File: .history/src/models/Pts.model_20230803121624.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPtsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PTSSchema = new Schema<IPtsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

export const PTSModel = mongoose.model<IPtsDocument>('PTS', PTSSchema);

export default PTSModel;

--- File: .history/src/models/Pts.model_20230803121627.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPtsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PTSSchema = new Schema<IPtsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PTSModel = mongoose.model<IPtsDocument>('PTS', PTSSchema);

export default PTSModel;

--- File: .history/src/models/Pts.model_20230803214004.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPtsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PTSSchema = new Schema<IPtsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PTSModel = mongoose.model<IPtsDocument>('Pts', PTSSchema);

export default PTSModel;

--- File: .history/src/models/Pts.model_20230803214145.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPointsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PointsSchema = new Schema<IPointsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PTSModel = mongoose.model<IPointsDocument>('Pts', PointsSchema);

export default PTSModel;

--- File: .history/src/models/Pts.model_20230803214148.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPointsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PointsSchema = new Schema<IPointsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PTSModel = mongoose.model<IPointsDocument>('Points', PointsSchema);

export default PTSModel;

--- File: .history/src/models/Pts.model_20230803214200.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPointsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PointsSchema = new Schema<IPointsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PTSModel = mongoose.model<IPointsDocument>('Points', PointsSchema);

export default PointsModel;

--- File: .history/src/models/Pts.model_20230803214203.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPointsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PointsSchema = new Schema<IPointsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PointsModel = mongoose.model<IPointsDocument>('Points', PointsSchema);

export default PointsModel;

--- File: .history/src/models/Recipe.model_20230803101601.ts ---
import { ObjectId } from 'mongodb';
import mongoose, { Document, Schema } from 'mongoose';
import { IIngredient } from '../interfaces/IIngredient';
import { IRecipe } from '../interfaces/IRecipe';
import { IReview } from '../interfaces/IReview';

export interface IRecipeDocument extends Document, IRecipe {}

const IngredientSchema = new Schema<IIngredient>({
  name: { type: String, required: true },
  quantity: { type: String, required: false },
  unit: { type: String, required: false },
});

const ReviewSchema = new Schema<IReview>({
  username: { type: String, required: true },
  rating: { type: Number, required: true },
  text: { type: String, required: true },
});

const RecipeSchema = new Schema<IRecipeDocument>({
  _id: { type: ObjectId, required: false },
  title: { type: String, required: true },
  prepTime: { type: String, required: true },
  mealType: { type: String, required: false },
  calories: { type: String || Number, required: true },
  description: { type: String, required: true },
  ingredients: { type: [IngredientSchema], required: true },
  instructions: { type: [String], required: true },
  productImage: { type: ObjectId, ref: 'ProductImage', required: false },
  include: { type: [String], required: true },
  exclude: { type: [String], required: true },
  midjourney: { type: String, required: true },
  tags: { type: [String], required: false },
  shoppingList: { type: [], required: false },
  user: { type: ObjectId, ref: 'User', required: false },
  reviews: { type: [ReviewSchema], required: true },
});

export const RecipeModel = mongoose.model<IRecipeDocument>('Recipe', RecipeSchema);

--- File: .history/src/models/Recipe.model_20230803113300.ts ---
import mongoose from "mongoose";

export interface IRecipe extends Document {
  name: string;
  ingredients: Ingredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803113320.ts ---
import mongoose from "mongoose";

export interface Ingredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

export interface IRecipe extends Document {
  name: string;
  ingredients: Ingredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803113324.ts ---
import mongoose, { Schema } from "mongoose";

export interface Ingredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

export interface IRecipe extends Document {
  name: string;
  ingredients: Ingredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803113917.ts ---
import mongoose, { Schema } from "mongoose";


export interface IRecipe extends Document {
  name: string;
  ingredients: Ingredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114052.ts ---
import mongoose, { Schema } from "mongoose";
import ingredientSchema, { IIngredient } from "./Ingredient.model";


export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114153.ts ---
import mongoose, { Schema } from "mongoose";
import ingredientSchema, { IIngredient } from "./Ingredient.model";


export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114333.ts ---
import mongoose, { Schema } from "mongoose";
import ingredientSchema, { IIngredient } from "./Ingredient.model";


export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114336.ts ---
import mongoose, { Schema } from "mongoose";
import { IIngredient } from "./Ingredient.model";


export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114337.ts ---
import mongoose, { Schema } from "mongoose";
import { IIngredient } from "./Ingredient.model";

export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803120707.ts ---
import mongoose, { Schema } from "mongoose";
import { IIngredient } from "./Ingredient.model";

export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

export const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);


--- File: .history/src/models/Recipe.model_20230803121211.ts ---
import mongoose, { Schema } from "mongoose";
import { IIngredient } from "./Ingredient.model";

export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export default Recipe;

--- File: .history/src/models/Recipe.model_20230803170840.ts ---
import mongoose, { Schema, Document } from "mongoose";
import { IIngredient } from "./Ingredient.model";

interface IRecipeIngredient {
  ingredient: IIngredient;
  quantity: number;
}

export interface IRecipe extends Document {
  name: string;
  ingredients: IRecipeIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeIngredientSchema = new Schema({
  ingredient: { type: Schema.Types.ObjectId, ref: 'Ingredient', required: true },
  quantity: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [recipeIngredientSchema],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export default Recipe;

--- File: .history/src/models/Recipe.model_20230803170841.ts ---
import mongoose, { Schema, Document } from "mongoose";
import { IIngredient } from "./Ingredient.model";

interface IRecipeIngredient {
  ingredient: IIngredient;
  quantity: number;
}

export interface IRecipe extends Document {
  name: string;
  ingredients: IRecipeIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeIngredientSchema = new Schema({
  ingredient: { type: Schema.Types.ObjectId, ref: 'Ingredient', required: true },
  quantity: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [recipeIngredientSchema],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export default Recipe;

--- File: .history/src/models/User.model_20230803101255.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803112212.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803112941.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: mongoose.Schema.Types.ObjectId[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803113002.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: mongoose.Schema.Types.ObjectId[];
    fitnessPlans: mongoose.Schema.Types.ObjectId[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    fitnessPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'FitnessPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803115950.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: mongoose.Schema.Types.ObjectId[];
    fitnessPlans: mongoose.Schema.Types.ObjectId[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    fitnessPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'FitnessPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803115952.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: mongoose.Schema.Types.ObjectId[];
    fitnessPlans: mongoose.Schema.Types.ObjectId[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    fitnessPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'FitnessPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803120100.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    fitnessPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'FitnessPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803120130.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803120131.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803120703.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

export const User = mongoose.model<IUserDocument>('User', userSchema);

--- File: .history/src/models/User.model_20230803121024.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

export const User = mongoose.model<IUserDocument>('User', userSchema);

--- File: .history/src/models/User.model_20230803121158.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default USer;

--- File: .history/src/models/User.model_20230803121200.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803121816.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, ObjectId, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';


export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription extends Document {
    user: ObjectId; // Reference to the user who owns the subscription
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

  
export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803121931.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';


export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803121948.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803122639.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803122648.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803123753.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachMessageDocument } from './AICoachMessage.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiCoachMessages: IAICoachMessageDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiCoachMessages: [{ type: mongoose.Schema.Types.ObjectId, ref: 'AICoachMessage' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803123754.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachMessageDocument } from './AICoachMessage.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiCoachMessages: IAICoachMessageDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiCoachMessages: [{ type: mongoose.Schema.Types.ObjectId, ref: 'AICoachMessage' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803124041.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803124042.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803130238.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803131341.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: String, required: true },
        endDate: { type: String, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803131342.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: String, required: true },
        endDate: { type: String, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803131517.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics', required: false },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: false },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803131647.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: String, required: true },
        endDate: { type: String, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803131648.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: String, required: true },
        endDate: { type: String, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803131649.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: String, required: true },
        endDate: { type: String, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803132852.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803132853.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803132931.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803132932.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133128.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133133.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133405.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133415.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133419.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133420.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133450.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: false },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133451.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: false },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133452.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: false },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133819.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String},
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133822.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133830.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133832.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133841.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803133842.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803134827.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803134828.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: false },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803134856.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803134858.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803134859.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: false,
        },
        startDate: { type: String, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803134905.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: String, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803134923.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default:: SubscriptionType.FREE
        },
        startDate: { type: String, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803134925.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default:: SubscriptionType.FREE
        },
        startDate: { type: String, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803134928.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: String, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803135002.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: String, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803135130.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: String, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803135220.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803135224.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803135228.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803135232.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803140718.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803191058.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema, 'users', 'userDB');

export default User; 

--- File: .history/src/models/User.model_20230803191605.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema, 'users', 'userDB');

export default User; 

--- File: .history/src/models/User.model_20230803191611.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803191612.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803191849.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803192204.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803192332.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema, 'users', 'Users');

export default User; 

--- File: .history/src/models/User.model_20230803192345.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803214840.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointtsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803214841.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPtsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803214846.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803214848.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    pts: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803215032.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    pts: { type: mongoose.Schema.Types.ObjectId, ref: 'PTS' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803215041.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803215043.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803215044.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803215045.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803215047.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803215056.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803215057.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803215122.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/User.model_20230803222425.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

  const user = {
    foodPreferences: [
      "dietaryRequirements": ["Vegetarian"],
      "fitnessGoals": ["Lose weight", "Build muscle"],
      "preferredCuisine": ["Italian", "Asian"],
    ]
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: .history/src/models/UserChat.model_20230803123317.ts ---


--- File: .history/src/models/UserChat.model_20230803123408.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IMessage {
  sender: IUserDocument;
  message: string;
  timestamp: Date;
}

export interface IUserChatDocument extends Document {
  participants: IUserDocument[];
  messages: IMessage[];
}

const messageSchema = new Schema<IMessage>({
  sender: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  message: { type: String, required: true },
  timestamp: { type: Date, default: Date.now },
});

const userChatSchema = new Schema<IUserChatDocument>({
  participants: [{ type: Schema.Types.ObjectId, ref: 'User', required: true }],
  messages: [messageSchema],
});

const UserChat = mongoose.model<IUserChatDocument>('UserChat', userChatSchema);

export default UserChat;

--- File: .history/src/models/UserMealPlan.model_20230803120008.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan.model_20230803121150.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

export default UserMealPlanModel

--- File: .history/src/models/UserMealPlan_20230803115733 ---


--- File: .history/src/models/UserMealPlan_20230803115741 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User';
import { IMealPlanDocument } from './MealPlan';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlanDocument;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115816 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlanDocument } from './MealPlan';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlanDocument;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115825 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlanDocument } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlanDocument;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115829 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlanDocument;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115832 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115834 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803120007 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803120009 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMetrics.model_20230803111806.ts ---


--- File: .history/src/models/UserMetrics.model_20230803111813.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

export default UserMetrics;

--- File: .history/src/models/UserMetrics.model_20230803120657.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

export const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

--- File: .history/src/models/UserMetrics.model_20230803121139.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

export default UserMetrics

--- File: .history/src/models/UserMetrics.model_20230803121140.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

export default UserMetrics;

--- File: README.md ---
# bodyone-backend-node
Server-side logic for the BodyOne app, built with Node.js. Handles API integrations, database connections, and processes requests from the frontend. Follows Airbnb's JavaScript Style Guide.


--- File: package-lock.json ---
{
  "name": "bodyone-backend-node",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "bodyone-backend-node",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@types/supertest": "^2.0.12",
        "axios": "^1.4.0",
        "bcrypt": "^5.1.0",
        "bcryptjs": "^2.4.3",
        "bull": "^4.10.4",
        "cors": "^2.8.5",
        "express": "^4.18.2",
        "express-session": "~1.17.0",
        "helmet": "^7.0.0",
        "ioredis": "^5.3.2",
        "jest-mock-extended": "^3.0.4",
        "joi": "^17.9.2",
        "jsonwebtoken": "^9.0.0",
        "lodash": "^4.17.21",
        "midjourney": "^2.2.31",
        "mongodb": "^5.5.0",
        "mongoose": "^7.1.1",
        "node-fetch": "^2.6.11",
        "openai": "^3.3.0",
        "passport": "^0.6.0",
        "passport-jwt": "^4.0.1",
        "passport-local": "^1.0.0",
        "redis": "^4.6.6",
        "ts-node": "^10.9.1",
        "typescript": "^5.0.4"
      },
      "devDependencies": {
        "@types/bcrypt": "^5.0.0",
        "@types/bcryptjs": "^2.4.2",
        "@types/cors": "^2.8.13",
        "@types/express-session": "~1.17.0",
        "@types/jest": "^29.5.1",
        "@types/jsonwebtoken": "^9.0.2",
        "@types/mocha": "^10.0.1",
        "@types/mongoose": "^5.11.97",
        "@types/node": "^20.1.7",
        "@types/node-fetch": "^2.6.4",
        "@types/passport": "^1.0.12",
        "@types/passport-jwt": "^3.0.8",
        "@types/passport-local": "^1.0.35",
        "dotenv": "^16.0.3",
        "nodemon": "^2.0.22",
        "supertest": "^6.3.3",
        "ts-jest": "^29.1.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz",
      "integrity": "sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==",
      "peer": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.22.5.tgz",
      "integrity": "sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==",
      "dependencies": {
        "@babel/highlight": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.22.9.tgz",
      "integrity": "sha512-5UamI7xkUcJ3i9qVDS+KFDEK8/7oJ55/sJMB1Ge7IEapr7KfdfV/HErR+koZwOfd+SgtFKOKRhRakdg++DcJpQ==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.22.9.tgz",
      "integrity": "sha512-G2EgeufBcYw27U4hhoIwFcgc1XU7TlXJ3mv04oOv1WCuo900U/anZSPzEqNjwdjgffkk2Gs0AN0dW1CKVLcG7w==",
      "peer": true,
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.9",
        "@babel/helper-compilation-targets": "^7.22.9",
        "@babel/helper-module-transforms": "^7.22.9",
        "@babel/helpers": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.8",
        "@babel/types": "^7.22.5",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.2",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "peer": true
    },
    "node_modules/@babel/core/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/core/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.22.9.tgz",
      "integrity": "sha512-KtLMbmicyuK2Ak/FTCJVbDnkN1SlT8/kceFTiuDiiRUUSMnHMidxSCdG4ndkTOHHpoomWe/4xkvHkEOncwjYIw==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5",
        "@jridgewell/gen-mapping": "^0.3.2",
        "@jridgewell/trace-mapping": "^0.3.17",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.9.tgz",
      "integrity": "sha512-7qYrNM6HjpnPHJbopxmb8hSPoZ0gsX8IvUS32JGVoy+pU9e5N0nLr1VjJoR6kA4d9dmGLxNYOjeB8sUDal2WMw==",
      "peer": true,
      "dependencies": {
        "@babel/compat-data": "^7.22.9",
        "@babel/helper-validator-option": "^7.22.5",
        "browserslist": "^4.21.9",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "peer": true,
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "peer": true
    },
    "node_modules/@babel/helper-environment-visitor": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz",
      "integrity": "sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-function-name": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz",
      "integrity": "sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.22.5",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-hoist-variables": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz",
      "integrity": "sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz",
      "integrity": "sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.22.9.tgz",
      "integrity": "sha512-t+WA2Xn5K+rTeGtC8jCsdAH52bjggG5TKRuRrAGNM/mjIbO4GxvlLMFOEz9wXY5I2XQ60PMFsAG2WIcG82dQMQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-module-imports": "^7.22.5",
        "@babel/helper-simple-access": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/helper-validator-identifier": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz",
      "integrity": "sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz",
      "integrity": "sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-split-export-declaration": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz",
      "integrity": "sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz",
      "integrity": "sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz",
      "integrity": "sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz",
      "integrity": "sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.22.6.tgz",
      "integrity": "sha512-YjDs6y/fVOYFV8hAf1rxd1QvR9wJe1pDBZ2AREKq/SDayfPzgk0PBnVuTCE5X1acEpMMNOVUqoe+OwiZGJ+OaA==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.6",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.22.5.tgz",
      "integrity": "sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.22.5",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "node_modules/@babel/highlight/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.22.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.22.7.tgz",
      "integrity": "sha512-7NF8pOkHP5o2vpmGgNGcfAeCvOYhGLyA3Z4eBQkT1RJlWu47n63bCs93QfJ2hIAFCil7L5P2IWhs1oToVgrL0Q==",
      "peer": true,
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.22.5.tgz",
      "integrity": "sha512-gvyP4hZrgrs/wWMaocvxZ44Hw0b3W8Pe+cMxc8V1ULQ07oh8VNbIRaoD1LRZVTvD+0nieDKjfgKg89sD7rrKrg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.22.5.tgz",
      "integrity": "sha512-1mS2o03i7t1c6VzH6fdQ3OA8tcEIxwG18zIPRp+UY1Ihv6W+XZzBCVxExF9upussPXJ0xE9XRHwMoNs1ep/nRQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.5.tgz",
      "integrity": "sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.22.5",
        "@babel/parser": "^7.22.5",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.22.8",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.22.8.tgz",
      "integrity": "sha512-y6LPR+wpM2I3qJrsheCTwhIinzkETbplIgPBbwvqPKc+uljeA5gP+3nP8irdYt1mjQaDnlIcG+dw8OjAco4GXw==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.7",
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-function-name": "^7.22.5",
        "@babel/helper-hoist-variables": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/types": "^7.22.5",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/traverse/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/@babel/types": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.22.5.tgz",
      "integrity": "sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-string-parser": "^7.22.5",
        "@babel/helper-validator-identifier": "^7.22.5",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "peer": true
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "node_modules/@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@huggingface/inference": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@huggingface/inference/-/inference-2.6.1.tgz",
      "integrity": "sha512-qFYchgOCPeEkZJKiSr7Kz62QwukJtgkeQCT7Q0SSKUcvHpTQVNJp6i/JrJMR4dBdzQysJ1SZDC0pLBBnnskTag==",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@ioredis/commands": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.2.0.tgz",
      "integrity": "sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg=="
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "peer": true,
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.6.2.tgz",
      "integrity": "sha512-0N0yZof5hi44HAR2pPS+ikJ3nzKNoZdVu8FffRf3wy47I7Dm7etk/3KetMdRUqzVd16V4O2m2ISpNTbnIuqy1w==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.6.2.tgz",
      "integrity": "sha512-Oj+5B+sDMiMWLhPFF+4/DvHOf+U10rgvCLGPHP8Xlsy/7QxS51aU/eBngudHlJXnaWD5EohAgJ4js+T6pa+zOg==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/reporters": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.5.0",
        "jest-config": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-resolve-dependencies": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/environment": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.6.2.tgz",
      "integrity": "sha512-AEcW43C7huGd/vogTddNNTDRpO6vQ2zaQNrttvWV18ArBx9Z56h7BIsXkNFJVOO4/kblWEQz30ckw0+L3izc+Q==",
      "peer": true,
      "dependencies": {
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-m6DrEJxVKjkELTVAztTLyS/7C92Y2b0VYqmDROYKLLALHn8T/04yPs70NADUYPrV3ruI+H3J0iUIuhkjp7vkfg==",
      "peer": true,
      "dependencies": {
        "expect": "^29.6.2",
        "jest-snapshot": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.6.2.tgz",
      "integrity": "sha512-6zIhM8go3RV2IG4aIZaZbxwpOzz3ZiM23oxAlkquOIole+G6TrbeXnykxWYlqF7kz2HlBjdKtca20x9atkEQYg==",
      "dependencies": {
        "jest-get-type": "^29.4.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.6.2.tgz",
      "integrity": "sha512-euZDmIlWjm1Z0lJ1D0f7a0/y5Kh/koLFMUBE5SUYWrmy8oNhJpbTBDAP6CxKnadcMLDoDf4waRYCe35cH6G6PA==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.6.2.tgz",
      "integrity": "sha512-cjuJmNDjs6aMijCmSa1g2TNG4Lby/AeU7/02VtpW+SLcZXzOLK2GpN2nLqcFjmhy3B3AoPeQVx7BnyOf681bAw==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/types": "^29.6.1",
        "jest-mock": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.6.2.tgz",
      "integrity": "sha512-sWtijrvIav8LgfJZlrGCdN0nP2EWbakglJY49J1Y5QihcQLfy7ovyxxjJBRXMNltgt4uPtEcFmIMbVshEDfFWw==",
      "peer": true,
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/schemas": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.0.tgz",
      "integrity": "sha512-rxLjXyJBTL4LQeJW3aKo0M/+GkCOXsO+8i9Iu7eDb6KwtP65ayoDsitrdPBtujxQ88k4wI2FNYfa6TOGwSn6cQ==",
      "dependencies": {
        "@sinclair/typebox": "^0.27.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.0.tgz",
      "integrity": "sha512-oA+I2SHHQGxDCZpbrsCQSoMLb3Bz547JnM+jUr9qEbuw0vQlWZfpPS7CO9J7XiwKicEz9OFn/IYoLkkiUD7bzA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.6.2.tgz",
      "integrity": "sha512-3VKFXzcV42EYhMCsJQURptSqnyjqCGbtLuX5Xxb6Pm6gUf1wIRIl+mandIRGJyWKgNKYF9cnstti6Ls5ekduqw==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.6.2.tgz",
      "integrity": "sha512-GVYi6PfPwVejO7slw6IDO0qKVum5jtrJ3KoLGbgBWyr2qr4GaxFV6su+ZAjdTX75Sr1DkMFRk09r2ZVa+wtCGw==",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.6.2.tgz",
      "integrity": "sha512-ZqCqEISr58Ce3U+buNFJYUktLJZOggfyvR+bZMaiV1e8B1SIvJbwZMrYz3gx/KAPn9EXmOmN+uB08yLCjWkQQg==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "29.6.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.1.tgz",
      "integrity": "sha512-tPKQNMPuXgvdOn2/Lg9HNfUvjYVGolt04Hp03f5hAk878uwOLikN+JzeLY0HcVgKgFl9Hs3EIqpu3WX27XNhnw==",
      "dependencies": {
        "@jest/schemas": "^29.6.0",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
      "peer": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "peer": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.18",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz",
      "integrity": "sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      }
    },
    "node_modules/@jridgewell/trace-mapping/node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.14",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
      "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
      "peer": true
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.2.tgz",
      "integrity": "sha512-9bfjwDxIDWmmOKusUcqdS4Rw+SETlp9Dy39Xui9BEGEk19dDwH0jhipwFzEff/pFg95NKymc6TOTbRKcWeRqyQ==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.2.tgz",
      "integrity": "sha512-lwriRAHm1Yg4iDf23Oxm9n/t5Zpw1lVnxYU3HnJPTi2lJRkKTrps1KVgvL6m7WvmhYVt/FIsssWay+k45QHeuw==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.2.tgz",
      "integrity": "sha512-MOI9Dlfrpi2Cuc7i5dXdxPbFIgbDBGgKR5F2yWEa6FVEtSWncfVNKW5AKjImAQ6CZlBK9tympdsZJ2xThBiWWA==",
      "cpu": [
        "arm"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.2.tgz",
      "integrity": "sha512-FU20Bo66/f7He9Fp9sP2zaJ1Q8L9uLPZQDub/WlUip78JlPeMbVL8546HbZfcW9LNciEXc8d+tThSJjSC+tmsg==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.2.tgz",
      "integrity": "sha512-gsWNDCklNy7Ajk0vBBf9jEx04RUxuDQfBse918Ww+Qb9HCPoGzS+XJTLe96iN3BVK7grnLiYghP/M4L8VsaHeA==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-win32-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.2.tgz",
      "integrity": "sha512-O+6Gs8UeDbyFpbSh2CPEz/UOrrdWPTBYNblZK5CxxLisYt4kGX3Sc+czffFonyjiGSq3jWLwJS/CCJc7tBr4sQ==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@redis/bloom": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/client": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.5.8.tgz",
      "integrity": "sha512-xzElwHIO6rBAqzPeVnCzgvrnBEcFL1P0w8P65VNLRkdVW8rOE58f52hdj0BDgmsdOm4f1EoXPZtH4Fh7M/qUpw==",
      "dependencies": {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        "yallist": "4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@redis/graph": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.0.tgz",
      "integrity": "sha512-16yZWngxyXPd+MJxeSr0dqh2AIOi8j9yXKcKCwVaKDbH3HTuETpDVPcLujhFYVPtYrngSco31BUcSa9TH31Gqg==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/json": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.4.tgz",
      "integrity": "sha512-LUZE2Gdrhg0Rx7AN+cZkb1e6HjoSKaeeW8rYnt89Tly13GBI5eP4CwDVr+MY8BAYfCg4/N15OUrtLoona9uSgw==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/search": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.1.3.tgz",
      "integrity": "sha512-4Dg1JjvCevdiCBTZqjhKkGoC5/BcB7k9j99kdMnaXFXg8x4eyOIVg9487CMv7/BUVkFLZCaIh8ead9mU15DNng==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/time-series": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.0.4.tgz",
      "integrity": "sha512-ThUIgo2U/g7cCuZavucQTQzA9g9JbDDY2f64u3AbAoz/8vE2lt2U37LamDUVChhaDA3IRT9R6VvJwqnUfTJzng==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@sideway/address": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.4.tgz",
      "integrity": "sha512-7vwq+rOHVWjyXxVlR76Agnvhy8I9rpzjosTESvmhNeXOXdZZB15Fl+TI9x1SiHZH5Jv2wTGduSxFDIaq0m3DUw==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "node_modules/@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA=="
    },
    "node_modules/@sinonjs/commons": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.0.tgz",
      "integrity": "sha512-jXBtWAF4vmdNmZgD5FoKsVLv3rPgDnLgPbU84LIJ3otV44vJlDRokVng5v8NFJdCf/da9legHcKaRuZs4L7faA==",
      "peer": true,
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "peer": true,
      "dependencies": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA=="
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag=="
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow=="
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA=="
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.1.tgz",
      "integrity": "sha512-aACu/U/omhdk15O4Nfb+fHgH/z3QsfQzpnvRZhYhThms83ZnAOZz7zZAWO7mn2yyNQaA4xTO8GLK3uqFU4bYYw==",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.4",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.4.tgz",
      "integrity": "sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.1.tgz",
      "integrity": "sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.1.tgz",
      "integrity": "sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/bcrypt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.0.tgz",
      "integrity": "sha512-agtcFKaruL8TmcvqbndlqHPSJgsolhf/qPWchFlgnW1gECTN/nKbFcoFnvKAQRFfKbh+BO6A3SWdJu9t+xF3Lw==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/bcryptjs": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@types/bcryptjs/-/bcryptjs-2.4.2.tgz",
      "integrity": "sha512-LiMQ6EOPob/4yUL66SZzu6Yh77cbzJFYll+ZfaPiPPFswtIlA/Fs1MzdKYA7JApHU49zQTbJGX3PDmCpIdDBRQ==",
      "dev": true
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dev": true,
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cookiejar": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.2.tgz",
      "integrity": "sha512-t73xJJrvdTjXrn4jLS9VSGRbz0nUY3cl2DMGDU48lKl+HR9dbbjW2A9r3g40VA++mQpy6uuHg33gy7du2BKpog=="
    },
    "node_modules/@types/cors": {
      "version": "2.8.13",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.13.tgz",
      "integrity": "sha512-RG8AStHlUiV5ysZQKq97copd2UmVYw3/pRMLefISZ3S1hK104Cwm7iLQ3fTKx+lsUH2CE8FlLaYeEA2LSeqYUA==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/express": {
      "version": "4.17.17",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.17.tgz",
      "integrity": "sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==",
      "dev": true,
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.17.35",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz",
      "integrity": "sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/express-session": {
      "version": "1.17.7",
      "resolved": "https://registry.npmjs.org/@types/express-session/-/express-session-1.17.7.tgz",
      "integrity": "sha512-L25080PBYoRLu472HY/HNCxaXY8AaGgqGC8/p/8+BYMhG0RDOLQ1wpXOpAzr4Gi5TGozTKyJv5BVODM5UNyVMw==",
      "dev": true,
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.6.tgz",
      "integrity": "sha512-Sig0SNORX9fdW+bQuTEovKj3uHcUL6LQKbCrrqb1X7J6/ReAbhCXRAhc+SMejhLELFj2QcyuxmUooZ4bt5ReSw==",
      "peer": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.1.tgz",
      "integrity": "sha512-/K3ds8TRAfBvi5vfjuz8y6+GiAYBZ0x4tXv1Av6CWBWn0IlADc+ZX9pMq7oU0fNQPnBwIZl3rmeLp6SBApbxSQ==",
      "dev": true
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz",
      "integrity": "sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g=="
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
      "integrity": "sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz",
      "integrity": "sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/jest": {
      "version": "29.5.3",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-29.5.3.tgz",
      "integrity": "sha512-1Nq7YrO/vJE/FYnqYyw0FS8LdrjExSgIiHyKg7xPpn+yi8Q4huZryKnkJatN1ZRH89Kw2v33/8ZMB7DuZeSLlA==",
      "dev": true,
      "dependencies": {
        "expect": "^29.0.0",
        "pretty-format": "^29.0.0"
      }
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-drE6uz7QBKq1fYqqoFKTDRdFCPHd5TCub75BM+D+cMx7NU9hUz7SESLfC2fSCXVFMO5Yj8sOWHuGqPgjc+fz0Q==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==",
      "dev": true
    },
    "node_modules/@types/mocha": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/@types/mocha/-/mocha-10.0.1.tgz",
      "integrity": "sha512-/fvYntiO1GeICvqbQ3doGDIP97vWmvFt83GKguJ6prmQM2iXZfFcq6YE8KteFyRtX2/h5Hf91BYvPodJKFYv5Q==",
      "dev": true
    },
    "node_modules/@types/mongoose": {
      "version": "5.11.97",
      "resolved": "https://registry.npmjs.org/@types/mongoose/-/mongoose-5.11.97.tgz",
      "integrity": "sha512-cqwOVYT3qXyLiGw7ueU2kX9noE8DPGRY6z8eUxudhXY8NZ7DMKYAxyZkLSevGfhCX3dO/AoX5/SO9lAzfjon0Q==",
      "deprecated": "Mongoose publishes its own types, so you do not need to install this package.",
      "dev": true,
      "dependencies": {
        "mongoose": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "20.4.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.4.6.tgz",
      "integrity": "sha512-q0RkvNgMweWWIvSMDiXhflGUKMdIxBo2M2tYM/0kEGDueQByFzK4KZAgu5YHGFNxziTlppNpTIBcqHQAxlfHdA=="
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.4",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.4.tgz",
      "integrity": "sha512-1ZX9fcN4Rvkvgv4E6PAY5WXUFWFcRWxZa3EW83UjycOB9ljJCedb2CupIP4RZMEwF/M3eTcCihbBRgwtGbg5Rg==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "node_modules/@types/passport": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/@types/passport/-/passport-1.0.12.tgz",
      "integrity": "sha512-QFdJ2TiAEoXfEQSNDISJR1Tm51I78CymqcBa8imbjo6dNNu+l2huDxxbDEIoFIwOSKMkOfHEikyDuZ38WwWsmw==",
      "dev": true,
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/passport-jwt": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/@types/passport-jwt/-/passport-jwt-3.0.9.tgz",
      "integrity": "sha512-5XJt+79emfgpuBvBQusUPylFIVtW1QVAAkTRwCbRJAmxUjmLtIqUU6V1ovpnHPu6Qut3mR5Juc+s7kd06roNTg==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/jsonwebtoken": "*",
        "@types/passport-strategy": "*"
      }
    },
    "node_modules/@types/passport-local": {
      "version": "1.0.35",
      "resolved": "https://registry.npmjs.org/@types/passport-local/-/passport-local-1.0.35.tgz",
      "integrity": "sha512-K4eLTJ8R0yYW8TvCqkjB0pTKoqfUSdl5PfZdidTjV2ETV3604fQxtY6BHKjQWAx50WUS0lqzBvKv3LoI1ZBPeA==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/passport": "*",
        "@types/passport-strategy": "*"
      }
    },
    "node_modules/@types/passport-strategy": {
      "version": "0.2.35",
      "resolved": "https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.35.tgz",
      "integrity": "sha512-o5D19Jy2XPFoX2rKApykY15et3Apgax00RRLf0RUotPDUsYrQa7x4howLYr9El2mlUApHmCMv5CZ1IXqKFQ2+g==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/passport": "*"
      }
    },
    "node_modules/@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==",
      "dev": true
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==",
      "dev": true
    },
    "node_modules/@types/send": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.1.tgz",
      "integrity": "sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==",
      "dev": true,
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.2.tgz",
      "integrity": "sha512-J2LqtvFYCzaj8pVYKw8klQXrLLk7TBZmQ4ShlcdkELFKGwGMfevMLneMMRkMgZxotOD9wg497LpC7O8PcvAmfw==",
      "dev": true,
      "dependencies": {
        "@types/http-errors": "*",
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.1.tgz",
      "integrity": "sha512-Hl219/BT5fLAaz6NDkSuhzasy49dwQS/DSdu4MdggFB8zcXv7vflBI3xp7FEmkmdDkBUI2bPUNeMttp2knYdxw=="
    },
    "node_modules/@types/superagent": {
      "version": "4.1.18",
      "resolved": "https://registry.npmjs.org/@types/superagent/-/superagent-4.1.18.tgz",
      "integrity": "sha512-LOWgpacIV8GHhrsQU+QMZuomfqXiqzz3ILLkCtKx3Us6AmomFViuzKT9D693QTKgyut2oCytMG8/efOop+DB+w==",
      "dependencies": {
        "@types/cookiejar": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/supertest": {
      "version": "2.0.12",
      "resolved": "https://registry.npmjs.org/@types/supertest/-/supertest-2.0.12.tgz",
      "integrity": "sha512-X3HPWTwXRerBZS7Mo1k6vMVR1Z6zmJcDVn5O/31whe0tnjE4te6ZJSJGq1RiqHPjzPdMTfjCFogDJmwng9xHaQ==",
      "dependencies": {
        "@types/superagent": "*"
      }
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "dependencies": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "17.0.24",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.24.tgz",
      "integrity": "sha512-6i0aC7jV6QzQB8ne1joVZ0eSFIstHsCrobmOtghM11yGlH0j43FKL2UhWdELkyps0zuf7qVTUVCCR+tgSlyLLw==",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.0",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.0.tgz",
      "integrity": "sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA=="
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.10.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.10.0.tgz",
      "integrity": "sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw==",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agent-base/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/agent-base/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "peer": true,
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
    },
    "node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "peer": true,
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "node_modules/axios": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.4.0.tgz",
      "integrity": "sha512-S4XCWMEmzvo64T9GfvQDOXgYRDJ/wsSZc7Jvdgx5u1sd0JwsuPLqb3SYmusag+edF6ziyMensPVqLTSc1PiSEA==",
      "dependencies": {
        "follow-redirects": "^1.15.0",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/axios/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/babel-jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.6.2.tgz",
      "integrity": "sha512-BYCzImLos6J3BH/+HvUCHG1dTf2MzmAB4jaVxHV+29RZLjR29XuYTmsf2sdDwkrb+FczkGo3kOhE7ga6sI0P4A==",
      "peer": true,
      "dependencies": {
        "@jest/transform": "^29.6.2",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.5.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.5.0.tgz",
      "integrity": "sha512-zSuuuAlTMT4mzLj2nPnUm6fsE6270vdOfnpbJ+RmruU75UhLFvL0N2NgI7xpeS7NaB6hGqmd5pVpGTDYvi4Q3w==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz",
      "integrity": "sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==",
      "peer": true,
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.5.0.tgz",
      "integrity": "sha512-JOMloxOqdiBSxMAzjRaH023/vvcaSaec49zvg+2LmNsktC7ei39LTJGw02J+9uUtTZUq6xbLyJ4dxe9sSmIuAg==",
      "peer": true,
      "dependencies": {
        "babel-plugin-jest-hoist": "^29.5.0",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/bcrypt": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.0.tgz",
      "integrity": "sha512-RHBS7HI5N5tEnGTmtR/pppX0mmDSBpQ4aCBsj7CEQfYXDcO74A8sIBYcJMuCsis2E81zDxeENYhv66oZwLiA+Q==",
      "hasInstallScript": true,
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.10",
        "node-addon-api": "^5.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.21.10",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.10.tgz",
      "integrity": "sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true,
      "dependencies": {
        "caniuse-lite": "^1.0.30001517",
        "electron-to-chromium": "^1.4.477",
        "node-releases": "^2.0.13",
        "update-browserslist-db": "^1.0.11"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bs-logger": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
      "dev": true,
      "dependencies": {
        "fast-json-stable-stringify": "2.x"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "peer": true,
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/bson": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-5.4.0.tgz",
      "integrity": "sha512-WRZ5SQI5GfUuKnPTNmAYPiKIof3ORXAF4IRU5UcgmivNIon01rWQlw5RUH954dpu8yGL8T59YShVddIPaU/gFA==",
      "engines": {
        "node": ">=14.20.1"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "peer": true
    },
    "node_modules/bull": {
      "version": "4.10.4",
      "resolved": "https://registry.npmjs.org/bull/-/bull-4.10.4.tgz",
      "integrity": "sha512-o9m/7HjS/Or3vqRd59evBlWCXd9Lp+ALppKseoSKHaykK46SmRjAilX98PgmOz1yeVaurt8D5UtvEt4bUjM3eA==",
      "dependencies": {
        "cron-parser": "^4.2.1",
        "debuglog": "^1.0.0",
        "get-port": "^5.1.1",
        "ioredis": "^5.0.0",
        "lodash": "^4.17.21",
        "msgpackr": "^1.5.2",
        "semver": "^7.3.2",
        "uuid": "^8.3.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001519",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001519.tgz",
      "integrity": "sha512-0QHgqR+Jv4bxHMp8kZ1Kn8CH55OikjKJ6JmKkZYP1F3D7w+lnFXF70nG5eNfsZS89jadi5Ywy5UCSKLAglIRkg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ci-info": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.8.0.tgz",
      "integrity": "sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
      "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==",
      "peer": true
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "peer": true,
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "peer": true,
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "peer": true
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==",
      "dev": true
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ=="
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "peer": true
    },
    "node_modules/cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "node_modules/cron-parser": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.8.1.tgz",
      "integrity": "sha512-jbokKWGcyU4gl6jAfX97E1gDpY12DJ1cLJZmoDzaAln/shZ+S3KBFBuA2Q6WeUN4gJf/8klnV1EfvhA2lK5IRQ==",
      "dependencies": {
        "luxon": "^3.2.1"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "peer": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/debuglog": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
      "integrity": "sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw==",
      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/dedent": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.1.tgz",
      "integrity": "sha512-+LxW+KLWxu3HW3M2w2ympwtqPrqYRzU8fqi6Fhd18fBALe15blJPI/I4+UHveMVG6lJqB4JNd4UG0S5cnVHwIg==",
      "peer": true,
      "peerDependencies": {
        "babel-plugin-macros": "^3.1.0"
      },
      "peerDependenciesMeta": {
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ=="
    },
    "node_modules/denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "dependencies": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/diff-sequences": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.4.3.tgz",
      "integrity": "sha512-ofrBgwpPhCD85kMKtE9RYFFq6OC1A89oW2vvgWZNCwxrUpRUILopY7lsYyMDSjc8g6U6aiO0Qubg6r4Wgt5ZnA==",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/motdotla/dotenv?sponsor=1"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/electron-to-chromium": {
      "version": "1.4.482",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.482.tgz",
      "integrity": "sha512-h+UqpfmEr1Qkk0zp7ej/jid7CXoq4m4QzW6wNTb0ELJ/BZCpA4wgUylBIMGCe621tnr4l5VmoHjdoSx2lbnNJA==",
      "peer": true
    },
    "node_modules/emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "peer": true,
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "peer": true,
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "peer": true,
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "peer": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-iAErsLxJ8C+S02QbLAwgSGSezLQK+XXRDt8IuFXFpwCNw2ECmzZSmjKcCaFVp5VRMk+WAvz6h6jokzEzBFZEuA==",
      "dependencies": {
        "@jest/expect-utils": "^29.6.2",
        "@types/node": "*",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express-session": {
      "version": "1.17.3",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.3.tgz",
      "integrity": "sha512-4+otWXlShYlG1Ma+2Jnn+xgKUZTMJ5QD3YvfilX3AcocOAbIkVylSWEklzALe/+Pu4qV6TYBj5GwOBFfdKqLBw==",
      "dependencies": {
        "cookie": "0.4.2",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "node_modules/fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "peer": true,
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "peer": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "dev": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/formidable": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.1.2.tgz",
      "integrity": "sha512-CM3GuJ57US06mlpQ47YcunuUZ9jpm8Vx+P2CGt2j7HpgkKZO/DJYQ0Bobim8G6PFQmK5lOqOOdUXboU+h73A4g==",
      "dev": true,
      "dependencies": {
        "dezalgo": "^1.0.4",
        "hexoid": "^1.0.0",
        "once": "^1.4.0",
        "qs": "^6.11.0"
      },
      "funding": {
        "url": "https://ko-fi.com/tunnckoCore/commissions"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "node_modules/gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/generic-pool": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "peer": true,
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "peer": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-port": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/get-port/-/get-port-5.1.1.tgz",
      "integrity": "sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
    },
    "node_modules/helmet": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.0.0.tgz",
      "integrity": "sha512-MsIgYmdBh460ZZ8cJC81q4XJknjG567wzEmv46WOBblDb6TUd3z8/GhgmsM9pn8g2B80tAJ4m5/d3Bi1KrSUBQ==",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/hexoid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "peer": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "peer": true,
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "node_modules/import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "peer": true,
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "peer": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ioredis": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.3.2.tgz",
      "integrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA==",
      "dependencies": {
        "@ioredis/commands": "^1.1.1",
        "cluster-key-slot": "^1.1.0",
        "debug": "^4.3.4",
        "denque": "^2.1.0",
        "lodash.defaults": "^4.2.0",
        "lodash.isarguments": "^3.1.0",
        "redis-errors": "^1.2.0",
        "redis-parser": "^3.0.0",
        "standard-as-callback": "^2.1.0"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/ioredis"
      }
    },
    "node_modules/ioredis/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/ioredis/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "peer": true
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.12.1.tgz",
      "integrity": "sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==",
      "peer": true,
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "peer": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "peer": true
    },
    "node_modules/isomorphic-ws": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-5.0.0.tgz",
      "integrity": "sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz",
      "integrity": "sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "peer": true,
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "peer": true,
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "peer": true,
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
      "peer": true,
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.6.2.tgz",
      "integrity": "sha512-8eQg2mqFbaP7CwfsTpCxQ+sHzw1WuNWL5UUvjnWP4hx2riGz9fPSzYOaU5q8/GqWn1TfgZIVTqYJygbGbWAANg==",
      "peer": true,
      "dependencies": {
        "@jest/core": "^29.6.2",
        "@jest/types": "^29.6.1",
        "import-local": "^3.0.2",
        "jest-cli": "^29.6.2"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.5.0.tgz",
      "integrity": "sha512-IFG34IUMUaNBIxjQXF/iu7g6EcdMrGRRxaUSw92I/2g2YC6vCdTltl4nHvt7Ci5nSJwXIkCu8Ka1DKF+X7Z1Ag==",
      "peer": true,
      "dependencies": {
        "execa": "^5.0.0",
        "p-limit": "^3.1.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.6.2.tgz",
      "integrity": "sha512-G9mN+KOYIUe2sB9kpJkO9Bk18J4dTDArNFPwoZ7WKHKel55eKIS/u2bLthxgojwlf9NLCVQfgzM/WsOVvoC6Fw==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.6.2",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.6.2",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-cli": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.6.2.tgz",
      "integrity": "sha512-TT6O247v6dCEX2UGHGyflMpxhnrL0DNqP2fRTKYm3nJJpCTfXX3GCMQPGFjXDoj0i5/Blp3jriKXFgdfmbYB6Q==",
      "peer": true,
      "dependencies": {
        "@jest/core": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "prompts": "^2.0.1",
        "yargs": "^17.3.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.6.2.tgz",
      "integrity": "sha512-VxwFOC8gkiJbuodG9CPtMRjBUNZEHxwfQXmIudSTzFWxaci3Qub1ddTRbFNQlD/zUeaifLndh/eDccFX4wCMQw==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-jest": "^29.6.2",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.6.2",
        "jest-environment-node": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@types/node": "*",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-diff": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.6.2.tgz",
      "integrity": "sha512-t+ST7CB9GX5F2xKwhwCf0TAR17uNDiaPTZnVymP9lw0lssa9vG+AFyDZoeIHStU3WowFFwT+ky+er0WVl2yGhA==",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.4.3",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.4.3.tgz",
      "integrity": "sha512-fzdTftThczeSD9nZ3fzA/4KkHtnmllawWrXO69vtI+L9WjEIuXWs4AmyME7lN5hU7dB0sHhuPfcKofRsUb/2Fg==",
      "peer": true,
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.6.2.tgz",
      "integrity": "sha512-MsrsqA0Ia99cIpABBc3izS1ZYoYfhIy0NNWqPSE0YXbQjwchyt6B1HD2khzyPe1WiJA7hbxXy77ZoUQxn8UlSw==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "jest-util": "^29.6.2",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.6.2.tgz",
      "integrity": "sha512-YGdFeZ3T9a+/612c5mTQIllvWkddPbYcN2v95ZH24oWMbGA4GGS2XdIF92QMhUhvrjjuQWYgUGW2zawOyH63MQ==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.4.3.tgz",
      "integrity": "sha512-J5Xez4nRRMjk8emnTpWrlkyb9pfRQQanDrvWHhsR1+VUfbwxi30eVcZFlcdGInRibU4G5LwHXpI7IRHU0CY+gg==",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.6.2.tgz",
      "integrity": "sha512-+51XleTDAAysvU8rT6AnS1ZJ+WHVNqhj1k6nTvN2PYP+HjU3kqlaKQ1Lnw3NYW3bm2r8vq82X0Z1nDDHZMzHVA==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.6.2.tgz",
      "integrity": "sha512-aNqYhfp5uYEO3tdWMb2bfWv6f0b4I0LOxVRpnRLAeque2uqOVVMLh6khnTcE2qJ5wAKop0HcreM1btoysD6bPQ==",
      "peer": true,
      "dependencies": {
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.6.2.tgz",
      "integrity": "sha512-4LiAk3hSSobtomeIAzFTe+N8kL6z0JtF3n6I4fg29iIW7tt99R7ZcIFW34QkX+DuVrf+CUe6wuVOpm7ZKFJzZQ==",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.6.2.tgz",
      "integrity": "sha512-vnIGYEjoPSuRqV8W9t+Wow95SDp6KPX2Uf7EoeG9G99J2OVh7OSwpS4B6J0NfpEIpfkBNHlBZpA2rblEuEFhZQ==",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.6.2.tgz",
      "integrity": "sha512-hoSv3lb3byzdKfwqCuT6uTscan471GUECqgNYykg6ob0yiAw3zYc7OrPnI9Qv8Wwoa4lC7AZ9hyS4AiIx5U2zg==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock-extended": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-3.0.5.tgz",
      "integrity": "sha512-/eHdaNPUAXe7f65gHH5urc8SbRVWjYxBqmCgax2uqOBJy8UUcCBMN1upj1eZ8y/i+IqpyEm4Kq0VKss/GCCTdw==",
      "dependencies": {
        "ts-essentials": "^7.0.3"
      },
      "peerDependencies": {
        "jest": "^24.0.0 || ^25.0.0 || ^26.0.0 || ^27.0.0 || ^28.0.0 || ^29.0.0",
        "typescript": "^3.0.0 || ^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "peer": true,
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.4.3.tgz",
      "integrity": "sha512-O4FglZaMmWXbGHSQInfXewIsd1LMn9p3ZXB/6r4FOkyhX2/iP/soMG98jGvk/A3HAN78+5VWcBGO0BJAPRh4kg==",
      "peer": true,
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.6.2.tgz",
      "integrity": "sha512-G/iQUvZWI5e3SMFssc4ug4dH0aZiZpsDq9o1PtXTV1210Ztyb2+w+ZgQkB3iOiC5SmAEzJBOHWz6Hvrd+QnNPw==",
      "peer": true,
      "dependencies": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.6.2.tgz",
      "integrity": "sha512-LGqjDWxg2fuQQm7ypDxduLu/m4+4Lb4gczc13v51VMZbVP5tSBILqVx8qfWcsdP8f0G7aIqByIALDB0R93yL+w==",
      "peer": true,
      "dependencies": {
        "jest-regex-util": "^29.4.3",
        "jest-snapshot": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.6.2.tgz",
      "integrity": "sha512-wXOT/a0EspYgfMiYHxwGLPCZfC0c38MivAlb2lMEAlwHINKemrttu1uSbcGbfDV31sFaPWnWJPmb2qXM8pqZ4w==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/environment": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.4.3",
        "jest-environment-node": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-leak-detector": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-resolve": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "jest-worker": "^29.6.2",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.6.2.tgz",
      "integrity": "sha512-2X9dqK768KufGJyIeLmIzToDmsN0m7Iek8QNxRSI/2+iPFYHF0jTwlO3ftn7gdKd98G/VQw9XJCk77rbTGZnJg==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/globals": "^29.6.2",
        "@jest/source-map": "^29.6.0",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.6.2.tgz",
      "integrity": "sha512-1OdjqvqmRdGNvWXr/YZHuyhh5DeaLp1p/F8Tht/MrMw4Kr1Uu/j4lRG+iKl1DAqUJDWxtQBMk41Lnf/JETYBRA==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.6.2",
        "semver": "^7.5.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.6.2.tgz",
      "integrity": "sha512-3eX1qb6L88lJNCFlEADKOkjpXJQyZRiavX1INZ4tRnrBVr2COd3RgcTLyUiEXMNBlDU/cgYq6taUS0fExrWW4w==",
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.6.2.tgz",
      "integrity": "sha512-vGz0yMN5fUFRRbpJDPwxMpgSXW1LDKROHfBopAvDcmD6s+B/s8WJrwi+4bfH4SdInBA5C3P3BI19dBtKzx1Arg==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watcher": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.6.2.tgz",
      "integrity": "sha512-GZitlqkMkhkefjfN/p3SJjrDaxPflqxEAv3/ik10OirZqJGYH5rPiIsgVcfof0Tdqg3shQGdEIxDBx+B4tuLzA==",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.6.2",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.6.2.tgz",
      "integrity": "sha512-l3ccBOabTdkng8I/ORCkADz4eSMKejTYv1vB/Z83UiubqhC1oQ5Li6dWCyqOIvSifGjUBxuvxvlm6KGK2DtuAQ==",
      "peer": true,
      "dependencies": {
        "@types/node": "*",
        "jest-util": "^29.6.2",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "peer": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/joi": {
      "version": "17.9.2",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.9.2.tgz",
      "integrity": "sha512-Itk/r+V4Dx0V3c7RLFdRh12IOjySm2/WGPMubBT92cQvRfYZhPM2W0hZlctjj72iES8jsRCwp7S/cRmWBnJ4nw==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0",
        "@hapi/topo": "^5.0.0",
        "@sideway/address": "^4.1.3",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "peer": true,
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "peer": true,
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "peer": true
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.1.tgz",
      "integrity": "sha512-K8wx7eJ5TPvEjuiVSkv167EVboBDv9PZdDoF7BgeQnBLVvZWW9clr2PsQHVJDTKaEIH5JBIwHujGcHp7GgI2eg==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash": "^4.17.21",
        "ms": "^2.1.1",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA==",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "peer": true
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "peer": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ=="
    },
    "node_modules/lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg=="
    },
    "node_modules/lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "dev": true
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/luxon": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
      "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "peer": true,
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "peer": true
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "dependencies": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/midjourney": {
      "version": "2.7.79",
      "resolved": "https://registry.npmjs.org/midjourney/-/midjourney-2.7.79.tgz",
      "integrity": "sha512-klnOas1htHIIDlw+SyX6/kaT3wNNbbtxJaFpEqnJnw5w++a1WfbjFhgiD4QWggbSvsACbJukV6LWsvgyvf7WOQ==",
      "dependencies": {
        "@huggingface/inference": "^2.5.0",
        "isomorphic-ws": "^5.0.0",
        "mime": "^3.0.0",
        "p-queue": "^6.6.2",
        "snowyflake": "^2.0.0",
        "throat": "^6.0.2",
        "tslib": "^2.5.0",
        "websocket-ts": "^1.1.1",
        "ws": "^8.13.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/midjourney/node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/mongodb": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.7.0.tgz",
      "integrity": "sha512-zm82Bq33QbqtxDf58fLWBwTjARK3NSvKYjyz997KSy6hpat0prjeX/kxjbPVyZY60XYPDNETaHkHJI2UCzSLuw==",
      "dependencies": {
        "bson": "^5.4.0",
        "mongodb-connection-string-url": "^2.6.0",
        "socks": "^2.7.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "optionalDependencies": {
        "saslprep": "^1.0.3"
      },
      "peerDependencies": {
        "@aws-sdk/credential-providers": "^3.201.0",
        "@mongodb-js/zstd": "^1.1.0",
        "kerberos": "^2.0.1",
        "mongodb-client-encryption": ">=2.3.0 <3",
        "snappy": "^7.2.2"
      },
      "peerDependenciesMeta": {
        "@aws-sdk/credential-providers": {
          "optional": true
        },
        "@mongodb-js/zstd": {
          "optional": true
        },
        "kerberos": {
          "optional": true
        },
        "mongodb-client-encryption": {
          "optional": true
        },
        "snappy": {
          "optional": true
        }
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "dependencies": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/tr46": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
      "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/whatwg-url": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
      "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
      "dependencies": {
        "tr46": "^3.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongoose": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-7.4.1.tgz",
      "integrity": "sha512-o3E5KHHiHdaiwCJG3+9r70sncRKki71Ktf/TfXdW6myu+53rtZ56uLl5ylkQiCf60V3COJuOeekcxXVsjQ7cBA==",
      "dependencies": {
        "bson": "^5.4.0",
        "kareem": "2.5.1",
        "mongodb": "5.7.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mongoose"
      }
    },
    "node_modules/mongoose/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "dependencies": {
        "debug": "4.x"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/mquery/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/mquery/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/msgpackr": {
      "version": "1.9.6",
      "resolved": "https://registry.npmjs.org/msgpackr/-/msgpackr-1.9.6.tgz",
      "integrity": "sha512-50rmb6+ZWvEm0vJn8R8CwI1Eavss3h5rgtKrcdUal3EkZcpqw82+xsmc7RoHb8fYB5V4EOU2NDaOitDAdO0t+w==",
      "optionalDependencies": {
        "msgpackr-extract": "^3.0.2"
      }
    },
    "node_modules/msgpackr-extract": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/msgpackr-extract/-/msgpackr-extract-3.0.2.tgz",
      "integrity": "sha512-SdzXp4kD/Qf8agZ9+iTu6eql0m3kWm1A2y1hkpTeVNENutaB0BwHlSvAIaMxwntmRUAUjon2V4L8Z/njd0Ct8A==",
      "hasInstallScript": true,
      "optional": true,
      "dependencies": {
        "node-gyp-build-optional-packages": "5.0.7"
      },
      "bin": {
        "download-msgpackr-prebuilds": "bin/download-prebuilds.js"
      },
      "optionalDependencies": {
        "@msgpackr-extract/msgpackr-extract-darwin-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-darwin-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-win32-x64": "3.0.2"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "peer": true
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA=="
    },
    "node_modules/node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-C/fGU2E8ToujUivIO0H+tpQ6HWo4eEmchoPIoXtxCrVghxdKq+QOHqEZW7tuP3KlV3bC8FRMO5nMCC7Zm1VP6g==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-gyp-build-optional-packages": {
      "version": "5.0.7",
      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.0.7.tgz",
      "integrity": "sha512-YlCCc6Wffkx0kHkmam79GKvDQ6x+QZkMjFGrIMxgFNILFvGSbCp2fCBC55pGTT9gVaz8Na5CLmxt/urtzRv36w==",
      "optional": true,
      "bin": {
        "node-gyp-build-optional-packages": "bin.js",
        "node-gyp-build-optional-packages-optional": "optional.js",
        "node-gyp-build-optional-packages-test": "build-test.js"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "peer": true
    },
    "node_modules/node-releases": {
      "version": "2.0.13",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.13.tgz",
      "integrity": "sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==",
      "peer": true
    },
    "node_modules/nodemon": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz",
      "integrity": "sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==",
      "dev": true,
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/nodemon/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/nodemon/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/nodemon/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "peer": true,
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "peer": true,
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/openai": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-3.3.0.tgz",
      "integrity": "sha512-uqxI/Au+aPRnsaQRe8CojU0eCR7I0mBiKjD3sNMzY6DaC1ZVrc85u98mtJW6voDug8fgGN+DIZmTDxTthxb7dQ==",
      "dependencies": {
        "axios": "^0.26.0",
        "form-data": "^4.0.0"
      }
    },
    "node_modules/openai/node_modules/axios": {
      "version": "0.26.1",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.26.1.tgz",
      "integrity": "sha512-fPwcX4EvnSHuInCMItEhAGnaSEXRBjtzh9fOtsE6E1G6p7vl7edEeZe11QHf18+6+9gR5PbKV/sGKNaD8YaMeA==",
      "dependencies": {
        "follow-redirects": "^1.14.8"
      }
    },
    "node_modules/openai/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "peer": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "peer": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-locate/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "peer": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-queue": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/p-queue/-/p-queue-6.6.2.tgz",
      "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
      "dependencies": {
        "eventemitter3": "^4.0.4",
        "p-timeout": "^3.2.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "dependencies": {
        "p-finally": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/passport": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
      "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
      "dependencies": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1",
        "utils-merge": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/jaredhanson"
      }
    },
    "node_modules/passport-jwt": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.1.tgz",
      "integrity": "sha512-UCKMDYhNuGOBE9/9Ycuoyh7vP6jpeTp/+sfMJl7nLff/t6dps+iaeE0hhNkKN8/HZHcJ7lCdOyDxHdDoxoSvdQ==",
      "dependencies": {
        "jsonwebtoken": "^9.0.0",
        "passport-strategy": "^1.0.0"
      }
    },
    "node_modules/passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha512-9wCE6qKznvf9mQYYbgJ3sVOHmCWoUNMVFoZzNoznmISbhnNNPhN9xfY3sLmScHMetEJeoY7CXwfhCe7argfQow==",
      "dependencies": {
        "passport-strategy": "1.x.x"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha512-CB97UUvDKJde2V0KDWWB3lyf6PC3FaZP7YxZ2G8OAtn9p4HI9j9JLP9qjOGZFvyl8uwNT8qM+hGnz/n16NI7oA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "peer": true
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "node_modules/pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha512-KG8UEiEVkR3wGEb4m5yZkVCzigAD+cVEJck2CzYZO37ZGJfctvVptVO192MwrtPhzONn6go8ylnOdMhKqi4nfg=="
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "peer": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "peer": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "peer": true,
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pretty-format": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.6.2.tgz",
      "integrity": "sha512-1q0oC8eRveTg5nnBEWMXAU2qpv65Gnuf2eCQzSjxpWFkPaPARwqZZDGuNE0zPAZfTCHzIk3A8dIjwlQKKLphyg==",
      "dependencies": {
        "@jest/schemas": "^29.6.0",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "peer": true,
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "node_modules/punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pure-rand": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.0.2.tgz",
      "integrity": "sha512-6Yg0ekpKICSjPswYOuC5sku/TSWaRYlA0qsXqJgM/d/4pLPHPuTxK7Nbf7jFKzAeedUhR8C7K9Uv63FBsSo8xQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/dubzzz"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fast-check"
        }
      ],
      "peer": true
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react-is": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/redis": {
      "version": "4.6.7",
      "resolved": "https://registry.npmjs.org/redis/-/redis-4.6.7.tgz",
      "integrity": "sha512-KrkuNJNpCwRm5vFJh0tteMxW8SaUzkm5fBH7eL5hd/D0fAkzvapxbfGPP/r+4JAXdQuX7nebsBkBqA2RHB7Usw==",
      "dependencies": {
        "@redis/bloom": "1.2.0",
        "@redis/client": "1.5.8",
        "@redis/graph": "1.1.0",
        "@redis/json": "1.0.4",
        "@redis/search": "1.1.3",
        "@redis/time-series": "1.0.4"
      }
    },
    "node_modules/redis-errors": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/redis-parser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
      "dependencies": {
        "redis-errors": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.2",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.2.tgz",
      "integrity": "sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==",
      "peer": true,
      "dependencies": {
        "is-core-module": "^2.11.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "peer": true,
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve.exports": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
      "integrity": "sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "peer": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "node_modules/simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "dependencies": {
        "semver": "~7.0.0"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/simple-update-notifier/node_modules/semver": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
      "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "peer": true
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/snowyflake": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/snowyflake/-/snowyflake-2.0.0.tgz",
      "integrity": "sha512-BxeqV0KJxJASu6EBJGUkX194Zhh37AEa0ow/JRK39icWbLTG9Wl/7LAL6a/ZMSjNm4O9pZk6QoLcWP7f/YKmtA==",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "dependencies": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.13.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "peer": true,
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "peer": true
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/standard-as-callback": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A=="
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "peer": true,
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "peer": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/superagent": {
      "version": "8.0.9",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.0.9.tgz",
      "integrity": "sha512-4C7Bh5pyHTvU33KpZgwrNKh/VQnvgtCSqPRfJAUdmrtSYePVzVg4E4OzsrbkhJj9O7SO6Bnv75K/F8XVZT8YHA==",
      "dev": true,
      "dependencies": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^2.1.2",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=6.4.0 <13 || >=14"
      }
    },
    "node_modules/superagent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dev": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/superagent/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dev": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/superagent/node_modules/mime": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
      "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
      "dev": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/superagent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "dev": true
    },
    "node_modules/supertest": {
      "version": "6.3.3",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-6.3.3.tgz",
      "integrity": "sha512-EMCG6G8gDu5qEqRQ3JjjPs6+FYT1a7Hv5ApHvtSghmOFJYtsU5S+pSb6Y2EUeCEY3CmEL3mmQ8YWlPOzQomabA==",
      "dev": true,
      "dependencies": {
        "methods": "^1.1.2",
        "superagent": "^8.0.5"
      },
      "engines": {
        "node": ">=6.4.0"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "peer": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tar": {
      "version": "6.1.15",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.15.tgz",
      "integrity": "sha512-/zKt9UyngnxIT/EAGYuxaMYgOIJiP81ab9ZfkILq4oNLPFX50qyYmu7jRj9qeXoxmJHjGlbH0+cm2uy1WCs10A==",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "peer": true,
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ=="
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "peer": true
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "dependencies": {
        "nopt": "~1.0.10"
      },
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/touch/node_modules/nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
      "dev": true,
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/ts-essentials": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/ts-essentials/-/ts-essentials-7.0.3.tgz",
      "integrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ==",
      "peerDependencies": {
        "typescript": ">=3.7.0"
      }
    },
    "node_modules/ts-jest": {
      "version": "29.1.1",
      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.1.1.tgz",
      "integrity": "sha512-D6xjnnbP17cC85nliwGiL+tpoKN0StpgE0TeOjXQTU6MVCfsB4v7aW05CgQ/1OywGb0x/oy9hHFnN+sczTiRaA==",
      "dev": true,
      "dependencies": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^29.0.0",
        "json5": "^2.2.3",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "^7.5.3",
        "yargs-parser": "^21.0.1"
      },
      "bin": {
        "ts-jest": "cli.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": ">=7.0.0-beta.0 <8",
        "@jest/types": "^29.0.0",
        "babel-jest": "^29.0.0",
        "jest": "^29.0.0",
        "typescript": ">=4.3 <6"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "@jest/types": {
          "optional": true
        },
        "babel-jest": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        }
      }
    },
    "node_modules/ts-node": {
      "version": "10.9.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
      "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/tslib": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.1.tgz",
      "integrity": "sha512-t0hLfiEKfMUoqhG+U1oid7Pva4bbDPHYfJNiB7BiIjRkj1pyC++4N3huJfqY6aRH6VTB0rvtzQwjM4K6qpfOig=="
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typescript": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.1.6.tgz",
      "integrity": "sha512-zaWCozRZ6DLEWAWFrVDz1H6FVXzUSfTy5FUMWsQlU8Ym5JP9eO4xkTIROFCQvhQf61z6O/G6ugw3SgAnvvm+HA==",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz",
      "integrity": "sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true,
      "dependencies": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg=="
    },
    "node_modules/v8-to-istanbul": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.1.0.tgz",
      "integrity": "sha512-6z3GW9x8G1gd+JIIgQQQxXuiJtCXeAjp6RaPEPLv62mH3iPHPxV6W3robxtCzNErRo6ZwTmzWhsbNvjyEBKzKA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/v8-to-istanbul/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "peer": true
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "peer": true,
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/websocket-ts": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/websocket-ts/-/websocket-ts-1.1.1.tgz",
      "integrity": "sha512-rm+S60J74Ckw5iizzgID12ju+OfaHAa6dhXhULIOrXkl0e05RzxfY42/vMStpz5jWL3iz9mkyjPcFUY1IgI0fw=="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "peer": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "peer": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "peer": true,
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/ws": {
      "version": "8.13.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.13.0.tgz",
      "integrity": "sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "peer": true,
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  },
  "dependencies": {
    "@ampproject/remapping": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz",
      "integrity": "sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==",
      "peer": true,
      "requires": {
        "@jridgewell/gen-mapping": "^0.3.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@babel/code-frame": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.22.5.tgz",
      "integrity": "sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==",
      "requires": {
        "@babel/highlight": "^7.22.5"
      }
    },
    "@babel/compat-data": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.22.9.tgz",
      "integrity": "sha512-5UamI7xkUcJ3i9qVDS+KFDEK8/7oJ55/sJMB1Ge7IEapr7KfdfV/HErR+koZwOfd+SgtFKOKRhRakdg++DcJpQ==",
      "peer": true
    },
    "@babel/core": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.22.9.tgz",
      "integrity": "sha512-G2EgeufBcYw27U4hhoIwFcgc1XU7TlXJ3mv04oOv1WCuo900U/anZSPzEqNjwdjgffkk2Gs0AN0dW1CKVLcG7w==",
      "peer": true,
      "requires": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.9",
        "@babel/helper-compilation-targets": "^7.22.9",
        "@babel/helper-module-transforms": "^7.22.9",
        "@babel/helpers": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.8",
        "@babel/types": "^7.22.5",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.2",
        "semver": "^6.3.1"
      },
      "dependencies": {
        "convert-source-map": {
          "version": "1.9.0",
          "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
          "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
          "peer": true
        },
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        },
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        }
      }
    },
    "@babel/generator": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.22.9.tgz",
      "integrity": "sha512-KtLMbmicyuK2Ak/FTCJVbDnkN1SlT8/kceFTiuDiiRUUSMnHMidxSCdG4ndkTOHHpoomWe/4xkvHkEOncwjYIw==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5",
        "@jridgewell/gen-mapping": "^0.3.2",
        "@jridgewell/trace-mapping": "^0.3.17",
        "jsesc": "^2.5.1"
      }
    },
    "@babel/helper-compilation-targets": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.9.tgz",
      "integrity": "sha512-7qYrNM6HjpnPHJbopxmb8hSPoZ0gsX8IvUS32JGVoy+pU9e5N0nLr1VjJoR6kA4d9dmGLxNYOjeB8sUDal2WMw==",
      "peer": true,
      "requires": {
        "@babel/compat-data": "^7.22.9",
        "@babel/helper-validator-option": "^7.22.5",
        "browserslist": "^4.21.9",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "dependencies": {
        "lru-cache": {
          "version": "5.1.1",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
          "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
          "peer": true,
          "requires": {
            "yallist": "^3.0.2"
          }
        },
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        },
        "yallist": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
          "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
          "peer": true
        }
      }
    },
    "@babel/helper-environment-visitor": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz",
      "integrity": "sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==",
      "peer": true
    },
    "@babel/helper-function-name": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz",
      "integrity": "sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.22.5",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-hoist-variables": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz",
      "integrity": "sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-module-imports": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz",
      "integrity": "sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-module-transforms": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.22.9.tgz",
      "integrity": "sha512-t+WA2Xn5K+rTeGtC8jCsdAH52bjggG5TKRuRrAGNM/mjIbO4GxvlLMFOEz9wXY5I2XQ60PMFsAG2WIcG82dQMQ==",
      "peer": true,
      "requires": {
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-module-imports": "^7.22.5",
        "@babel/helper-simple-access": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/helper-validator-identifier": "^7.22.5"
      }
    },
    "@babel/helper-plugin-utils": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz",
      "integrity": "sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==",
      "peer": true
    },
    "@babel/helper-simple-access": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz",
      "integrity": "sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-split-export-declaration": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz",
      "integrity": "sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-string-parser": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz",
      "integrity": "sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==",
      "peer": true
    },
    "@babel/helper-validator-identifier": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz",
      "integrity": "sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ=="
    },
    "@babel/helper-validator-option": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz",
      "integrity": "sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==",
      "peer": true
    },
    "@babel/helpers": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.22.6.tgz",
      "integrity": "sha512-YjDs6y/fVOYFV8hAf1rxd1QvR9wJe1pDBZ2AREKq/SDayfPzgk0PBnVuTCE5X1acEpMMNOVUqoe+OwiZGJ+OaA==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.6",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/highlight": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.22.5.tgz",
      "integrity": "sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==",
      "requires": {
        "@babel/helper-validator-identifier": "^7.22.5",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "3.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
          "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
          "requires": {
            "color-convert": "^1.9.0"
          }
        },
        "chalk": {
          "version": "2.4.2",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
          "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
          "requires": {
            "ansi-styles": "^3.2.1",
            "escape-string-regexp": "^1.0.5",
            "supports-color": "^5.3.0"
          }
        },
        "color-convert": {
          "version": "1.9.3",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
          "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
          "requires": {
            "color-name": "1.1.3"
          }
        },
        "color-name": {
          "version": "1.1.3",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
          "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
        },
        "escape-string-regexp": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
          "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg=="
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw=="
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "@babel/parser": {
      "version": "7.22.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.22.7.tgz",
      "integrity": "sha512-7NF8pOkHP5o2vpmGgNGcfAeCvOYhGLyA3Z4eBQkT1RJlWu47n63bCs93QfJ2hIAFCil7L5P2IWhs1oToVgrL0Q==",
      "peer": true
    },
    "@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.12.13"
      }
    },
    "@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-jsx": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.22.5.tgz",
      "integrity": "sha512-gvyP4hZrgrs/wWMaocvxZ44Hw0b3W8Pe+cMxc8V1ULQ07oh8VNbIRaoD1LRZVTvD+0nieDKjfgKg89sD7rrKrg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.22.5"
      }
    },
    "@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.14.5"
      }
    },
    "@babel/plugin-syntax-typescript": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.22.5.tgz",
      "integrity": "sha512-1mS2o03i7t1c6VzH6fdQ3OA8tcEIxwG18zIPRp+UY1Ihv6W+XZzBCVxExF9upussPXJ0xE9XRHwMoNs1ep/nRQ==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.22.5"
      }
    },
    "@babel/template": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.5.tgz",
      "integrity": "sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.22.5",
        "@babel/parser": "^7.22.5",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/traverse": {
      "version": "7.22.8",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.22.8.tgz",
      "integrity": "sha512-y6LPR+wpM2I3qJrsheCTwhIinzkETbplIgPBbwvqPKc+uljeA5gP+3nP8irdYt1mjQaDnlIcG+dw8OjAco4GXw==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.7",
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-function-name": "^7.22.5",
        "@babel/helper-hoist-variables": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/types": "^7.22.5",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        }
      }
    },
    "@babel/types": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.22.5.tgz",
      "integrity": "sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==",
      "peer": true,
      "requires": {
        "@babel/helper-string-parser": "^7.22.5",
        "@babel/helper-validator-identifier": "^7.22.5",
        "to-fast-properties": "^2.0.0"
      }
    },
    "@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "peer": true
    },
    "@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "requires": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "dependencies": {
        "@jridgewell/trace-mapping": {
          "version": "0.3.9",
          "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
          "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
          "requires": {
            "@jridgewell/resolve-uri": "^3.0.3",
            "@jridgewell/sourcemap-codec": "^1.4.10"
          }
        }
      }
    },
    "@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@huggingface/inference": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@huggingface/inference/-/inference-2.6.1.tgz",
      "integrity": "sha512-qFYchgOCPeEkZJKiSr7Kz62QwukJtgkeQCT7Q0SSKUcvHpTQVNJp6i/JrJMR4dBdzQysJ1SZDC0pLBBnnskTag=="
    },
    "@ioredis/commands": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.2.0.tgz",
      "integrity": "sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg=="
    },
    "@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "peer": true,
      "requires": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      }
    },
    "@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "peer": true
    },
    "@jest/console": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.6.2.tgz",
      "integrity": "sha512-0N0yZof5hi44HAR2pPS+ikJ3nzKNoZdVu8FffRf3wy47I7Dm7etk/3KetMdRUqzVd16V4O2m2ISpNTbnIuqy1w==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0"
      }
    },
    "@jest/core": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.6.2.tgz",
      "integrity": "sha512-Oj+5B+sDMiMWLhPFF+4/DvHOf+U10rgvCLGPHP8Xlsy/7QxS51aU/eBngudHlJXnaWD5EohAgJ4js+T6pa+zOg==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/reporters": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.5.0",
        "jest-config": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-resolve-dependencies": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "@jest/environment": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.6.2.tgz",
      "integrity": "sha512-AEcW43C7huGd/vogTddNNTDRpO6vQ2zaQNrttvWV18ArBx9Z56h7BIsXkNFJVOO4/kblWEQz30ckw0+L3izc+Q==",
      "peer": true,
      "requires": {
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2"
      }
    },
    "@jest/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-m6DrEJxVKjkELTVAztTLyS/7C92Y2b0VYqmDROYKLLALHn8T/04yPs70NADUYPrV3ruI+H3J0iUIuhkjp7vkfg==",
      "peer": true,
      "requires": {
        "expect": "^29.6.2",
        "jest-snapshot": "^29.6.2"
      }
    },
    "@jest/expect-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.6.2.tgz",
      "integrity": "sha512-6zIhM8go3RV2IG4aIZaZbxwpOzz3ZiM23oxAlkquOIole+G6TrbeXnykxWYlqF7kz2HlBjdKtca20x9atkEQYg==",
      "requires": {
        "jest-get-type": "^29.4.3"
      }
    },
    "@jest/fake-timers": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.6.2.tgz",
      "integrity": "sha512-euZDmIlWjm1Z0lJ1D0f7a0/y5Kh/koLFMUBE5SUYWrmy8oNhJpbTBDAP6CxKnadcMLDoDf4waRYCe35cH6G6PA==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "@jest/globals": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.6.2.tgz",
      "integrity": "sha512-cjuJmNDjs6aMijCmSa1g2TNG4Lby/AeU7/02VtpW+SLcZXzOLK2GpN2nLqcFjmhy3B3AoPeQVx7BnyOf681bAw==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/types": "^29.6.1",
        "jest-mock": "^29.6.2"
      }
    },
    "@jest/reporters": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.6.2.tgz",
      "integrity": "sha512-sWtijrvIav8LgfJZlrGCdN0nP2EWbakglJY49J1Y5QihcQLfy7ovyxxjJBRXMNltgt4uPtEcFmIMbVshEDfFWw==",
      "peer": true,
      "requires": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      }
    },
    "@jest/schemas": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.0.tgz",
      "integrity": "sha512-rxLjXyJBTL4LQeJW3aKo0M/+GkCOXsO+8i9Iu7eDb6KwtP65ayoDsitrdPBtujxQ88k4wI2FNYfa6TOGwSn6cQ==",
      "requires": {
        "@sinclair/typebox": "^0.27.8"
      }
    },
    "@jest/source-map": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.0.tgz",
      "integrity": "sha512-oA+I2SHHQGxDCZpbrsCQSoMLb3Bz547JnM+jUr9qEbuw0vQlWZfpPS7CO9J7XiwKicEz9OFn/IYoLkkiUD7bzA==",
      "peer": true,
      "requires": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      }
    },
    "@jest/test-result": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.6.2.tgz",
      "integrity": "sha512-3VKFXzcV42EYhMCsJQURptSqnyjqCGbtLuX5Xxb6Pm6gUf1wIRIl+mandIRGJyWKgNKYF9cnstti6Ls5ekduqw==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      }
    },
    "@jest/test-sequencer": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.6.2.tgz",
      "integrity": "sha512-GVYi6PfPwVejO7slw6IDO0qKVum5jtrJ3KoLGbgBWyr2qr4GaxFV6su+ZAjdTX75Sr1DkMFRk09r2ZVa+wtCGw==",
      "peer": true,
      "requires": {
        "@jest/test-result": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "slash": "^3.0.0"
      }
    },
    "@jest/transform": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.6.2.tgz",
      "integrity": "sha512-ZqCqEISr58Ce3U+buNFJYUktLJZOggfyvR+bZMaiV1e8B1SIvJbwZMrYz3gx/KAPn9EXmOmN+uB08yLCjWkQQg==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      }
    },
    "@jest/types": {
      "version": "29.6.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.1.tgz",
      "integrity": "sha512-tPKQNMPuXgvdOn2/Lg9HNfUvjYVGolt04Hp03f5hAk878uwOLikN+JzeLY0HcVgKgFl9Hs3EIqpu3WX27XNhnw==",
      "requires": {
        "@jest/schemas": "^29.6.0",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      }
    },
    "@jridgewell/gen-mapping": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
      "peer": true,
      "requires": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w=="
    },
    "@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "peer": true
    },
    "@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "@jridgewell/trace-mapping": {
      "version": "0.3.18",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz",
      "integrity": "sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==",
      "peer": true,
      "requires": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      },
      "dependencies": {
        "@jridgewell/sourcemap-codec": {
          "version": "1.4.14",
          "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
          "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
          "peer": true
        }
      }
    },
    "@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "requires": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      }
    },
    "@msgpackr-extract/msgpackr-extract-darwin-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.2.tgz",
      "integrity": "sha512-9bfjwDxIDWmmOKusUcqdS4Rw+SETlp9Dy39Xui9BEGEk19dDwH0jhipwFzEff/pFg95NKymc6TOTbRKcWeRqyQ==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-darwin-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.2.tgz",
      "integrity": "sha512-lwriRAHm1Yg4iDf23Oxm9n/t5Zpw1lVnxYU3HnJPTi2lJRkKTrps1KVgvL6m7WvmhYVt/FIsssWay+k45QHeuw==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-arm": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.2.tgz",
      "integrity": "sha512-MOI9Dlfrpi2Cuc7i5dXdxPbFIgbDBGgKR5F2yWEa6FVEtSWncfVNKW5AKjImAQ6CZlBK9tympdsZJ2xThBiWWA==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.2.tgz",
      "integrity": "sha512-FU20Bo66/f7He9Fp9sP2zaJ1Q8L9uLPZQDub/WlUip78JlPeMbVL8546HbZfcW9LNciEXc8d+tThSJjSC+tmsg==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.2.tgz",
      "integrity": "sha512-gsWNDCklNy7Ajk0vBBf9jEx04RUxuDQfBse918Ww+Qb9HCPoGzS+XJTLe96iN3BVK7grnLiYghP/M4L8VsaHeA==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-win32-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.2.tgz",
      "integrity": "sha512-O+6Gs8UeDbyFpbSh2CPEz/UOrrdWPTBYNblZK5CxxLisYt4kGX3Sc+czffFonyjiGSq3jWLwJS/CCJc7tBr4sQ==",
      "optional": true
    },
    "@redis/bloom": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
      "requires": {}
    },
    "@redis/client": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.5.8.tgz",
      "integrity": "sha512-xzElwHIO6rBAqzPeVnCzgvrnBEcFL1P0w8P65VNLRkdVW8rOE58f52hdj0BDgmsdOm4f1EoXPZtH4Fh7M/qUpw==",
      "requires": {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        "yallist": "4.0.0"
      }
    },
    "@redis/graph": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.0.tgz",
      "integrity": "sha512-16yZWngxyXPd+MJxeSr0dqh2AIOi8j9yXKcKCwVaKDbH3HTuETpDVPcLujhFYVPtYrngSco31BUcSa9TH31Gqg==",
      "requires": {}
    },
    "@redis/json": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.4.tgz",
      "integrity": "sha512-LUZE2Gdrhg0Rx7AN+cZkb1e6HjoSKaeeW8rYnt89Tly13GBI5eP4CwDVr+MY8BAYfCg4/N15OUrtLoona9uSgw==",
      "requires": {}
    },
    "@redis/search": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.1.3.tgz",
      "integrity": "sha512-4Dg1JjvCevdiCBTZqjhKkGoC5/BcB7k9j99kdMnaXFXg8x4eyOIVg9487CMv7/BUVkFLZCaIh8ead9mU15DNng==",
      "requires": {}
    },
    "@redis/time-series": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.0.4.tgz",
      "integrity": "sha512-ThUIgo2U/g7cCuZavucQTQzA9g9JbDDY2f64u3AbAoz/8vE2lt2U37LamDUVChhaDA3IRT9R6VvJwqnUfTJzng==",
      "requires": {}
    },
    "@sideway/address": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.4.tgz",
      "integrity": "sha512-7vwq+rOHVWjyXxVlR76Agnvhy8I9rpzjosTESvmhNeXOXdZZB15Fl+TI9x1SiHZH5Jv2wTGduSxFDIaq0m3DUw==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA=="
    },
    "@sinonjs/commons": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.0.tgz",
      "integrity": "sha512-jXBtWAF4vmdNmZgD5FoKsVLv3rPgDnLgPbU84LIJ3otV44vJlDRokVng5v8NFJdCf/da9legHcKaRuZs4L7faA==",
      "peer": true,
      "requires": {
        "type-detect": "4.0.8"
      }
    },
    "@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "peer": true,
      "requires": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "@tsconfig/node10": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA=="
    },
    "@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag=="
    },
    "@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow=="
    },
    "@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA=="
    },
    "@types/babel__core": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.1.tgz",
      "integrity": "sha512-aACu/U/omhdk15O4Nfb+fHgH/z3QsfQzpnvRZhYhThms83ZnAOZz7zZAWO7mn2yyNQaA4xTO8GLK3uqFU4bYYw==",
      "peer": true,
      "requires": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "@types/babel__generator": {
      "version": "7.6.4",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.4.tgz",
      "integrity": "sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__template": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.1.tgz",
      "integrity": "sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==",
      "peer": true,
      "requires": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__traverse": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.1.tgz",
      "integrity": "sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.20.7"
      }
    },
    "@types/bcrypt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.0.tgz",
      "integrity": "sha512-agtcFKaruL8TmcvqbndlqHPSJgsolhf/qPWchFlgnW1gECTN/nKbFcoFnvKAQRFfKbh+BO6A3SWdJu9t+xF3Lw==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/bcryptjs": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@types/bcryptjs/-/bcryptjs-2.4.2.tgz",
      "integrity": "sha512-LiMQ6EOPob/4yUL66SZzu6Yh77cbzJFYll+ZfaPiPPFswtIlA/Fs1MzdKYA7JApHU49zQTbJGX3PDmCpIdDBRQ==",
      "dev": true
    },
    "@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dev": true,
      "requires": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/cookiejar": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.2.tgz",
      "integrity": "sha512-t73xJJrvdTjXrn4jLS9VSGRbz0nUY3cl2DMGDU48lKl+HR9dbbjW2A9r3g40VA++mQpy6uuHg33gy7du2BKpog=="
    },
    "@types/cors": {
      "version": "2.8.13",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.13.tgz",
      "integrity": "sha512-RG8AStHlUiV5ysZQKq97copd2UmVYw3/pRMLefISZ3S1hK104Cwm7iLQ3fTKx+lsUH2CE8FlLaYeEA2LSeqYUA==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/express": {
      "version": "4.17.17",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.17.tgz",
      "integrity": "sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==",
      "dev": true,
      "requires": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "@types/express-serve-static-core": {
      "version": "4.17.35",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz",
      "integrity": "sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "@types/express-session": {
      "version": "1.17.7",
      "resolved": "https://registry.npmjs.org/@types/express-session/-/express-session-1.17.7.tgz",
      "integrity": "sha512-L25080PBYoRLu472HY/HNCxaXY8AaGgqGC8/p/8+BYMhG0RDOLQ1wpXOpAzr4Gi5TGozTKyJv5BVODM5UNyVMw==",
      "dev": true,
      "requires": {
        "@types/express": "*"
      }
    },
    "@types/graceful-fs": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.6.tgz",
      "integrity": "sha512-Sig0SNORX9fdW+bQuTEovKj3uHcUL6LQKbCrrqb1X7J6/ReAbhCXRAhc+SMejhLELFj2QcyuxmUooZ4bt5ReSw==",
      "peer": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/http-errors": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.1.tgz",
      "integrity": "sha512-/K3ds8TRAfBvi5vfjuz8y6+GiAYBZ0x4tXv1Av6CWBWn0IlADc+ZX9pMq7oU0fNQPnBwIZl3rmeLp6SBApbxSQ==",
      "dev": true
    },
    "@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz",
      "integrity": "sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g=="
    },
    "@types/istanbul-lib-report": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
      "integrity": "sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==",
      "requires": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "@types/istanbul-reports": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz",
      "integrity": "sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==",
      "requires": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "@types/jest": {
      "version": "29.5.3",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-29.5.3.tgz",
      "integrity": "sha512-1Nq7YrO/vJE/FYnqYyw0FS8LdrjExSgIiHyKg7xPpn+yi8Q4huZryKnkJatN1ZRH89Kw2v33/8ZMB7DuZeSLlA==",
      "dev": true,
      "requires": {
        "expect": "^29.0.0",
        "pretty-format": "^29.0.0"
      }
    },
    "@types/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-drE6uz7QBKq1fYqqoFKTDRdFCPHd5TCub75BM+D+cMx7NU9hUz7SESLfC2fSCXVFMO5Yj8sOWHuGqPgjc+fz0Q==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==",
      "dev": true
    },
    "@types/mocha": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/@types/mocha/-/mocha-10.0.1.tgz",
      "integrity": "sha512-/fvYntiO1GeICvqbQ3doGDIP97vWmvFt83GKguJ6prmQM2iXZfFcq6YE8KteFyRtX2/h5Hf91BYvPodJKFYv5Q==",
      "dev": true
    },
    "@types/mongoose": {
      "version": "5.11.97",
      "resolved": "https://registry.npmjs.org/@types/mongoose/-/mongoose-5.11.97.tgz",
      "integrity": "sha512-cqwOVYT3qXyLiGw7ueU2kX9noE8DPGRY6z8eUxudhXY8NZ7DMKYAxyZkLSevGfhCX3dO/AoX5/SO9lAzfjon0Q==",
      "dev": true,
      "requires": {
        "mongoose": "*"
      }
    },
    "@types/node": {
      "version": "20.4.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.4.6.tgz",
      "integrity": "sha512-q0RkvNgMweWWIvSMDiXhflGUKMdIxBo2M2tYM/0kEGDueQByFzK4KZAgu5YHGFNxziTlppNpTIBcqHQAxlfHdA=="
    },
    "@types/node-fetch": {
      "version": "2.6.4",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.4.tgz",
      "integrity": "sha512-1ZX9fcN4Rvkvgv4E6PAY5WXUFWFcRWxZa3EW83UjycOB9ljJCedb2CupIP4RZMEwF/M3eTcCihbBRgwtGbg5Rg==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "@types/passport": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/@types/passport/-/passport-1.0.12.tgz",
      "integrity": "sha512-QFdJ2TiAEoXfEQSNDISJR1Tm51I78CymqcBa8imbjo6dNNu+l2huDxxbDEIoFIwOSKMkOfHEikyDuZ38WwWsmw==",
      "dev": true,
      "requires": {
        "@types/express": "*"
      }
    },
    "@types/passport-jwt": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/@types/passport-jwt/-/passport-jwt-3.0.9.tgz",
      "integrity": "sha512-5XJt+79emfgpuBvBQusUPylFIVtW1QVAAkTRwCbRJAmxUjmLtIqUU6V1ovpnHPu6Qut3mR5Juc+s7kd06roNTg==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/jsonwebtoken": "*",
        "@types/passport-strategy": "*"
      }
    },
    "@types/passport-local": {
      "version": "1.0.35",
      "resolved": "https://registry.npmjs.org/@types/passport-local/-/passport-local-1.0.35.tgz",
      "integrity": "sha512-K4eLTJ8R0yYW8TvCqkjB0pTKoqfUSdl5PfZdidTjV2ETV3604fQxtY6BHKjQWAx50WUS0lqzBvKv3LoI1ZBPeA==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/passport": "*",
        "@types/passport-strategy": "*"
      }
    },
    "@types/passport-strategy": {
      "version": "0.2.35",
      "resolved": "https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.35.tgz",
      "integrity": "sha512-o5D19Jy2XPFoX2rKApykY15et3Apgax00RRLf0RUotPDUsYrQa7x4howLYr9El2mlUApHmCMv5CZ1IXqKFQ2+g==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/passport": "*"
      }
    },
    "@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==",
      "dev": true
    },
    "@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==",
      "dev": true
    },
    "@types/send": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.1.tgz",
      "integrity": "sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==",
      "dev": true,
      "requires": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "@types/serve-static": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.2.tgz",
      "integrity": "sha512-J2LqtvFYCzaj8pVYKw8klQXrLLk7TBZmQ4ShlcdkELFKGwGMfevMLneMMRkMgZxotOD9wg497LpC7O8PcvAmfw==",
      "dev": true,
      "requires": {
        "@types/http-errors": "*",
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "@types/stack-utils": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.1.tgz",
      "integrity": "sha512-Hl219/BT5fLAaz6NDkSuhzasy49dwQS/DSdu4MdggFB8zcXv7vflBI3xp7FEmkmdDkBUI2bPUNeMttp2knYdxw=="
    },
    "@types/superagent": {
      "version": "4.1.18",
      "resolved": "https://registry.npmjs.org/@types/superagent/-/superagent-4.1.18.tgz",
      "integrity": "sha512-LOWgpacIV8GHhrsQU+QMZuomfqXiqzz3ILLkCtKx3Us6AmomFViuzKT9D693QTKgyut2oCytMG8/efOop+DB+w==",
      "requires": {
        "@types/cookiejar": "*",
        "@types/node": "*"
      }
    },
    "@types/supertest": {
      "version": "2.0.12",
      "resolved": "https://registry.npmjs.org/@types/supertest/-/supertest-2.0.12.tgz",
      "integrity": "sha512-X3HPWTwXRerBZS7Mo1k6vMVR1Z6zmJcDVn5O/31whe0tnjE4te6ZJSJGq1RiqHPjzPdMTfjCFogDJmwng9xHaQ==",
      "requires": {
        "@types/superagent": "*"
      }
    },
    "@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "requires": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "@types/yargs": {
      "version": "17.0.24",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.24.tgz",
      "integrity": "sha512-6i0aC7jV6QzQB8ne1joVZ0eSFIstHsCrobmOtghM11yGlH0j43FKL2UhWdELkyps0zuf7qVTUVCCR+tgSlyLLw==",
      "requires": {
        "@types/yargs-parser": "*"
      }
    },
    "@types/yargs-parser": {
      "version": "21.0.0",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.0.tgz",
      "integrity": "sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA=="
    },
    "abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "requires": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      }
    },
    "acorn": {
      "version": "8.10.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.10.0.tgz",
      "integrity": "sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw=="
    },
    "acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA=="
    },
    "agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "requires": {
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "peer": true,
      "requires": {
        "type-fest": "^0.21.3"
      }
    },
    "ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
    },
    "ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "requires": {
        "color-convert": "^2.0.1"
      }
    },
    "anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
    },
    "are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "requires": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      }
    },
    "arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "peer": true,
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "axios": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.4.0.tgz",
      "integrity": "sha512-S4XCWMEmzvo64T9GfvQDOXgYRDJ/wsSZc7Jvdgx5u1sd0JwsuPLqb3SYmusag+edF6ziyMensPVqLTSc1PiSEA==",
      "requires": {
        "follow-redirects": "^1.15.0",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      },
      "dependencies": {
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "babel-jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.6.2.tgz",
      "integrity": "sha512-BYCzImLos6J3BH/+HvUCHG1dTf2MzmAB4jaVxHV+29RZLjR29XuYTmsf2sdDwkrb+FczkGo3kOhE7ga6sI0P4A==",
      "peer": true,
      "requires": {
        "@jest/transform": "^29.6.2",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.5.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      }
    },
    "babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      }
    },
    "babel-plugin-jest-hoist": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.5.0.tgz",
      "integrity": "sha512-zSuuuAlTMT4mzLj2nPnUm6fsE6270vdOfnpbJ+RmruU75UhLFvL0N2NgI7xpeS7NaB6hGqmd5pVpGTDYvi4Q3w==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      }
    },
    "babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz",
      "integrity": "sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==",
      "peer": true,
      "requires": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      }
    },
    "babel-preset-jest": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.5.0.tgz",
      "integrity": "sha512-JOMloxOqdiBSxMAzjRaH023/vvcaSaec49zvg+2LmNsktC7ei39LTJGw02J+9uUtTZUq6xbLyJ4dxe9sSmIuAg==",
      "peer": true,
      "requires": {
        "babel-plugin-jest-hoist": "^29.5.0",
        "babel-preset-current-node-syntax": "^1.0.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "bcrypt": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.0.tgz",
      "integrity": "sha512-RHBS7HI5N5tEnGTmtR/pppX0mmDSBpQ4aCBsj7CEQfYXDcO74A8sIBYcJMuCsis2E81zDxeENYhv66oZwLiA+Q==",
      "requires": {
        "@mapbox/node-pre-gyp": "^1.0.10",
        "node-addon-api": "^5.0.0"
      }
    },
    "bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true
    },
    "body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "requires": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "browserslist": {
      "version": "4.21.10",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.10.tgz",
      "integrity": "sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==",
      "peer": true,
      "requires": {
        "caniuse-lite": "^1.0.30001517",
        "electron-to-chromium": "^1.4.477",
        "node-releases": "^2.0.13",
        "update-browserslist-db": "^1.0.11"
      }
    },
    "bs-logger": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
      "dev": true,
      "requires": {
        "fast-json-stable-stringify": "2.x"
      }
    },
    "bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "peer": true,
      "requires": {
        "node-int64": "^0.4.0"
      }
    },
    "bson": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-5.4.0.tgz",
      "integrity": "sha512-WRZ5SQI5GfUuKnPTNmAYPiKIof3ORXAF4IRU5UcgmivNIon01rWQlw5RUH954dpu8yGL8T59YShVddIPaU/gFA=="
    },
    "buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "peer": true
    },
    "bull": {
      "version": "4.10.4",
      "resolved": "https://registry.npmjs.org/bull/-/bull-4.10.4.tgz",
      "integrity": "sha512-o9m/7HjS/Or3vqRd59evBlWCXd9Lp+ALppKseoSKHaykK46SmRjAilX98PgmOz1yeVaurt8D5UtvEt4bUjM3eA==",
      "requires": {
        "cron-parser": "^4.2.1",
        "debuglog": "^1.0.0",
        "get-port": "^5.1.1",
        "ioredis": "^5.0.0",
        "lodash": "^4.17.21",
        "msgpackr": "^1.5.2",
        "semver": "^7.3.2",
        "uuid": "^8.3.0"
      }
    },
    "bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
    },
    "call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "requires": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      }
    },
    "callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "peer": true
    },
    "camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "peer": true
    },
    "caniuse-lite": {
      "version": "1.0.30001519",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001519.tgz",
      "integrity": "sha512-0QHgqR+Jv4bxHMp8kZ1Kn8CH55OikjKJ6JmKkZYP1F3D7w+lnFXF70nG5eNfsZS89jadi5Ywy5UCSKLAglIRkg==",
      "peer": true
    },
    "chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "requires": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      }
    },
    "char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "peer": true
    },
    "chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      }
    },
    "chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ=="
    },
    "ci-info": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.8.0.tgz",
      "integrity": "sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw=="
    },
    "cjs-module-lexer": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
      "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==",
      "peer": true
    },
    "cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "peer": true,
      "requires": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      }
    },
    "cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA=="
    },
    "co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "peer": true
    },
    "collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "peer": true
    },
    "color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "requires": {
        "color-name": "~1.1.4"
      }
    },
    "color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg=="
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==",
      "dev": true
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ=="
    },
    "content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "requires": {
        "safe-buffer": "5.2.1"
      }
    },
    "content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA=="
    },
    "convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "peer": true
    },
    "cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw=="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true
    },
    "cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "requires": {
        "object-assign": "^4",
        "vary": "^1"
      }
    },
    "create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "cron-parser": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.8.1.tgz",
      "integrity": "sha512-jbokKWGcyU4gl6jAfX97E1gDpY12DJ1cLJZmoDzaAln/shZ+S3KBFBuA2Q6WeUN4gJf/8klnV1EfvhA2lK5IRQ==",
      "requires": {
        "luxon": "^3.2.1"
      }
    },
    "cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "peer": true,
      "requires": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      }
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "debuglog": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
      "integrity": "sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw=="
    },
    "dedent": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.1.tgz",
      "integrity": "sha512-+LxW+KLWxu3HW3M2w2ympwtqPrqYRzU8fqi6Fhd18fBALe15blJPI/I4+UHveMVG6lJqB4JNd4UG0S5cnVHwIg==",
      "peer": true,
      "requires": {}
    },
    "deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "peer": true
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="
    },
    "delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ=="
    },
    "denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg=="
    },
    "detect-libc": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw=="
    },
    "detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "peer": true
    },
    "dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "requires": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A=="
    },
    "diff-sequences": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.4.3.tgz",
      "integrity": "sha512-ofrBgwpPhCD85kMKtE9RYFFq6OC1A89oW2vvgWZNCwxrUpRUILopY7lsYyMDSjc8g6U6aiO0Qubg6r4Wgt5ZnA=="
    },
    "dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "dev": true
    },
    "ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "electron-to-chromium": {
      "version": "1.4.482",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.482.tgz",
      "integrity": "sha512-h+UqpfmEr1Qkk0zp7ej/jid7CXoq4m4QzW6wNTb0ELJ/BZCpA4wgUylBIMGCe621tnr4l5VmoHjdoSx2lbnNJA==",
      "peer": true
    },
    "emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "peer": true
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w=="
    },
    "error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "peer": true,
      "requires": {
        "is-arrayish": "^0.2.1"
      }
    },
    "escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "peer": true
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w=="
    },
    "esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "peer": true
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg=="
    },
    "eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
    },
    "execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "peer": true,
      "requires": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      }
    },
    "exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "peer": true
    },
    "expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-iAErsLxJ8C+S02QbLAwgSGSezLQK+XXRDt8IuFXFpwCNw2ECmzZSmjKcCaFVp5VRMk+WAvz6h6jokzEzBFZEuA==",
      "requires": {
        "@jest/expect-utils": "^29.6.2",
        "@types/node": "*",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "requires": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      }
    },
    "express-session": {
      "version": "1.17.3",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.3.tgz",
      "integrity": "sha512-4+otWXlShYlG1Ma+2Jnn+xgKUZTMJ5QD3YvfilX3AcocOAbIkVylSWEklzALe/+Pu4qV6TYBj5GwOBFfdKqLBw==",
      "requires": {
        "cookie": "0.4.2",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "dependencies": {
        "cookie": {
          "version": "0.4.2",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
          "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA=="
        }
      }
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true
    },
    "fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "peer": true,
      "requires": {
        "bser": "2.1.1"
      }
    },
    "fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      }
    },
    "find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "peer": true,
      "requires": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      }
    },
    "follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA=="
    },
    "form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "dev": true,
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      }
    },
    "formidable": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.1.2.tgz",
      "integrity": "sha512-CM3GuJ57US06mlpQ47YcunuUZ9jpm8Vx+P2CGt2j7HpgkKZO/DJYQ0Bobim8G6PFQmK5lOqOOdUXboU+h73A4g==",
      "dev": true,
      "requires": {
        "dezalgo": "^1.0.4",
        "hexoid": "^1.0.0",
        "once": "^1.4.0",
        "qs": "^6.11.0"
      }
    },
    "forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow=="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q=="
    },
    "fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "requires": {
        "minipass": "^3.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        }
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "optional": true
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "requires": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      }
    },
    "generic-pool": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g=="
    },
    "gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "peer": true
    },
    "get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "peer": true
    },
    "get-intrinsic": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
      "requires": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3"
      }
    },
    "get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "peer": true
    },
    "get-port": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/get-port/-/get-port-5.1.1.tgz",
      "integrity": "sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ=="
    },
    "get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "peer": true
    },
    "glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "peer": true
    },
    "graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="
    },
    "has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg=="
    },
    "has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A=="
    },
    "has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
    },
    "helmet": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.0.0.tgz",
      "integrity": "sha512-MsIgYmdBh460ZZ8cJC81q4XJknjG567wzEmv46WOBblDb6TUd3z8/GhgmsM9pn8g2B80tAJ4m5/d3Bi1KrSUBQ=="
    },
    "hexoid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
      "dev": true
    },
    "html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "peer": true
    },
    "http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "requires": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      }
    },
    "https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "requires": {
        "agent-base": "6",
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "peer": true
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "peer": true,
      "requires": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      }
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "peer": true
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ioredis": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.3.2.tgz",
      "integrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA==",
      "requires": {
        "@ioredis/commands": "^1.1.1",
        "cluster-key-slot": "^1.1.0",
        "debug": "^4.3.4",
        "denque": "^2.1.0",
        "lodash.defaults": "^4.2.0",
        "lodash.isarguments": "^3.1.0",
        "redis-errors": "^1.2.0",
        "redis-parser": "^3.0.0",
        "standard-as-callback": "^2.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
    },
    "is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "peer": true
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-core-module": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.12.1.tgz",
      "integrity": "sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==",
      "peer": true,
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
    },
    "is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "peer": true
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="
    },
    "is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "peer": true
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "peer": true
    },
    "isomorphic-ws": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-5.0.0.tgz",
      "integrity": "sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==",
      "requires": {}
    },
    "istanbul-lib-coverage": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz",
      "integrity": "sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==",
      "peer": true
    },
    "istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        }
      }
    },
    "istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "peer": true,
      "requires": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "dependencies": {
        "make-dir": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
          "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
          "peer": true,
          "requires": {
            "semver": "^7.5.3"
          }
        }
      }
    },
    "istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "peer": true,
      "requires": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        }
      }
    },
    "istanbul-reports": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
      "peer": true,
      "requires": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      }
    },
    "jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.6.2.tgz",
      "integrity": "sha512-8eQg2mqFbaP7CwfsTpCxQ+sHzw1WuNWL5UUvjnWP4hx2riGz9fPSzYOaU5q8/GqWn1TfgZIVTqYJygbGbWAANg==",
      "peer": true,
      "requires": {
        "@jest/core": "^29.6.2",
        "@jest/types": "^29.6.1",
        "import-local": "^3.0.2",
        "jest-cli": "^29.6.2"
      }
    },
    "jest-changed-files": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.5.0.tgz",
      "integrity": "sha512-IFG34IUMUaNBIxjQXF/iu7g6EcdMrGRRxaUSw92I/2g2YC6vCdTltl4nHvt7Ci5nSJwXIkCu8Ka1DKF+X7Z1Ag==",
      "peer": true,
      "requires": {
        "execa": "^5.0.0",
        "p-limit": "^3.1.0"
      }
    },
    "jest-circus": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.6.2.tgz",
      "integrity": "sha512-G9mN+KOYIUe2sB9kpJkO9Bk18J4dTDArNFPwoZ7WKHKel55eKIS/u2bLthxgojwlf9NLCVQfgzM/WsOVvoC6Fw==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.6.2",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.6.2",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      }
    },
    "jest-cli": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.6.2.tgz",
      "integrity": "sha512-TT6O247v6dCEX2UGHGyflMpxhnrL0DNqP2fRTKYm3nJJpCTfXX3GCMQPGFjXDoj0i5/Blp3jriKXFgdfmbYB6Q==",
      "peer": true,
      "requires": {
        "@jest/core": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "prompts": "^2.0.1",
        "yargs": "^17.3.1"
      }
    },
    "jest-config": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.6.2.tgz",
      "integrity": "sha512-VxwFOC8gkiJbuodG9CPtMRjBUNZEHxwfQXmIudSTzFWxaci3Qub1ddTRbFNQlD/zUeaifLndh/eDccFX4wCMQw==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-jest": "^29.6.2",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.6.2",
        "jest-environment-node": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      }
    },
    "jest-diff": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.6.2.tgz",
      "integrity": "sha512-t+ST7CB9GX5F2xKwhwCf0TAR17uNDiaPTZnVymP9lw0lssa9vG+AFyDZoeIHStU3WowFFwT+ky+er0WVl2yGhA==",
      "requires": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.4.3",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-docblock": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.4.3.tgz",
      "integrity": "sha512-fzdTftThczeSD9nZ3fzA/4KkHtnmllawWrXO69vtI+L9WjEIuXWs4AmyME7lN5hU7dB0sHhuPfcKofRsUb/2Fg==",
      "peer": true,
      "requires": {
        "detect-newline": "^3.0.0"
      }
    },
    "jest-each": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.6.2.tgz",
      "integrity": "sha512-MsrsqA0Ia99cIpABBc3izS1ZYoYfhIy0NNWqPSE0YXbQjwchyt6B1HD2khzyPe1WiJA7hbxXy77ZoUQxn8UlSw==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "jest-util": "^29.6.2",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-environment-node": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.6.2.tgz",
      "integrity": "sha512-YGdFeZ3T9a+/612c5mTQIllvWkddPbYcN2v95ZH24oWMbGA4GGS2XdIF92QMhUhvrjjuQWYgUGW2zawOyH63MQ==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "jest-get-type": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.4.3.tgz",
      "integrity": "sha512-J5Xez4nRRMjk8emnTpWrlkyb9pfRQQanDrvWHhsR1+VUfbwxi30eVcZFlcdGInRibU4G5LwHXpI7IRHU0CY+gg=="
    },
    "jest-haste-map": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.6.2.tgz",
      "integrity": "sha512-+51XleTDAAysvU8rT6AnS1ZJ+WHVNqhj1k6nTvN2PYP+HjU3kqlaKQ1Lnw3NYW3bm2r8vq82X0Z1nDDHZMzHVA==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "fsevents": "^2.3.2",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      }
    },
    "jest-leak-detector": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.6.2.tgz",
      "integrity": "sha512-aNqYhfp5uYEO3tdWMb2bfWv6f0b4I0LOxVRpnRLAeque2uqOVVMLh6khnTcE2qJ5wAKop0HcreM1btoysD6bPQ==",
      "peer": true,
      "requires": {
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-matcher-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.6.2.tgz",
      "integrity": "sha512-4LiAk3hSSobtomeIAzFTe+N8kL6z0JtF3n6I4fg29iIW7tt99R7ZcIFW34QkX+DuVrf+CUe6wuVOpm7ZKFJzZQ==",
      "requires": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-message-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.6.2.tgz",
      "integrity": "sha512-vnIGYEjoPSuRqV8W9t+Wow95SDp6KPX2Uf7EoeG9G99J2OVh7OSwpS4B6J0NfpEIpfkBNHlBZpA2rblEuEFhZQ==",
      "requires": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      }
    },
    "jest-mock": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.6.2.tgz",
      "integrity": "sha512-hoSv3lb3byzdKfwqCuT6uTscan471GUECqgNYykg6ob0yiAw3zYc7OrPnI9Qv8Wwoa4lC7AZ9hyS4AiIx5U2zg==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-util": "^29.6.2"
      }
    },
    "jest-mock-extended": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-3.0.5.tgz",
      "integrity": "sha512-/eHdaNPUAXe7f65gHH5urc8SbRVWjYxBqmCgax2uqOBJy8UUcCBMN1upj1eZ8y/i+IqpyEm4Kq0VKss/GCCTdw==",
      "requires": {
        "ts-essentials": "^7.0.3"
      }
    },
    "jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "peer": true,
      "requires": {}
    },
    "jest-regex-util": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.4.3.tgz",
      "integrity": "sha512-O4FglZaMmWXbGHSQInfXewIsd1LMn9p3ZXB/6r4FOkyhX2/iP/soMG98jGvk/A3HAN78+5VWcBGO0BJAPRh4kg==",
      "peer": true
    },
    "jest-resolve": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.6.2.tgz",
      "integrity": "sha512-G/iQUvZWI5e3SMFssc4ug4dH0aZiZpsDq9o1PtXTV1210Ztyb2+w+ZgQkB3iOiC5SmAEzJBOHWz6Hvrd+QnNPw==",
      "peer": true,
      "requires": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      }
    },
    "jest-resolve-dependencies": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.6.2.tgz",
      "integrity": "sha512-LGqjDWxg2fuQQm7ypDxduLu/m4+4Lb4gczc13v51VMZbVP5tSBILqVx8qfWcsdP8f0G7aIqByIALDB0R93yL+w==",
      "peer": true,
      "requires": {
        "jest-regex-util": "^29.4.3",
        "jest-snapshot": "^29.6.2"
      }
    },
    "jest-runner": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.6.2.tgz",
      "integrity": "sha512-wXOT/a0EspYgfMiYHxwGLPCZfC0c38MivAlb2lMEAlwHINKemrttu1uSbcGbfDV31sFaPWnWJPmb2qXM8pqZ4w==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/environment": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.4.3",
        "jest-environment-node": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-leak-detector": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-resolve": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "jest-worker": "^29.6.2",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      }
    },
    "jest-runtime": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.6.2.tgz",
      "integrity": "sha512-2X9dqK768KufGJyIeLmIzToDmsN0m7Iek8QNxRSI/2+iPFYHF0jTwlO3ftn7gdKd98G/VQw9XJCk77rbTGZnJg==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/globals": "^29.6.2",
        "@jest/source-map": "^29.6.0",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      }
    },
    "jest-snapshot": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.6.2.tgz",
      "integrity": "sha512-1OdjqvqmRdGNvWXr/YZHuyhh5DeaLp1p/F8Tht/MrMw4Kr1Uu/j4lRG+iKl1DAqUJDWxtQBMk41Lnf/JETYBRA==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.6.2",
        "semver": "^7.5.3"
      }
    },
    "jest-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.6.2.tgz",
      "integrity": "sha512-3eX1qb6L88lJNCFlEADKOkjpXJQyZRiavX1INZ4tRnrBVr2COd3RgcTLyUiEXMNBlDU/cgYq6taUS0fExrWW4w==",
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      }
    },
    "jest-validate": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.6.2.tgz",
      "integrity": "sha512-vGz0yMN5fUFRRbpJDPwxMpgSXW1LDKROHfBopAvDcmD6s+B/s8WJrwi+4bfH4SdInBA5C3P3BI19dBtKzx1Arg==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.6.2"
      },
      "dependencies": {
        "camelcase": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
          "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
          "peer": true
        }
      }
    },
    "jest-watcher": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.6.2.tgz",
      "integrity": "sha512-GZitlqkMkhkefjfN/p3SJjrDaxPflqxEAv3/ik10OirZqJGYH5rPiIsgVcfof0Tdqg3shQGdEIxDBx+B4tuLzA==",
      "peer": true,
      "requires": {
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.6.2",
        "string-length": "^4.0.1"
      }
    },
    "jest-worker": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.6.2.tgz",
      "integrity": "sha512-l3ccBOabTdkng8I/ORCkADz4eSMKejTYv1vB/Z83UiubqhC1oQ5Li6dWCyqOIvSifGjUBxuvxvlm6KGK2DtuAQ==",
      "peer": true,
      "requires": {
        "@types/node": "*",
        "jest-util": "^29.6.2",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "dependencies": {
        "supports-color": {
          "version": "8.1.1",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
          "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
          "peer": true,
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "joi": {
      "version": "17.9.2",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.9.2.tgz",
      "integrity": "sha512-Itk/r+V4Dx0V3c7RLFdRh12IOjySm2/WGPMubBT92cQvRfYZhPM2W0hZlctjj72iES8jsRCwp7S/cRmWBnJ4nw==",
      "requires": {
        "@hapi/hoek": "^9.0.0",
        "@hapi/topo": "^5.0.0",
        "@sideway/address": "^4.1.3",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "peer": true,
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      }
    },
    "jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "peer": true
    },
    "json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "peer": true
    },
    "json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg=="
    },
    "jsonwebtoken": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.1.tgz",
      "integrity": "sha512-K8wx7eJ5TPvEjuiVSkv167EVboBDv9PZdDoF7BgeQnBLVvZWW9clr2PsQHVJDTKaEIH5JBIwHujGcHp7GgI2eg==",
      "requires": {
        "jws": "^3.2.2",
        "lodash": "^4.17.21",
        "ms": "^2.1.1",
        "semver": "^7.3.8"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "requires": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "requires": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA=="
    },
    "kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "peer": true
    },
    "leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "peer": true
    },
    "lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "peer": true
    },
    "locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "peer": true,
      "requires": {
        "p-locate": "^4.1.0"
      }
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ=="
    },
    "lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg=="
    },
    "lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "dev": true
    },
    "lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "luxon": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
      "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg=="
    },
    "make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "requires": {
        "semver": "^6.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA=="
        }
      }
    },
    "make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "peer": true,
      "requires": {
        "tmpl": "1.0.5"
      }
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ=="
    },
    "memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "peer": true
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w=="
    },
    "micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "requires": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      }
    },
    "midjourney": {
      "version": "2.7.79",
      "resolved": "https://registry.npmjs.org/midjourney/-/midjourney-2.7.79.tgz",
      "integrity": "sha512-klnOas1htHIIDlw+SyX6/kaT3wNNbbtxJaFpEqnJnw5w++a1WfbjFhgiD4QWggbSvsACbJukV6LWsvgyvf7WOQ==",
      "requires": {
        "@huggingface/inference": "^2.5.0",
        "isomorphic-ws": "^5.0.0",
        "mime": "^3.0.0",
        "p-queue": "^6.6.2",
        "snowyflake": "^2.0.0",
        "throat": "^6.0.2",
        "tslib": "^2.5.0",
        "websocket-ts": "^1.1.1",
        "ws": "^8.13.0"
      },
      "dependencies": {
        "mime": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
          "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A=="
        }
      }
    },
    "mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
    },
    "mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
    },
    "mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "requires": {
        "mime-db": "1.52.0"
      }
    },
    "mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "peer": true
    },
    "minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ=="
    },
    "minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "requires": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        }
      }
    },
    "mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw=="
    },
    "mongodb": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.7.0.tgz",
      "integrity": "sha512-zm82Bq33QbqtxDf58fLWBwTjARK3NSvKYjyz997KSy6hpat0prjeX/kxjbPVyZY60XYPDNETaHkHJI2UCzSLuw==",
      "requires": {
        "bson": "^5.4.0",
        "mongodb-connection-string-url": "^2.6.0",
        "saslprep": "^1.0.3",
        "socks": "^2.7.1"
      }
    },
    "mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "requires": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      },
      "dependencies": {
        "tr46": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
          "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
          "requires": {
            "punycode": "^2.1.1"
          }
        },
        "webidl-conversions": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
          "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g=="
        },
        "whatwg-url": {
          "version": "11.0.0",
          "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
          "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
          "requires": {
            "tr46": "^3.0.0",
            "webidl-conversions": "^7.0.0"
          }
        }
      }
    },
    "mongoose": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-7.4.1.tgz",
      "integrity": "sha512-o3E5KHHiHdaiwCJG3+9r70sncRKki71Ktf/TfXdW6myu+53rtZ56uLl5ylkQiCf60V3COJuOeekcxXVsjQ7cBA==",
      "requires": {
        "bson": "^5.4.0",
        "kareem": "2.5.1",
        "mongodb": "5.7.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew=="
    },
    "mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "requires": {
        "debug": "4.x"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "msgpackr": {
      "version": "1.9.6",
      "resolved": "https://registry.npmjs.org/msgpackr/-/msgpackr-1.9.6.tgz",
      "integrity": "sha512-50rmb6+ZWvEm0vJn8R8CwI1Eavss3h5rgtKrcdUal3EkZcpqw82+xsmc7RoHb8fYB5V4EOU2NDaOitDAdO0t+w==",
      "requires": {
        "msgpackr-extract": "^3.0.2"
      }
    },
    "msgpackr-extract": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/msgpackr-extract/-/msgpackr-extract-3.0.2.tgz",
      "integrity": "sha512-SdzXp4kD/Qf8agZ9+iTu6eql0m3kWm1A2y1hkpTeVNENutaB0BwHlSvAIaMxwntmRUAUjon2V4L8Z/njd0Ct8A==",
      "optional": true,
      "requires": {
        "@msgpackr-extract/msgpackr-extract-darwin-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-darwin-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-win32-x64": "3.0.2",
        "node-gyp-build-optional-packages": "5.0.7"
      }
    },
    "natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "peer": true
    },
    "negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
    },
    "node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA=="
    },
    "node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-C/fGU2E8ToujUivIO0H+tpQ6HWo4eEmchoPIoXtxCrVghxdKq+QOHqEZW7tuP3KlV3bC8FRMO5nMCC7Zm1VP6g==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "node-gyp-build-optional-packages": {
      "version": "5.0.7",
      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.0.7.tgz",
      "integrity": "sha512-YlCCc6Wffkx0kHkmam79GKvDQ6x+QZkMjFGrIMxgFNILFvGSbCp2fCBC55pGTT9gVaz8Na5CLmxt/urtzRv36w==",
      "optional": true
    },
    "node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "peer": true
    },
    "node-releases": {
      "version": "2.0.13",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.13.tgz",
      "integrity": "sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==",
      "peer": true
    },
    "nodemon": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz",
      "integrity": "sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==",
      "dev": true,
      "requires": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.7",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
          "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
          "dev": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
          "dev": true
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
          "dev": true
        },
        "semver": {
          "version": "5.7.2",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
          "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
          "dev": true
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "dev": true,
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "requires": {
        "abbrev": "1"
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="
    },
    "npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "peer": true,
      "requires": {
        "path-key": "^3.0.0"
      }
    },
    "npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "requires": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg=="
    },
    "object-inspect": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g=="
    },
    "on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA=="
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "requires": {
        "wrappy": "1"
      }
    },
    "onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "peer": true,
      "requires": {
        "mimic-fn": "^2.1.0"
      }
    },
    "openai": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-3.3.0.tgz",
      "integrity": "sha512-uqxI/Au+aPRnsaQRe8CojU0eCR7I0mBiKjD3sNMzY6DaC1ZVrc85u98mtJW6voDug8fgGN+DIZmTDxTthxb7dQ==",
      "requires": {
        "axios": "^0.26.0",
        "form-data": "^4.0.0"
      },
      "dependencies": {
        "axios": {
          "version": "0.26.1",
          "resolved": "https://registry.npmjs.org/axios/-/axios-0.26.1.tgz",
          "integrity": "sha512-fPwcX4EvnSHuInCMItEhAGnaSEXRBjtzh9fOtsE6E1G6p7vl7edEeZe11QHf18+6+9gR5PbKV/sGKNaD8YaMeA==",
          "requires": {
            "follow-redirects": "^1.14.8"
          }
        },
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow=="
    },
    "p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "peer": true,
      "requires": {
        "yocto-queue": "^0.1.0"
      }
    },
    "p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "peer": true,
      "requires": {
        "p-limit": "^2.2.0"
      },
      "dependencies": {
        "p-limit": {
          "version": "2.3.0",
          "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
          "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
          "peer": true,
          "requires": {
            "p-try": "^2.0.0"
          }
        }
      }
    },
    "p-queue": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/p-queue/-/p-queue-6.6.2.tgz",
      "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
      "requires": {
        "eventemitter3": "^4.0.4",
        "p-timeout": "^3.2.0"
      }
    },
    "p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "requires": {
        "p-finally": "^1.0.0"
      }
    },
    "p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "peer": true
    },
    "parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      }
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "passport": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
      "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
      "requires": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1",
        "utils-merge": "^1.0.1"
      }
    },
    "passport-jwt": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.1.tgz",
      "integrity": "sha512-UCKMDYhNuGOBE9/9Ycuoyh7vP6jpeTp/+sfMJl7nLff/t6dps+iaeE0hhNkKN8/HZHcJ7lCdOyDxHdDoxoSvdQ==",
      "requires": {
        "jsonwebtoken": "^9.0.0",
        "passport-strategy": "^1.0.0"
      }
    },
    "passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha512-9wCE6qKznvf9mQYYbgJ3sVOHmCWoUNMVFoZzNoznmISbhnNNPhN9xfY3sLmScHMetEJeoY7CXwfhCe7argfQow==",
      "requires": {
        "passport-strategy": "1.x.x"
      }
    },
    "passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha512-CB97UUvDKJde2V0KDWWB3lyf6PC3FaZP7YxZ2G8OAtn9p4HI9j9JLP9qjOGZFvyl8uwNT8qM+hGnz/n16NI7oA=="
    },
    "path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "peer": true
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg=="
    },
    "path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "peer": true
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "peer": true
    },
    "path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha512-KG8UEiEVkR3wGEb4m5yZkVCzigAD+cVEJck2CzYZO37ZGJfctvVptVO192MwrtPhzONn6go8ylnOdMhKqi4nfg=="
    },
    "picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "peer": true
    },
    "picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA=="
    },
    "pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "peer": true
    },
    "pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "peer": true,
      "requires": {
        "find-up": "^4.0.0"
      }
    },
    "pretty-format": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.6.2.tgz",
      "integrity": "sha512-1q0oC8eRveTg5nnBEWMXAU2qpv65Gnuf2eCQzSjxpWFkPaPARwqZZDGuNE0zPAZfTCHzIk3A8dIjwlQKKLphyg==",
      "requires": {
        "@jest/schemas": "^29.6.0",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
          "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA=="
        }
      }
    },
    "prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "peer": true,
      "requires": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      }
    },
    "proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "requires": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      }
    },
    "proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA=="
    },
    "pure-rand": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.0.2.tgz",
      "integrity": "sha512-6Yg0ekpKICSjPswYOuC5sku/TSWaRYlA0qsXqJgM/d/4pLPHPuTxK7Nbf7jFKzAeedUhR8C7K9Uv63FBsSo8xQ==",
      "peer": true
    },
    "qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "requires": {
        "side-channel": "^1.0.4"
      }
    },
    "random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ=="
    },
    "range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
    },
    "raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "requires": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      }
    },
    "react-is": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
    },
    "readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "requires": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "redis": {
      "version": "4.6.7",
      "resolved": "https://registry.npmjs.org/redis/-/redis-4.6.7.tgz",
      "integrity": "sha512-KrkuNJNpCwRm5vFJh0tteMxW8SaUzkm5fBH7eL5hd/D0fAkzvapxbfGPP/r+4JAXdQuX7nebsBkBqA2RHB7Usw==",
      "requires": {
        "@redis/bloom": "1.2.0",
        "@redis/client": "1.5.8",
        "@redis/graph": "1.1.0",
        "@redis/json": "1.0.4",
        "@redis/search": "1.1.3",
        "@redis/time-series": "1.0.4"
      }
    },
    "redis-errors": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w=="
    },
    "redis-parser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
      "requires": {
        "redis-errors": "^1.0.0"
      }
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "peer": true
    },
    "resolve": {
      "version": "1.22.2",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.2.tgz",
      "integrity": "sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==",
      "peer": true,
      "requires": {
        "is-core-module": "^2.11.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "peer": true,
      "requires": {
        "resolve-from": "^5.0.0"
      }
    },
    "resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "peer": true
    },
    "resolve.exports": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
      "integrity": "sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==",
      "peer": true
    },
    "rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "requires": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "requires": {
        "lru-cache": "^6.0.0"
      }
    },
    "send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "requires": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "requires": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      }
    },
    "set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "peer": true,
      "requires": {
        "shebang-regex": "^3.0.0"
      }
    },
    "shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "peer": true
    },
    "side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "requires": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      }
    },
    "sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "requires": {
        "semver": "~7.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
          "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
          "dev": true
        }
      }
    },
    "sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "peer": true
    },
    "slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q=="
    },
    "smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg=="
    },
    "snowyflake": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/snowyflake/-/snowyflake-2.0.0.tgz",
      "integrity": "sha512-BxeqV0KJxJASu6EBJGUkX194Zhh37AEa0ow/JRK39icWbLTG9Wl/7LAL6a/ZMSjNm4O9pZk6QoLcWP7f/YKmtA=="
    },
    "socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "requires": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "peer": true
    },
    "source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "peer": true,
      "requires": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "requires": {
        "memory-pager": "^1.0.2"
      }
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "peer": true
    },
    "stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "requires": {
        "escape-string-regexp": "^2.0.0"
      }
    },
    "standard-as-callback": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A=="
    },
    "statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
    },
    "string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "requires": {
        "safe-buffer": "~5.2.0"
      }
    },
    "string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "peer": true,
      "requires": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      }
    },
    "string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      }
    },
    "strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "requires": {
        "ansi-regex": "^5.0.1"
      }
    },
    "strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "peer": true
    },
    "strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "peer": true
    },
    "strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "peer": true
    },
    "superagent": {
      "version": "8.0.9",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.0.9.tgz",
      "integrity": "sha512-4C7Bh5pyHTvU33KpZgwrNKh/VQnvgtCSqPRfJAUdmrtSYePVzVg4E4OzsrbkhJj9O7SO6Bnv75K/F8XVZT8YHA==",
      "dev": true,
      "requires": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^2.1.2",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0",
        "semver": "^7.3.8"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "dev": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "dev": true,
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        },
        "mime": {
          "version": "2.6.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
          "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
          "dev": true
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "dev": true
        }
      }
    },
    "supertest": {
      "version": "6.3.3",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-6.3.3.tgz",
      "integrity": "sha512-EMCG6G8gDu5qEqRQ3JjjPs6+FYT1a7Hv5ApHvtSghmOFJYtsU5S+pSb6Y2EUeCEY3CmEL3mmQ8YWlPOzQomabA==",
      "dev": true,
      "requires": {
        "methods": "^1.1.2",
        "superagent": "^8.0.5"
      }
    },
    "supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "requires": {
        "has-flag": "^4.0.0"
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "peer": true
    },
    "tar": {
      "version": "6.1.15",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.15.tgz",
      "integrity": "sha512-/zKt9UyngnxIT/EAGYuxaMYgOIJiP81ab9ZfkILq4oNLPFX50qyYmu7jRj9qeXoxmJHjGlbH0+cm2uy1WCs10A==",
      "requires": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      }
    },
    "test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "peer": true,
      "requires": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      }
    },
    "throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ=="
    },
    "tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "peer": true
    },
    "to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "peer": true
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "requires": {
        "nopt": "~1.0.10"
      },
      "dependencies": {
        "nopt": {
          "version": "1.0.10",
          "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
          "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
          "dev": true,
          "requires": {
            "abbrev": "1"
          }
        }
      }
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "ts-essentials": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/ts-essentials/-/ts-essentials-7.0.3.tgz",
      "integrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ==",
      "requires": {}
    },
    "ts-jest": {
      "version": "29.1.1",
      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.1.1.tgz",
      "integrity": "sha512-D6xjnnbP17cC85nliwGiL+tpoKN0StpgE0TeOjXQTU6MVCfsB4v7aW05CgQ/1OywGb0x/oy9hHFnN+sczTiRaA==",
      "dev": true,
      "requires": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^29.0.0",
        "json5": "^2.2.3",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "^7.5.3",
        "yargs-parser": "^21.0.1"
      }
    },
    "ts-node": {
      "version": "10.9.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
      "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
      "requires": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      }
    },
    "tslib": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.1.tgz",
      "integrity": "sha512-t0hLfiEKfMUoqhG+U1oid7Pva4bbDPHYfJNiB7BiIjRkj1pyC++4N3huJfqY6aRH6VTB0rvtzQwjM4K6qpfOig=="
    },
    "type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "peer": true
    },
    "type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "peer": true
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "typescript": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.1.6.tgz",
      "integrity": "sha512-zaWCozRZ6DLEWAWFrVDz1H6FVXzUSfTy5FUMWsQlU8Ym5JP9eO4xkTIROFCQvhQf61z6O/G6ugw3SgAnvvm+HA=="
    },
    "uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "requires": {
        "random-bytes": "~1.0.0"
      }
    },
    "undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ=="
    },
    "update-browserslist-db": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz",
      "integrity": "sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==",
      "peer": true,
      "requires": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      }
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA=="
    },
    "uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg=="
    },
    "v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg=="
    },
    "v8-to-istanbul": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.1.0.tgz",
      "integrity": "sha512-6z3GW9x8G1gd+JIIgQQQxXuiJtCXeAjp6RaPEPLv62mH3iPHPxV6W3robxtCzNErRo6ZwTmzWhsbNvjyEBKzKA==",
      "peer": true,
      "requires": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0"
      },
      "dependencies": {
        "convert-source-map": {
          "version": "1.9.0",
          "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
          "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
          "peer": true
        }
      }
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg=="
    },
    "walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "peer": true,
      "requires": {
        "makeerror": "1.0.12"
      }
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "websocket-ts": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/websocket-ts/-/websocket-ts-1.1.1.tgz",
      "integrity": "sha512-rm+S60J74Ckw5iizzgID12ju+OfaHAa6dhXhULIOrXkl0e05RzxfY42/vMStpz5jWL3iz9mkyjPcFUY1IgI0fw=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "peer": true,
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "requires": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "peer": true,
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "peer": true,
      "requires": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      }
    },
    "ws": {
      "version": "8.13.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.13.0.tgz",
      "integrity": "sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==",
      "requires": {}
    },
    "y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "peer": true
    },
    "yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "peer": true,
      "requires": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      }
    },
    "yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw=="
    },
    "yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q=="
    },
    "yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "peer": true
    }
  }
}


--- File: package.json ---
{
  "name": "bodyone-backend-node",
  "version": "1.0.0",
  "description": "Backend for Ai Apis",
  "main": "index.js",
  "scripts": {
    "start": "npx ts-node src/app.ts",
    "test": "jest --watchAll --verbose --runInBand"
  },
  "keywords": [],
  "author": "Andy Lewis",
  "license": "ISC",
  "dependencies": {
    "@types/supertest": "^2.0.12",
    "axios": "^1.4.0",
    "bcrypt": "^5.1.0",
    "bcryptjs": "^2.4.3",
    "bull": "^4.10.4",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "express-session": "~1.17.0",
    "helmet": "^7.0.0",
    "ioredis": "^5.3.2",
    "jest-mock-extended": "^3.0.4",
    "joi": "^17.9.2",
    "jsonwebtoken": "^9.0.0",
    "lodash": "^4.17.21",
    "midjourney": "^2.2.31",
    "mongodb": "^5.5.0",
    "mongoose": "^7.1.1",
    "node-fetch": "^2.6.11",
    "openai": "^3.3.0",
    "passport": "^0.6.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "redis": "^4.6.6",
    "ts-node": "^10.9.1",
    "typescript": "^5.0.4"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.0",
    "@types/bcryptjs": "^2.4.2",
    "@types/cors": "^2.8.13",
    "@types/express-session": "~1.17.0",
    "@types/jest": "^29.5.1",
    "@types/jsonwebtoken": "^9.0.2",
    "@types/mocha": "^10.0.1",
    "@types/mongoose": "^5.11.97",
    "@types/node": "^20.1.7",
    "@types/node-fetch": "^2.6.4",
    "@types/passport": "^1.0.12",
    "@types/passport-jwt": "^3.0.8",
    "@types/passport-local": "^1.0.35",
    "dotenv": "^16.0.3",
    "nodemon": "^2.0.22",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.0"
  },
  "directories": {
    "test": "tests"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AJLewis/bodyone-backend-node.git"
  },
  "bugs": {
    "url": "https://github.com/AJLewis/bodyone-backend-node/issues"
  },
  "homepage": "https://github.com/AJLewis/bodyone-backend-node#readme"
}


--- File: project_structure.txt ---
--- Folder Structure ---
[.git]
    ├── COMMIT_EDITMSG
    ├── FETCH_HEAD
    ├── HEAD
    ├── ORIG_HEAD
    ├── config
    ├── description
    ├── [hooks]
        ├── applypatch-msg.sample
        ├── commit-msg.sample
        ├── fsmonitor-watchman.sample
        ├── post-update.sample
        ├── pre-applypatch.sample
        ├── pre-commit.sample
        ├── pre-merge-commit.sample
        ├── pre-push.sample
        ├── pre-rebase.sample
        ├── pre-receive.sample
        ├── prepare-commit-msg.sample
        └── update.sample
    ├── index
    ├── [info]
        └── exclude
    ├── [objects]
        ├── [13]
            └── fb5792205059bb7bfe0c7dd09fcc316b9cf0a3
        ├── [55]
            └── a1cbc146410e4ded134a70caf1b814276c3be3
        ├── [78]
            └── d64083d469249a1d4a85edbef0e5c93a8541a0
        ├── [cf]
            ├── d47797da57a7ce1a1c4a4f9e10f0678e9d085a
            └── dca8a458d4577dd687e079fc13f6af8c44d425
        ├── [info]
        └── [pack]
            ├── pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.idx
            └── pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.pack
    ├── packed-refs
    └── [refs]
        ├── [heads]
            └── main
        ├── [remotes]
            └── [origin]
                ├── HEAD
                └── main
        └── [tags]
.gitignore
[.history]
    └── [src]
        ├── app_20230803101441.ts
        ├── app_20230803121957.ts
        ├── app_20230803122001.ts
        ├── [config]
            ├── passport_20230803095330.ts
            ├── passport_20230803120530.ts
            ├── passport_20230803120539.ts
            └── passport_20230803121028.ts
        └── [models]
            ├── Exercise.model_20230803115039.ts
            ├── Exercise.model_20230803115557.ts
            ├── Exercise.model_20230803120625.ts
            ├── Exercise.model_20230803120723.ts
            ├── Exercise.model_20230803120824.ts
            ├── Exercise.model_20230803120902.ts
            ├── Exercise.model_20230803120903.ts
            ├── Exercise.model_20230803121249.ts
            ├── Exercise.model_20230803121251.ts
            ├── Ingredient.model_20230803113925.ts
            ├── Ingredient.model_20230803113942.ts
            ├── Ingredient.model_20230803114024.ts
            ├── Ingredient.model_20230803114026.ts
            ├── Ingredient.model_20230803120720.ts
            ├── Ingredient.model_20230803121238.ts
            ├── Ingredient.model_20230803121240.ts
            ├── Meal.model_20230803113629.ts
            ├── Meal.model_20230803113720.ts
            ├── Meal.model_20230803114036.ts
            ├── Meal.model_20230803120717.ts
            ├── Meal.model_20230803121226.ts
            ├── Meal.model_20230803121228.ts
            ├── MealPlan.model_20230803101601.ts
            ├── MealPlan.model_20230803112841.ts
            ├── MealPlan.model_20230803113703.ts
            ├── MealPlan.model_20230803120012.ts
            ├── MealPlan.model_20230803120014.ts
            ├── MealPlan.model_20230803120712.ts
            ├── MealPlan.model_20230803121218.ts
            ├── MealPlan.model_20230803121220.ts
            ├── Pts.model_20230803121605.ts
            ├── Pts.model_20230803121624.ts
            ├── Pts.model_20230803121627.ts
            ├── Recipe.model_20230803101601.ts
            ├── Recipe.model_20230803113300.ts
            ├── Recipe.model_20230803113320.ts
            ├── Recipe.model_20230803113324.ts
            ├── Recipe.model_20230803113917.ts
            ├── Recipe.model_20230803114052.ts
            ├── Recipe.model_20230803114153.ts
            ├── Recipe.model_20230803114333.ts
            ├── Recipe.model_20230803114336.ts
            ├── Recipe.model_20230803114337.ts
            ├── Recipe.model_20230803120707.ts
            ├── Recipe.model_20230803121211.ts
            ├── User.model_20230803101255.ts
            ├── User.model_20230803112212.ts
            ├── User.model_20230803112941.ts
            ├── User.model_20230803113002.ts
            ├── User.model_20230803115950.ts
            ├── User.model_20230803115952.ts
            ├── User.model_20230803120100.ts
            ├── User.model_20230803120130.ts
            ├── User.model_20230803120131.ts
            ├── User.model_20230803120703.ts
            ├── User.model_20230803121024.ts
            ├── User.model_20230803121158.ts
            ├── User.model_20230803121200.ts
            ├── User.model_20230803121816.ts
            ├── User.model_20230803121931.ts
            ├── User.model_20230803121948.ts
            ├── UserMealPlan.model_20230803120008.ts
            ├── UserMealPlan.model_20230803121150.ts
            ├── UserMealPlan_20230803115733
            ├── UserMealPlan_20230803115741
            ├── UserMealPlan_20230803115816
            ├── UserMealPlan_20230803115825
            ├── UserMealPlan_20230803115829
            ├── UserMealPlan_20230803115832
            ├── UserMealPlan_20230803115834
            ├── UserMealPlan_20230803120007
            ├── UserMealPlan_20230803120009
            ├── UserMetrics.model_20230803111806.ts
            ├── UserMetrics.model_20230803111813.ts
            ├── UserMetrics.model_20230803120657.ts
            ├── UserMetrics.model_20230803121139.ts
            ├── UserMetrics.model_20230803121140.ts
README.md
[node_modules]
package-lock.json
package.json
project_structure.txt
[src]
    ├── app.ts
    ├── [config]
        ├── db.js
        └── passport.ts
    ├── [constants]
        └── openai-models.constant.ts
    ├── [controllers]
        ├── [external]
            ├── [bard]
                └── chat.ts
            ├── [openai]
                ├── chat.ts
                ├── completion.ts
                └── image.ts
            └── [stable-diffusion]
                ├── fetch_from_queue.ts
                ├── text_to_image.ts
                └── text_to_video.ts
        └── [internal]
            └── [auth]
                └── authentication.ts
    ├── [middlewares]
    ├── [models]
        ├── Exercise.model.ts
        ├── Ingredient.model.ts
        ├── Meal.model.ts
        ├── MealPlan.model.ts
        ├── Pts.model.ts
        ├── Recipe.model.ts
        ├── User.model.ts
        ├── UserMealPlan.model.ts
        ├── UserMetrics.model.ts
    └── [utils]
tsconfig.json

--- File Contents ---

--- File: .git/COMMIT_EDITMSG ---
Initial setup including server


--- File: .git/FETCH_HEAD ---
55a1cbc146410e4ded134a70caf1b814276c3be3		branch 'main' of https://github.com/AJLewis/bodyone-backend-node


--- File: .git/HEAD ---
ref: refs/heads/main


--- File: .git/ORIG_HEAD ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .git/config ---
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/AJLewis/bodyone-backend-node.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main


--- File: .git/description ---
Unnamed repository; edit this file 'description' to name the repository.


--- File: .git/hooks/applypatch-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


--- File: .git/hooks/commit-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


--- File: .git/hooks/fsmonitor-watchman.sample ---
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


--- File: .git/hooks/post-update.sample ---
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


--- File: .git/hooks/pre-applypatch.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


--- File: .git/hooks/pre-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


--- File: .git/hooks/pre-merge-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


--- File: .git/hooks/pre-push.sample ---
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


--- File: .git/hooks/pre-rebase.sample ---
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


--- File: .git/hooks/pre-receive.sample ---
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


--- File: .git/hooks/prepare-commit-msg.sample ---
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


--- File: .git/hooks/update.sample ---
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


--- File: .git/index ---
DIRC      d�XzE�zd�XzE�z  �,  ��  �     �ƻ��8�i��Q-��<S�} 
.gitignore        d�XzH{�d�XzH{�  �-  ��  �      ��n1(K�C�V;WX%�L�� 	README.md d�Z�*�d�Z�*�  琫  ��  �    ��W� PY�{�}П�1k�� package-lock.json d�Z�+�;d�Z�+�;  ��  ��  �     Nx�@��i$�J������:�A� package.json      d�Z�-��d�Z�-��  �m  ��  �      ���w��W��JO��g��Z 	server.js TREE    5 0
�ܨ�X�W}և�y����D�%A��6�mT�������\=D

--- File: .git/info/exclude ---
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


--- File: .git/objects/13/fb5792205059bb7bfe0c7dd09fcc316b9cf0a3 ---
x�i��ڶ X��W����`�"��g����4�u3�D��ʼ����e��.Y�����Ľ:`�~�9���?0�=������_��㇧�Ə�������ن�x�n��?�72#�-߃_��D�D�u|�>X�!]��oGF�Z���'Qj� LŬ��	`���&oP���[�wK3��^͏뷫��X��i�ݓ�;��A��ޟ`M�߀������������iX\ۏ�w������b��5�� �~������w�;�' ��������	�Q���]_O#F��U�/����� �+�~�v{�𲾓:|�c��"Hd�V�D�^���?��|�������gbV�%����0#+)!�������|t��۵)�� F�Y�U�	�u?['{ۢϔZO�Η*i��Z�DPX8�&�Ҟ�T��+�QN\��o�����n$��|8����o_�b����_��!�\���k�b��@ <rHM���h�χ�׷��w孟��;�Y���3kD�)��'���. r}� ,ٻZ��o��5�/�tf$�6�y��,��=����� ��Ȥ c�*��^Q�Q����=3����ΐ��]�n�le2�����L����P���b䷙v"3j��$5֣rZ-����L{򌚮��� X=���zX8��>|�@�-���|�S�~� �)�;~'�>`��?~�y��B 1�%O�ʖ���R�to��ǖ;��X�[�RL��;Q���v�!�#�c�C!-�S�.��a��鱏J�B8F��]G%�͏4r^�	h�;��.���!z�>j���2M�)�n��יĮ�TzN���
��0ߐ�p���Y�F{�eB͘�1F���193�S�2�%�[��8�M������Z{���������7@h?��J��7/R��WU�h֞1&�wv�)�� ���B����3m��cEe<�'�:J*br�E$�(�Tǻ����^�TDy;�a�:���a?@�Mb���&X
���4#H^�%Tj���ƫ?Ä�?_��8������((m�--�4�'�	7F��%�bv�-���wmw�fyk5�#׭�L��DĮ<ԔBꈩ��Jn��?_��X̵\�f3�7�hzu�ץC�`�~b)�_�O�]����ϴ��}�Oc��������G_�_�n���3�ā���W��rIs��QC{O��~��4gJ���@�����S��kw_,�Cg}�:'�\��¶{}�%&��nN����R>ݓ�g�
�5v_Դ��W�5�9\z�Y�����d�������}㒦��!��~�0ޣ��l���;�$YϹ�[��lH�&=6e�i�qUlؓ^{��C�0�9Ҋ�]Hg�-%�Xs�"($�VG��!��گ�2Ѿ"�)���M`��n��r�����i�Q���E���[���h'�V�&*�q�+\�}�g�1�#��5^r�}]nÍ���G���ԍ)�+Z҉I�!��ڄ?�NGSr9��]���ݍ3������ldS*�-��Pnw�3��RtQ 35�8R������߽�� [�������̭\�B-s��QC{��0��w���Բ��xq���<����xG�Ǘ+��wIl9��~�a�<ЭMUn�����f"dYu�s����������[�@�'��{��ǭUc�� !���7@k�G�#]� �B�YP�$�����l『�|�:dg�"�s��q;u�&�hN�ܴg������ZV���`g���s`+��(�Q|.6�[��h�	8D�Oj��������g^,��bAk�|�[��>�7�;$d��˰�W�Ȁ^���~��OڝY��� �����f"��ބn8��$�'������.:2]Q�D�����(�h�7܊�~��F�R~%���MG�rM��'5u{��4\���pS\ԋx2�)r��zg�%w��fy�)�3�;}o�0��*�h|\��N����Rï7\��(�f��rV<�`H��{Y��N�PG������Ȣ#��q�]u/���Dr�f�Zl&{6�����56v]u3Tv��+4) ��`��.��'�GY�q_�k��2��M��"��+# ��v#���xbF�V���(�M6H;�u'�(Xw��(>cr}�w�%��~L�dmΤ�؊�d�&�A��c���>_Z�փ8*1�ŉ�8�YuT����/���c�g)�xq.�$E�}�C	�Zʡ����?�H9K?��X�G�Dq{FH��݇^S����	04�����E(��ʹrb�d;^kBJwkm��)�@���!�'9_�6��8G92��N�U��d��:Ia�*�6��j���a��&ӀF 6�bRo� ����҃o\��m����LRǏ-~����:�~!4��F�ѧS}o&�}F�@�6���0X�~x�L˳��9vݮC�w��,�y���?7R�H6����@�o�U�  ������z�ԯ����E <�oQ�GQ���?� {c����X��� л�O_��90i�E6��G����r�j����l25�َ��3�FzEP�D��F(*�]9�\��{X���g婣�#5�>��JWf�v��S�B�j0{�9��9��Q �iJ, <2��-F���'9���0���\c����` ���d����5ݣb��8a�e�Z����nv�i�ވ=Q3]+[Ѿ�b�v�位8��z��Kj�z�?J�Ns����̾��ʆ�J#� 'J&*lz�DH���ڗ���}y�vF�r�	Dk��Ha��I�1C��g�@�"[�	%X�@M��·����jMu�C�]�֞��t�����C|���W_� \4�3F{T�� ���G�=�!�!��P�|���Y�JĠ�G}-j��S8��I?��h=�]���g�X�s���W;>9	��*���H�d����Eߚ~�;kq�2��O��WA{�e��nv�)ʮPڮ�M=X�mMձu�F�-�Ne#֒���G�EWn�YZdl�-T��!�d췅���4��uR��5E��[� �a� ����C�i0BtA	���W�#d�8��,`D�g�g]p}%��[�>^Mb}Fs=96�䘪j��ā����#��Dj��܃Q���M�j��j�E�-�J�n2��T�����Rd��,AYRߗ���!�͖�أY�0�c.�\b�j�,u�H*]��D��[���~�Xo��kTG?>�/��ݹ��1��X�2������wޫ����@e�,2[�����!�����ڛ�C.�tZ�|ҩZۜ���dV�Y8�����n�q�����6?��������{����?Oq޻w����/�
C���ͷ��xq4>jh�Q��Q���\�F�H���e�CU>'�h֋��Hm�8���"o��)�qN@��������x���4S���} oBxV\wFf��C��V {}��y�3��=�f�QR"���`�>��&��CI7X��1��w�U��\XU�V̷��w�#��H�ď�0��)�MEi�τӖ���ҏ��B<�}�n�[Pپ�
6�LsQ��O??�t�����V)��]�p��V�,��K��!�V�I��.Bz�����t���þ6����ً���l�L�v+�t�ks+�>V�aP:{`�s󵯲�F76<<�n�^P�[��w)ߑ��:�����kX�B�]y�ގ���/�>���E����є�Tm�s�4�=�X��D�����d��|�讒y�>��,���
{��~G�!�o����-�;�Xz��7���9;�$��k�,��@rE���Cs"�ə����~)$�������t��Dv�!�؍�&�L�}Ė�)I�����>i~��+����R�=����QfZ�Ҥ>Md�2��s_̶r�O��+�.{X��@̥bMG��n����$�U��T�x�-����-���5�%~�̎<���J���q����1A:�>W���F�����X����-|t ������ ײ80�Ӯ�6�brr��#��d9�Yi*�1��Z�]Ώ�G����ÓgH�L�}�B�s��٦��z{����w{{L�Vc2�;'��|F�}V��q��Cd6\�r5wT�(6)w�QV����h�UޱM\|���xcs�	�z��t?`��p��X��7�C*��`�H�;?��D����΁>������}�dr{<� �31�|&�kr��w�O�ݯn\�����m��f���
�
D�[G�ϩ���hZ�`yך�+�=F&�@C�����yl�t�;Z:4=rV���P$�3�q��,��<.:�2X�Me����W��ۿn}L~�`������H�&(�����L��1��Y�������m��%��#�^����X�j-����]��ǳS'g;_��Vl�Y�d�jL����F�yI�������f"���8�yϙ4WM�y�胮:X.�I�#E.G[~Lv		�P)�]�X��7��lHw�p�`������]{:Tt�~p��p&�$}���O���s���3��?�ڰ�+�G�8�8�M�8$Q�[��)a�< P��_k�Ӥf�SL���#u����6�t�����'�r�������`��6�٪���s�TC�8\�f��=;N���z�s�~,���@��V��](i�6pBůC#q�Q�	��� ��V!o��,��omEe�je��B�?��}p����OMC�c!�l4�WD�폇F��v>�;�a�_,Q/�qL�֎��Q����������������=dq���[\0�I����F>���(��i��xy*��)�+�ە�>��L/��JZ�ֱ�B��iG���+�'�.E�_G�A�(�y��ݹ�[�+T���j�j`9n���p�H��o]�Nɵ����y�@��wSf9a�C0�,b#R��D��Њ��kb�ICV�Н���-��X��ob<@�\���}U ���8�\���Sj6�q�,>�]� ��;m�.b������H��x�LyO(@��V�02u�p�,X'e��N�y�����e�e��4x'R�r����c ��7�5 W���K�B/{ӂp�\R:(�8�G�]k��XH
�2�h�G{K��M�8�sl��kW]t��=�	۔�Ȃ�o��蠏F���59!��=�:~*�k���~e�+����ޣ��p��(N?�g�`bj�lf�������8�f�֜0�,�׻)9�IZ)�R4`���*Gd2v�x��L�Ј}� ���l�/g �8�}��ʣm߸Kt9�H�_�����8�>�y��ϰܓ<�s�>�1�T��1 r~��P
��%���<��� �̗�"���7e�p�I��{	w@���Ow��y�{0�p�PW	��><�]��kD&�A/�>�h���  �5���_2Z�㯇A���:���暇UJr�H�s��g��X��YG��u��&A�N���ڮ�[�0T|	�W��);������3ټEI�/�(��Jr>��~Ȭ���O|ȣ~]p��������
W��nu(�uQb9�GM��>�:S�:9	���s�7{`Ra���w��?��3����0P����i<�;M���f��v<S$�l��N	z�;���ᖶ��T�L��a��*�͒�RzYV��,%ו6
H��0����
�ꉿ&o_��-7��=�/2�OJ� ;�\��:��� �N�s�*d��58h�+j���C0J63^�C����v����:�7K��_�U�H�U�6Y-������S��^5(��%�X�ld���0P��	��x#U�m�ڿ1ڠ�(���G)��j�v�2��#rʦ�!u)�(P��بՐ�+U��n���L��n�0�nV��-���)�H;i����S��y���(I��(u7�gH�5E7��i7�u�O �E���TK�,(H�[\�B4vƩblI}5���ę3+:V�Y[J�K+�Rw�E3��M���Sr|�?��vX����G������#�T��Ɏ�-?��}M�p-��uY���$��J��Ę����\���W,m;ي���1G��GO*���l!̋��Xq����6u%�}<.8�
��H{��t���a��P� �4ʀV���Z4#ş�8Ɓ�x�398+���j��r��pk9�~�7��e�`�v����PW��T3����h��H^!�7I���i;���+jBM�ץ��l3*�m������n�@1���I?�=�p���bc�p�)�q�`���K�φ���i_vz�?��{q�/S�R�b��O��U�t��[X�P�`eMO�<�EiO��k|���:�d*���ꇛ��5D���_ ��
�]y�7�A9tog��t�Z�t{�N�Y��O5R:]m慼=�k�K�G�:�,�����r'=`lΜ��`v:,9�\����bx���JB���z7� ��_r��~��/���*��I����H=P� � A xc; �WO��0_ �SG�s&�h�4��[g%rV�wotξ��-�~�f�wq.�g��~,�~x�S�>_����)U���H�\6�q�9�>Er���zG�@6�-.Ñ*�f�a�*B�5ˤ���sI�]�-����J���t��Xw�TYTXQ��7H�9U�")i���S���xP&���+ v��q��|V�F���oǥ�����!�7O����k��a���x���D !��?�c���Jțn��f �屲)r<ϖ���g����Jt�˘>��a:s��bǣ�ۭ�#�֑�A��Y\M�#j��-k�<x���Н5��A�X�H��,�PO�r�-�[u�7�n@�R�	=���������=<���X�*J��\ET������.����r�+��$�,Ϙ���߶� �%(+��߳ҡ�g,*�8k�����#�xR+fx�=DZpA/�--u��~�!�B�n�[�6�t�)WJd�ڒ�:��_����},D�����i+����y���i*�W�����P㿁�&B�eq-���SP�O�Z�?�V$�s��%�:�b9�5ʚ���N����.�,�	S��c��cEq
�31����a�� yW��e�o\�vS篈q�~��p?�����@8��8��9Y��da�2EZG���Jy�x�8��s���di�#���tī�̍�Y$�����9m��������%���{F�G��;���I��Ou�O	�o��Y�6ぢ�i5��iw=��Xފ�ce ���<qMr/N�#b�
~��{��;�Dq����\Q�94v_艇��W��Y�Ƹ�����}j��7M�B�tT)�I66!k:%A�afY;��2r��c�3�w�Z��N7�	�:�|cƔ���iM�eo��~K7	+7�i.�����������x����K��u9W�~�E�_��{�j���-�]O�g�?'�\�0��OxxbӶ9�Tc�������m)[cd��D�Y���-&���.1nS���\q�>$��c�&�[~7�X}ז��AM�vo��x��/�z��;}��d�Z2����<����u8���]�ӆ4����Ub`k�k����:x=��x��?u�hj�np�J�} -���MD�av�M˼2����.=�� 6��a�즃�CHN�����(Q��j��L�6�q��@D�nc*����4������]�h,�7���?�߯ؖ�}�k=t��}F������d��9C"|^�^k��{Ц��<���n���C<G�hJ��.^���I$�귷��U*�#�p�j%2�o:H�6c.�l�q������[�<R�����n��#�����PBs���5Nϗ��Հ�m$��]����Jf�	kv'�,�E�#=��R���0��q�^�Hod�̠�x��L�[�#]6��:4�O�U7��(o��p�AS�r�PZ�tIaCl��ۣ�na�5o��-ˋÁ��*��+�o������%� N���.���4d��:N�n�Tr��-�K�`������.��|ݟP��^Q��+3tA#8J~����N+lz�ե/�-5,��y�_�����/�9��s�Φ��{|��X��@�yg�"�v��#o�1�C�8u��1�V�>hp���!�Ƙ|����w�s�gjU麽Vڊ�1�-'�p�'�3�f��Bs�U��\Lg�~g�<��ǧ������G����3t⭱芆���-�,7��4���Vz�k����.�?~�߳颟�1�	\F�RK���	RR��$p{}�O��i���R���-�.Em.^Ϥ�4� �Yo>��Yz��Y@P&�6�zp��1�W?q_W�Y~p&�fߢi0�{�4������2�����\�
�Y��ok�|q��ǽė���S��a���S����S�y[AV�x���T�=�0g�2��˴e���2��H�+v4��vz�o@���<�E�]2�l7���	�)����uEqc&��۹4/���,Z�RIr��s|j�Ո;�`(T�����
�_�z�J<�eji�E4!����9���c�x�G�1�uC'�u�$�ǅ���>)�~��?�o6��9��3��(t͉ T���о'�<s���0���$<7�vwBl�yMc�o3,9����UNL~��v��$2pC�r$л�;	f{���+�!1ΜϢ�\����b�=e؃�B��5E�$����X������4-6��:MZ�vl����!f�H��8�T���k;d�8�v,۽cQ6��>�m�g����vY�N�V��ַ��r�Ò�.����{S�����/`E����	i��Є�Q& �B��Φ�Kj��1�������*�׭�T�fR!��c���%�Ї��cIv�M�:O��ω�Mю��N`
��c�W�	�'�-�xMs��hw����9�w�؂R�z8��ۙ��j!&��p���-cˬ<��� ��S��=b#��P8R*8ƻ�N�����$�F^����g�����P���%ЃP��X�35�6�\��RE�q�O��확��*"Q�h�·R�L����F�V�h�::���l89�B���e�jx@z�����q�'���iǠ�tGǴ���͏>�uA�H�8b��F9��=_ I��}K�ц����Hh��bDnc���ɜ��������[�?Xڨ ��!���J"h�0(���.�u!����T��KӮ���9S�O͚v��n)u��W]�@.���.���'���ŷX��Vh8�b��uS�6B!Ѭ=�c���fjwK'��K��4�'�\vE���)HC}�L�Ƕ@��U���ŝ�n�#����l~Q~_Ӕ���(�=x���-�|wt#d�!�Z-��B����~~L(��H0fe>j�x�ա��Z�1�5�>1�J�|�����~���H^<l��x���Ꙥ>���q�SW����V<ȯ6�p���#�
�^�jl0�.�}e�_�y;U���]�Y՝R�9��{)ѝu\�H�K?bc_�t��}m`_���*̞�1]����'�u�X?�z�5��g�*\�x��&�5Zز]���U+_Ibw;v�l�d��2�Dx�8��[���܎�h���̱N,��C�+x�G6���:�����b ���`��V��׏���s��y��Tem����]�f*���KnA�2��,��ɬ��Zٮ�����F��6������1T򋮇�7��cݫ��b� �vz��=�1���E�Č�:�G��>�eȘ��D貓%�y���l�r�u�V	Z��u����h��rƚ��fsy�fܼ?�Ut�$���wm{bǔ�E���y���L�ax���ny5�`A$�g�>�}!����R9�W	´%�h(�*��X�t��j��fݸ�V�fJ���x��i�t���*����t���
K���7V���o��h6F�-�����J��:Zc��	��@�Ή �7��c�	��ؖ�:DkT��e{��zX�;�-QnU�ypp%d�������/Im�'�m-zJ8Z���!��4F��O\O˚)�[��W���3����8�D<,a�X���;ɩq�6�g,��,Ы�x�����R��@��{J��t�ml��OD�zw6E��tg���u��c����s�`Rrf辌�.�B��H����h��갈7��t8��d����������t)�>�|�m[a� ̴����,ؓhc�l8�#�b)��#5G�<����r0�����R�Vs��i����������\\��1�?k�΃��)�hD̄~uX��?�wk�P(�z#���>�Bi�.���h�G�0K44��[���$ܢ>-�*���D�ہ5�:�q �8@|k�Ǹ2���-��c����e��F^s��q������>^�O0���.�&D��
hl8)���W���(�t�j��(�[nG�pn��-�SY��.�#(�@��d��8��T�e���dE
�̞��8�@�`SKy�B���T��Y�~Y���248೘쳟(X��g�S_�/G�8`�����4�����l�'w�.�L|�;`n}�D�.Ry���s��#�W�N���SgƂ�:Pq��4��!P;�F��#��/X:�H'uo�i<|�6"Ո�j~:� [�����z*'4��7X����_o�p��%��ﰲ�I������\�w뽸����+=�	����\|����ۯ��m`W7��ӿ0��:�8]�sߎ�Q����zҝvz�&�aj���f�ޡ����D�=����Uq�=��攌	],M:�[��+�����d5L:˲���y�b�ը�%�C;�v��|}`rT~���ﰁ�Ù�m2{}����)�vO�.�?�ݣ#הv  ��iCL��p�hn�};j�7�Jy��a#�}zJV(�|�\vٮ��a�D'�9�
d?F��GGM���y#O~���D�z�]�2L?�������:����<�����g�������W��\�����M����(�'UJ`��0\oD/�F4��i��;����|�|�7��}Y%y��	(2i)>�g"�>���=h;�?�;�w����gh��+{4�Nބ�����3����,���,�����e2�Ā�'g��-�y �5hf����>;�yk����50ghkW��V����|�f�
rNM�i��O-qi�rY:0��2N��ά�'I~���xHi*��@/�\h���w��b6�f�b��9�i"�=m��-[�zX�ӷ�[��^'J�=<]:�ұ� ����9=OYð�b'ŧ5��j/8)���/��5�����^���6���l���d�{?�S�ܔ�1T��u4���u�+�AK��)�z�J?=���U�"?����X�q�:?��z�b=���W�F�C~y6@D<S��i̔u��<7�ͼ��<[�#5^3d@(�u�~�j���f-��cޛ��T*fFy)�S�{����R���1K^h�����:N�y�m�հ��[�=w�V�x�~��A����`��=Cأ\5FXb��hc���璋�S�e�S1�&q�/4Sf$pj�;���9ә�0d+L
l9b�-w�I8x���5I�~R�0�?���>ץ�G���*k���������g���"����Y���_�f��ҝn��)�+Z҉I�!��ڄ?�N��+�*o����]hP,�v�-����ldS*�-�r¢�&�gP���@fj�q�2��޿�)����ln���!p��iT�l���}0Y����鐇V����O�����瞀��ˍ9�b@��x��G��-$ZN�ɀ�
������O,��}amA��]�����(������ކ@[������	���q��]3��h6e�]~��G9k�{����"N�1��6)>�݁����V��@�2]u��P�ؠ���a� uO zD�L�|�����!� L`�ŤqD)�@ځ�o'aK��L>N�jd�'ZV7�vJ��hi��ʑ�P�( �I�뺪���1��y���)+�K�=���� �)ݕ�|#5�6�u�
k�N�ȁ�d_�ӓhe4��ZI��g[�k�.�����.)Ƒd��Z����'���,�������<f<&�.&q����V��E�~u]�p�=5����������⽓g���;�����;�A4��k��ʅӿ�׊����%߽�}���|8�f� i�	�	'��!�ch�]$�b���g�#�!H���b)*��e�KP w�Ř+
����'L��SWg̤a�/EU##�\�$X�ˑ�'��1x�;'bMʵ@m���r�6�$�L}QӦA�0�'q�2����SN�.�ᰫ���Z�Ym
g�b4������b\�ֳ�>E'��Ȥ�C���q���a;�ZjA5�Gn|$����(�s���a Z p�l�l-�0�����/�5�D@��gf1=?����"����/ߧ�d@��ϰ����EsSX{��Ͱx��K�x�SM:��M�x�cC�K��I;>%�ik�����퐎���֙�����jb�xj�4�;�p��|�}.L.@��Vk�o�ٔ�a�p��0��ڨ'�i��nZ˰*f%N�M���ynX�5fj1� ��n�)^�Ϣ��Z�	���Pyp#ډ:,�%��P!��ͧ!��>i.�c��g������\�_L���h��Eh}���6;�jx��J�z���Z�t����䁭���A<����_�.�'m���R�$��nk�Sd��$ꏏ�����׺�2|����^��{ �q4�}��F��a�M[5�l�2�Ʒ3�aD�JpV`�"�j�{�f=�5�\�@�NفiF�~O:ka/��T�
�Z���W�B�+�@����a����#�:��J�{�2�&�<�h+~�6��(���`6(���Ul10�n�s�j�vy���`/hV�$p�<<9�	IQ#��bQ"�(̾�)젝:�Y����Jf��Y���8���ΨI�Rq|����J���#�s��:���qJj��mc��x7�~0t����8��T(��;(��^ԛ8��aΦ�Ӏ?z{N�E#��V��p.g��[��z���q��@��Ӝ��\�y}ص��y�7�ک:���EQ�}w:2��Z�}%Y;=�& �:��#+�~�Z���<dp4�YOVz�|t�mQRe|��h��{ȝ�=C�����,D���# �{D8�:f��89��=鑈�"t<�^/�p�}��^��E�\dɾJ	�ڈ:AV�d4��ۋĂ������Æv�:����)���/�}`@:l��f�QN�]2�s����3� ���&W�՜�FjU�I?��e�Ɲ!�lŔ�Z��3�ƴ�~�dN/Y�v�S3}5�W��v0�n�fJ�Ӎ�E�x���*���U��"&�;���k�j��d�-����3`�2�D�*��x��>_�i��B>��*mƭl�L�=+�'��?��!�;I9�e±��^{�"�2�66mw�c�Y^��<Ne<�ȿU�4u�`G�_x�?ܧ���c�H�;��hy��8x����Ȍ���~	Π�Su��H\kp��%�;� ���J���|�Ձ�h�03��(�#�]��H�Jpz��揳���7���~EJ����x�^���wg�@c4�!��QB��ɣ{������;��qͨ.#����`�pУU6@���hW���JBf3}����i#��wVC5���y�c�P�Y�E���A��p@�هc�;��ԩܿ���'����l� �3:����W=A�H��#����i Y�}/0γƑܙ��zLnfՌ�R���.���T���x��i5�w�r?��^��h
l�^�����N���������&wm���>n�@�sn���OW;��o�R��A���������H:-7R���g�Z�ߠc����SPm�����R�)ǵ�p��q*�0#��*�O/���;���ˁ8�,"w|<��5��J���m�V�����x[�R�s,��hvl��_"��A{n=���mj<�౛�3�=N�l�\��4��b��Stxl4�u*��ʪX��P)���? Cl�
u�hK6�Ia�����V-j��'̙�R.�� �3w�{�6n���>}�?��[�\\R����?Z�k�������,��?����1`̇��s�<���{u&�w��ѩ��(��,@u�nU���_��O?2�8?J���������{Y�}������=�O��<n��ux��Y�����X������Ӳ"��<~M�Sg3ہ������4��=���Vg�i�ff�����:����_
N���ڛ~o.`g�5Ηu\�A�ad�#�n�܋y��u�	h>�޳U$�x�'!R�+y�ΐaul��?_�`8����l?Y(�ţ�|��j@.�Z���AP1�Y�s��iu��C��e�9�@��D���A�ثk��ܳ&<��ΝABjn����1u̓��sY�jc�,(�Τh�Nn}��~*�6Q1�S�\�Z���jb�˓��y!��v-/\O�{H���k�յ�U��zqt��Ѻ�>h<zj��ЩQ� >OV~F&x���Xn ĚJ�cW �{"��J�F���ijtW,��(�_��ϒߚ�d���N� =#�T�d�RXS����3�NS�|�&h� 0��I��	�`Lw���@%�")@��Sz�S�������cM	��c������M7�/��>��s��g����ȝ]z��|wz9��@���>~��{��N7�4jW�.;��m��P�����N^�i�3a'� s�J���|�^��#0��{��Q�f�:�D��K4sp8Z.nҊ4MGe�i�gf��';v+	�����UԤ%(�VU������ C�E�3���J�����ϛ�|*O�5� �?$'<��c$�9yo�k��>����]X��z[�,����l�:W�V���l}Xt�9H3bt�:H�t�������!!Q��E7�L�)<k,E�O������<CTI������(�G������~�B������~oa9=��Ϻ��b�_��9��Lǔ(����i�mw"�"��3�_0����ݞ��M&ww�\f���<p���wZ�G�!B�S�����W&ᔤ3��-��du��&���niQ����^�d�(��~���nn�#ŗ@ؼ�B���B�'���^�R�nw������M��d?&�|~��"����	?���R��g!���S�Y�tYZc J�j���3��
}��ӺW��-!M��6�%���A3ٲ�ʺn����W���G���u'H�e�/��c�d�l������j��z���l�g�{��5����p��[���6�ޤ�'[N���H��h�3��k�y�0��9T�!#���<.��h�O���D�^�5��-#�T;'�����̃�J����D@O� ��p������`���� �Z����A��@g�~ąk�]��,VF>�[Hm�|��vY���vI�-��=5��=��T���Aq�^Dcz��h�����ͦ��.�"@������,r��/��g�g�m�#蛧��"D)�XV�|�K�U�}�����[[���A<�d�,���8�zaS��ȉ�d�+�� v�T���5��S��.A�V�iy���zR�9_D�-�������s��&<s�/���@N �q���N��4�Q�丮�a��O�H�ǧ�
�A,�Ϊ�Ed�B8�G��)ۓ6G��&�������d��ʺ�R��nu,bS_+j{�:-�d��)��"B�¬ߏ�7t��y*~!����Ch��A���	���v>��&_{���G򒮦��L[ѱ��=5Uf�
�r�k���ۂ�5�n���v��R�'=�'V�+�U[@�;Fn���ˁ�3F�Ih7�h�Z��xϼ�U�8��pѠ �U6G{����4���e<���5�o���d<��f�������C*�"l{4���]�q&t�{j�i���a����r�?�F#=]/����!��W���3�+F�kC�@��E�ެ���� o��ש��̷�����:Ύ)fK,28�#\,�l�Jv������X�r+�/D������^�?Y�aE-�0wc,��_�5�����ːw�ŋ�����79�~x�39?�ۚ�����</��F�@�ȝ���3-���8�z�A��;P��f=0�oP��+Tu�(;:���G�gǞZP�~�BPߧ�Eĥ"_%�.�e��u�MB����\�q���߿QQMP�(�<I���<W;�T� @�m��0�	Ɖ�* �Z$��L���NbH�i�0���s��c�:�lzv�Ւ��zhX�nJ�6�Ah�$w>;Q�
z�hn;-��8�І
T��������?�M!���]H����5ׄ����@�] k���Λ���z��F ����gr_��ڍY�0䅻�uܠ�����[���L��ʝu;����(�$C��c?�Vh�4?-���i��Hp�bB�9E�=�HV8��@;��O����t��^��� 7�Q�1��:O�ދϪ������A��n����K�������;�2<��C~�Q,��r����H�jD,����H��b���)݌��8�������i������x�g��a�W�W ����"ĢP��>��1��U��j�bN������y�Y�noПK:i�iŭǞr˺v9X��a�U#�E���Q�ohq�J@a4�Y�F�pAu��'��O�lX}�1{N�{Ք*g��(�Z~8���l���C�u9�����"`�zg��*�s�u���O>B�Y]W�+�hK��hJH�UZ%�
7v<��d�������
s���Ƙ{H�|�C��I$7�X�+� 4:���X�< ��U��~�kCڢ�ކ	i<�@F1�m�V�(&��,d)��~a���Y�}-��E��3�슗"�;v��':>���*`@kF����)�M���Y�)��ֶMt_����@�a5*N�o���Ƴ�ON�*a;C$_�?�^;~�* 9��ZG�aȔ���sn�֎ @�`q���F+J�.:j����(����Y
Ǟ�mD/��Cu?/ǭ�Al�՚��ᢒCy3�ys��QǠ����ڰ2�i��g����{#��x���uT��gҞ�N�n����nߏ6c􈨚�L�%�l8��wil|ҧ-Ra��\�f�.],�݁�j�����QO|p�ڷ��:�����b}Ϧ
�"��̯����b��^6�ufr��:U�\V��HFw���/�\n.#��QzT��b� R��Ka
�C/��;2eg� ���G;�^~�x�����+ak���}/� � :�8�	[�=C5���o�n`!��Ϩ%��ɘ0�FV@��n���4������5��t����\Ar���zN�#�;�@t�h1�E�÷V�8S8��0�3q$��N����Z��!m������94�5���9V�e3p=b��hjQ�. �Ml�� _�d&�[B�������i⽃�mR���B����@�5�͋D�������f��3���&����=[=�ݽm���&X��PAqxk:�NY��{��w��+���;�i7t�-sLݶ��2���^�pר^j�m7���)_d`"u���#-[S��Z�����ש>��@j%P�N��r�?��F�����' ,�?��p4����Q"<lצ 3��f�V}'d��Xl��qHl�>Sj=y:_��A8fj!Aa���K{�S9�0xe��2ʉ~ld���&��Pc���V��D�j��K�N'���a�	:��_{40̠���eP߭GB^=p�FɥeR�w����I̥q�%��\���݈��R�A��{��n� ��s�I��s(����ѭ��A�>�N��C��It���*�J����kH��)D7v�2���n�g&��xp(q��t1��L;��Ij�`k9���~h�=yFMWEe	N��i�l=,����^O�vۆj��,6��8�{ƹ���5V~��eyt��ʅ r�[�l���+eO�&/ql������* &�N�;���]nH����PHP�f|��tz�Ҳ�`z�U�����ݯ���-ʿ��b�����{^�&�C7[��LbWQ*=��vYGW�o�I����,R���2!�f��#��D昜ʩ?k�Ғ�p�r���s}����r��_���_��Ƌ�K��I����n���A��/jߨ��e����ȱ��2�O���F�(�!U��n/`���)Q��C�DX��dx�l�G;��A�	����+�f�+Y�'m�x}+>CKp�3'����A	�̂�'�	HA�ʖ؊�!��Bߵ�M���p̃()�n�f�4%"v�ࡦRGL7W�����GymY�{~�����c�`��Db��<`�!�'�'<�غ����M�@7���(�r�uN�/t��U�V��*�������ƾ5��Ʋ�[5?h�q���°5����돮}���$|~�God�6�b��6��y�_�k�'q@H@F��ƻZ`�}��������M��Q��&�KU�sg�z�p$q����Hf3!K��	�da[
b�`��'l�燽�7�_�������1�V�_w`���v(��@��W���
��2H��	^%�yP��I�)�����Z���{�?�vG�9�LY�l����Z��ge=����Kɚ���������ҁdx�IK%f
zG��b[��R���#T��޽ �'?b����}K������o�i�O ����_���i�׭}�E�ݰG?iZ*���p�y�U����Iƫ���;�C���lv��/�"���b��� Q������2Ui���v�-�u��l��Ps�l�j;���~��`?8NG��_I�N�{p$5p�u��3���W�ͅd�sK��2j_��߈�K��t��w��ˬCw�s�gś&�!=����t3b|~�|h��Fҥd�jH�a9����=��������F��Ui�$&�AI�R5�Y���å5g����{�XFò�G�#�<1�B��l�R���x-#&���JV�ļp���o���ݦi����F�ZΏm�� �R�c�Z�h՟��e��w��_l�{ʭ���������&-w J�9����tl�Rcv���P���%d�s��*<�Nk��@B�`���I�����:�����-�k�e�@������խ�H�������K��J���7	t%e�Kx�:�����=�]v7��,e�o'�ҝ��Y7;�rE��|���@,��4�?�V�v����w(���-m0�����l驀��p=̈%���H��\�F��6��.>#6U�>��Rf��U>K�@|{��lk�X`X�/��5�?��pp�Ed��gP�p�vn������S?��-���	�A}!_8�s��n�|{�VC�{Y�;�tQWK��l7�(.�~�s��5�Vb�ͪ�!ef�P}.��&%B�:<�j�0ߔ4;۸��v/��L f �(k�э���{�No�h	�/��m�����w��*d�w͈-j�_.���W왆�G��·څF �
��{P��#��%`.Z�qn��5ώ���s�ahr�}����4Й�<='�Vp�_2<Gu�z��Qn�G�@,+�F�,߮BN%}���]�7��CX�m�XC%u�S�C���'�ף-~��K��)p2��"������@��8/���5B�`6����fs���`H��=��:����2��ʄ0[i(v�k&<A��n�íD��3�G��ñ*e�dxMBl�0_]�:��F^6`��l�K�3���~��#��H��7�#��������҂�y̯&"5*���'���b�s�>��Q�(+���b�Ν=���MXs�s�!=���֟e���L,��M/�EC��@�r�/o=��!�.V�x���.8����x�%##�w8w4��lT
<:�LBK��!]ͤ?�)o��+
v�9��FS�Pu�S\��Í�<V�N�~���sR�9�d:�Q:�Bo{V"�YX�9L�=����6���C�4�c�c�Y��d�r�o(*�OQ�������.3p����c�`��j�{j���?����{U�.$������{t&�99d��moi��4*������(_����q���r�� ��� �l���2�N$�LE��F1�ٟn�0U,L�\qg�_~�s�V��2�����o��J�cg�ztmp��FU�?�.��V{��oLA�`��{1G�ήdz�zNWiӔ�<�'��"%({'fl,�j�y?ݟ=��r]���%p=�Z��� �K�""$��L�j���#��Su��Q!���&b~���v�|]eO���3r��]�d�Bk0*�Li34�B��l��N֜+!��5�`�o����k�my��~ �gϸH��;�z�pgr-/���SB�~"��Pf��U�p�0M\ױq^����] rO_�+;Z�;��IIf1ZtwB-�Q�P�pmmDӸɦ�Fa�4#���[t�f��E4�
��8(ߺ'da��uN�݁q�'�N��'Kć��������q���<^�bp�Pv��i��dd�̑�W{�XZ�|mc��	/��>4�\�̞��Ǜǳ=�b?���ʲq�����-��w�4����VNĚ0�j��7��! �A �}�I�E����[�G���R�����d������9�Hv��%��a1��s�JY7���m֐l�n^����&R�(�H8�0q��+���c(%�0N ó�F�)5���\�6ogbV����':f�ǃ16塖x��p��s����?m�u�'_qެ��s���d���֑��_��d^�m�C1x�keQ��ީ�(�Ň�Yp�u��a�a��vm�@ީʀ��ח�0c�e®��3v��^�L��گ���MK�{f�N�����k:�;="��"ާ:j��t���S�uXF�Q���u���ٹ >��T�&��Z,�ҫ��kZ���}����5��y�
����U���n��>ʝ�D\a�pߓ���H�u�:�hH���,t��'˃^�Aԕ�G��h����e5dړ�s>|����*�x����lٍ�������a�'�1��;�"�'���P�,��`q�xI�Ym��9b=$EN|z�b�	 w��d�p�����O�n�I�2��-N�������İ)�~���0�-��tA-DMam�+�BX����Rq*2��h>����N�n��D��iTZ�l�V1��(��쌮�h��a��ǔ�c�3��/���ݖ��J�v�_{K
�RyP��)��RRj�w�!U��G����[qB�a�Բ[/&������l���y. 0�Y&8R�#���6Cph�	[�8��c�ص��l�n�7�%�U��g���dk��d���O5�X�1��ޖ�W�t<p*�c�r���LN, �L�bx�x���ʹ�O�ق��Zs���i ����&*w����� �'��Z9�~+��f��VM�u�y�Z0Q��a��(+�S�_d5V���A�e�� �����q��5O�H���pb��зG�ʏٟ�?���d�/"�wz�j��/$	��$m p��Af�ߊl�*�����NҶk�X�bL�ƌ������LҶt,b�%sf�g��lb���l�[���eɰP���l�Q��:��1������pG�����`{�X	�Z�57�Z儆����dQ�X�f	��3@j���@��Ȗ�OI�������͈�Q�\��V�d)�쓿|������#���|�ڰ#�����+/XM�_(�h���ǳ] �-|����^X�Ȇ5� _-�~����k$*0�D�:I�P�3w6�%�k{���	w�~^��ȯX�y|�}�a�����b3kGȣ���࢙`#�b�*@��ٯ�)Q�0�#�p����"Nl*�/�U�����"�%T�`�jĭ��?Q��s�G���@�a~ �@���1�!y�R��nW���A�u�bB</�A��p�ט�Y�[`�&��,��G��2��0�4?L��_�'� �GPQ�U��AE���7���P�����!§K̡x�A|vՓr V��J��P�4�����,p�*Js��Ĕ!�lQ�.���O�u5%��Ϥs=_=�z~�
+�t�}%�r?�Q@R����'�2�M�钜}|�!x��@m"�V�}�	4�>'G߯��߼��!����y�*�W[������w���n*�v��n����e75���xF�i>�|1�˔�G�� (�/!g��Q�����ۊ��^�Ni�X�14�����������cs~��v?����7q�_�T��#���_g���4��J�������Ů�d��8����E�p[ۿ����|����|��z�A�ߤ��~���go-���r=�}P��f��+����v�+����o��a��|��͊<�f����
R���ґEP~�뉅�z�Xe�7�5H@Z�%>���x��u��Ԧ�iD0��x�[���������m�r�����2ns?���Z����k�;�f�ä���ZZ߯��o��!�f[Zg�D���?eD���v���	�>�dz]�m�(�p\V02��ٖ�a=>O đ]��ΰ�8���n��:>g6��IxY�{�0��lc�/���l�Uo���nZ��"�l�^O�֥1�(�(���^U�T��T��~x����tЕU�[��ӵ���M���@|���N���7�c4J�펆BP�[�3���d#��,׬a�gh����jͤ�A��l�t�q �|BCc�Vb��[ڻ]��p��.G�j���g���?�����u���__e�V��U�7#Ioa��]P��/���:Jp���U��n<7mG�\��@�/����T��fK�YA����,l'�)���/�\��b�@����*>�0�炙8i9��>u��Q�;Y^�bk-1�al���p_���������d����طc�y�Z�~{�X�~H�	�������*��z��){_�ezG������W�������{ܟ&�����y�$�`pw%���f����$��7�9A�3j>�e'v�S03v���^�)������cm�s���/o����F��������i�LńŤ^)�qJ�T8:��b��2��?+����.泤�:�X�#j5^;��ә~д>y����`��,2-��C��:���ͨ�2�R�۟-H���3\`�C4T�t�+q�����$�8W�=�:�V������\{��9y{R��C|����=�\�5:��Ò7.Miw��d����p)�m���>{N�CmF�F���Kw%�~�:�囵���O~�xmS�;��u|�_�>��a�ng� ���:;�N�Y��F�p�ه�N�Op�wn�w<?uc?�=ӦG��em��?`x�3u�F��o=��Rn��a2��d�&3N��]e�L�#���;3�˥Ψ�k+Hn��A/�غw>K�i�-2��7!�nvI��J7ϴ�a߿��a�A�޸G?{��ue�����OZz�������C�<[�A%^^ �,����f�����Dn!-I0�P۞�p�(��T�����H�)Jq�2�~o���*�&��Q4���W�ٸ��"���)���ˎ�a�/�\�E�r|؊�� �%��j��� ���Û�
���
�.���������f�7[����m��w����Ż�ǳ�k��m;��v@��1@���r��Yp]Y�8�ŷ�&������%�!"�|4��h�ȃM��2=��6;���I_؉Vwlh�@�T���>���w��R��n��du�>?�Յ���'�r{���1�q���m�ΈaG
�dM`���:��f�,�כ.g�Aw�F"b��_��U�ϏCg"TO�Z7\��\M�����B���W��JM�tߘ{ʫj��f9������g��U7F[jvX���I�}I���h�1�0�U��
����y�fύ���u�u_4;��������Y��������om����mcu���[ku��m���L����l��ȷ��6��sYf�M�% ���Y�`�a=E'�$-A�8�\j��t�|������yY�o�{�o��Z"AfeB!V>�5F�nc��+��ƅ�(�bw*���E��Tl�rtѢ���ТWռB��|Ww�xvDi�q�+v_v�<�V>���0�^kc���En���6F���ٺ�������K��j[�I�J���z֗K�3Cf����e���9#q��:8�����ұ�i���&�R94���Ϭ���g*}5+_(~��4�����2�����}�+����	������@�-���T�U;����4v�wڤ�e�RXu��fJ"Q�i�'4����<JF�?ۮ�Q��9�jgota��~�hfC�{߬@W
�tũ*=Q"�a�L�̷`�bY&�E{e��_��`㌵���z�;Y=�ؖ�ٲ���Ӊ،��JWI���κm6��o�h���_�q���:jW�;7����y��/���wo����uOcwO�+޸� zwʂLe�,�CJ�7!��Q�M�ȅL��Q�v�8�sɜ��Ψr�E�c���.����	5[�`ܾ��������qw�=a���BOG0I�;��~{ƿ�|RP�2 $b���jV�NQ-�.b��N���k�]�;���:��l�8Ma5�)!dHk),����g6�U~rq��:_��s�ƉN�W���u�|I�&�mW��~��l�s���� ��X�^��#�_�'�P�DQ��ŽWͼ5a��p}$�AqT�s�7G�Ab��[�������>�s��r���@�{��e����,�!�S�G}Jݎ�����6��q_y����%�C���c[��������ϡ�n/_�x�����D���!�̎����Q�F(��iC�/��*�����RaW���Z�\���q�>k:��-���������S'Ӝ�T�=zVŧ����,v Y�)��'��v8rY�}����~���A���i)~�$�<��b(���,xE�	Y��b���yH�S�ڜ�K���vpN�|����z	�.�LI�.e�N�L�z!�䖗�
������ڥ�!=M�n~M���W�I��� oC@��P�;��-&�����k^̠�c"=F�Z*�2Q��0�y���E_C��l�[�ѭ�ax��J�I�JU
c���ыI�g��E�1��B"����!����n+���}#��
�^�MЯ�W�רc���j��߆cg� �#A��4Y`�3]�V���XW�p��Ei��T��:;��ȓ"apQ��\F��E�t�����>10�*6/�_�~��W�{Rt�������
b������������G �����^�*��gS�_�P�>��D)EL�����)������(�}]�s%��W�'f�����x��#z�
��S�K� ���5��{���<@\��/��G�W�w!	"�� /����V�q�<o���;����u���!��H6�Ny���1{��[d�s/U���\��n��#9�ͮG��.�V;��ҝ�}�^]�w��L_>��W9��//�����~�s���5�}�s_�CvO�+t[�%���=-�����~���Β)Z>ˮ��i_��LY�dQ��}/+�!Y��E�����8~�Nנ&�܉|���}}B����۰1s�����S�4��>���A�=E�˽ӱ�4�M9;v�e�r�T���'���؛��y�G
&Ǿ�e��x����?ӓ&��s�]����/��4��o������.�%tP�6���9 �'���n�gz����D�c�Z�� Yv*���T�	�^��&�;�N(��
���wN�EI�y��I����o�l��r��^��8� ��P���<_:�-.� Fv��yJ�R�,`�ы�'��k	0�u�7ۅ��1�g��L(����w#+�rW�d�U��,r���w+��8��*��*��@���;��^Y���HM	�O��·�eƝ��7cͣ#��[���Yf8o�� T?)��6�]a�!��)���q�P)�N		c@^��!ׁ���a�E�q?}�?H�ͦ�^�mA�� w�p�� ���i4H�}h�Xg�\D|����n��ǌ�=� ���tb���$8(�������]ak�z�ΐ�X����8����������P��\<���|����C�u.z�2ff��>�9���*AO�UO)�P�������&
���1�$E/��f���#^.�\L�}�21:�G�:��'������*�w���M�R6�2���M%Ʒ��0�Z�� �dv�w�Noٯ$�,�u��4�M'�\�H���E��a���O��X�Fws�J!$��T��Z�Y�;��-�����Y��6��[N�]�4J#����0�O���G��8X�igf;(�"[����qO���A��ylx���%B�$��M{�}����_b���M�o˦�c��jv~	��锗����_d�Ź,������Q^;`4M��P؝��8�Ԃ��pÕ�fñ�b4ct��E��B���IBm�-��tSE�Uh����?���k_YowC�{��s�����E����4>�]�ff*/v7��[�wd1H;q����]��������UJO{�9�-��c���^��*].~�_݊b�U�<3͙�Sp�Yie����{�,�C�[g▽��(��wP�3����qCe���{T�e�_WzYw�59���X*�P���;���c�$�˯�\[|�?笠��~q�kN��ؔS��n|��&Q_�f(yr��:c��+̃9��J/rf��<:�)HsnΗ�/�R����D���=��=?�vA�|Z��0�?c37ߪ��'_p��f~aI/D߸n���e�'�t;����w
M�9����(�;zB��:q�p���n.Ϝ+y=�����TGёZtգJ�C�u|��Ug~=? 6��������'�^�����q��\�g���"�<�u!���|���{!�Uȱ��Tt�<���ٍc�ۓ��'fD"�wݐ��:Dy����a7v��Z\M#$tv�~Lk����"F��n��=<��~��0���[�B����
�S3��[/�F�i��=���Ԙ/w�Rt'[]��U=�TaG�\�F�k)�wvu^��*�U`�ښ5ڣL_��P���U��Fk�����I�@�	:�����<o����y��TK}hn�Q�l���l"���]�8ģ��ob���t��{�|k��'�-��o��%�vW�{�kzw�f�z�.{;ԥ��z[7��>^f�|Xt��T%C+���z��˪?P��A�,�3�,�}��E�~��l���z��`��)?�5��������V��0���:��a��gC|ʷ�x[j�"4?��[J�r/>N�	�A�G#/�|Hzr���鰕��>w�u��	aD,����q���gC{R������Toz������Oj��w��T�54��7i6oߵ]e���p*X����T�V�1��s��/J��c@�����`��;<��\��4��u����a�َ�a~�2T|`�Ѫ3�+pE�F'�(��p�j���PuZ�Tv����3o#����=��`��Vb�r�W���·?�����7�y��υ�	�R"[V��y��y��+G^A��$��n��d�_���)8kt[���ئ��v��!��0g�"�2/jJ1l���}��=߾��B��z�����v}+�w��j��tc:�/' ���W��=o�����K�ŗ�!JY�vhSs�قB;��'c�z�c�^<(���3D�l?��?�|o�?֕j�s��gEN�nL�w=��d��������8<�SZ�Q������>��@�[ ��C����hމs������o����}��sh{) h���3��þ��jug�>>�����P*��W+�#�_����Y�F�۶�vy,���8�[l7�7:��9��z�i,"g����2Ro!�����x)��`�E�ً��g��ӺtP�s��Zϸ}Զ��mI6�/^��;��l;��e,�J)c<O��ٰՕ�ޡk���O��>^��N��a�7�,���������@� ��n��8�����[\��k���wW�}�+����=��^i)��ڟ�9Ǭ��»74�1���3O�������{+ӄ�o�������p;���޾�Q�uy���,�bd��W/r�P�N���)]��2Bt�'�ŀ��'jy���4��?deF�&�w���{"�Yx�x�*��B��/��nda��~��c������!�4��e��HmΎ{7=)Þ=P���<�f2O�񆶣y����O�96�q����N_�`pV}��ޔ9B�'\��ȹ������ ��qC��6���}+�إ��E�p7�;2`�V�z$�z�a.��[�d�Jt&
#/F|5�X��Dx8�B��͐��QY&�p$Z�~���g:�ܧ{?����^�>�������v�(	�C�a�JN�p]��E�ޅ�`τJv�%�}<�Н������,�Q֗Q}6"�+nxZ�f�>��|{�yw��{���E{񾜲�{w��A� �g2���|�Lp+�({�\uÓ�!6,k[%񂝬G���[��^��L��]ʸN�ʈ��%׺���3MC���w� 8u,̕���3�>���J��Y�_���xՄ^H6j焷"z!/=���\�q+6�Q��o2nb�v<��S>:��]o��\�1�n����JI1��Ф9�$?��㕴ʗ�z7��������a��:=ppB�����M�v����@�/� ci}��9�v��@�S�����l����ϗ�2����M�����K��9y҉�d9�DL���Mw0Z0���RG�ҡ�9�c$N��z*�'|}�NJJPAmixt;SC�d�߾`&DC������ǃxUSi��������%D ے
�Í��ԫ�4�`2`�\���s8����-r\*lO�:��-F�CNiE���;C�:,�5�d+5�b>�Y'��=9�z��_���ܞg�k�ٯ=%֓����f�3��惺�=o��3 1=Jg�1S�khTRO�n��W=��k�;G%����d4;;���+xo�	�}�>�Z����	�����ܗ�[���Ap-������p�����f����b�k
ञ�{�߈{��"�I���#:몰�јj�`�1 �͢G�N�B���`ܾ�ĺCS|. ��߿^Е(�����5*3���3)" C��z��r ̦���7��n��qNPԔ��|*�Ĳۤ�C�w0\�@W'��Un �I�NE���!�G�����Z�#�V
аs��6������z�J��5�clP�0�݃k�xm�T,�i�4�YE�d8���Â˗�X8��{^�O$+��s:����pi��/���Y� � 9���'�M ��I_%��p� ��k�pNzy�E/W7��9���0C���E?�.�9ԾĽ��I0�}��sF?�Qu�º1�R�!ZN�ʮK���yR�[+���>4^�/dp���￴W�x��M�Z
�\����5	�`µrN6�;�2	��
l�d�l�*�{�#�Y��d�Gl ��K8�J4(q�(������ؘ�G0Gpq�;�.Ʒi�{��ܥs�K�S�e��#j�����R�l��;�f>�d�J��?��㝔G���`�:���f�?�Xk�φza�IsMOwcr��9E�v��{>�~)��Z�g�~�W�*�q��S(�nS)�Z�U�+�aAh��K�b�uNA(�B�	�X��am���1��d��Tƅ*�ɂ�ō�j>,�㙊�}%GVڢ�z�7xẑ:pY7 Z�d]���p�`��N���~�uO�v�+��&������Nϝ0��
b�GRg5�����,�8�(� 1{�G[.��6���Ƥ���4)�_�7él"��5�+?wt܍�}����v�D[��?-F���;q��fD%�Bw�9#��%@�/��J��'ě�$���x��\�E�;���i ����P5���C2#�)�����wp-���t+��\��rX���c^�Q���ݟ�F����
`R� /k5��4���/����k� �O�,Q��pg�Ė�ib@��Ԑiə��'��˦jwXic��o��ܤt���[��P�7c�_H�];���w՛7����O�j2���KA��Bڬ@KCe<T����^�-l��H� �@���f�Åd#��v[��{o��{�$y����^������i���L��Q�~�]��i9���,g�.�Ȑ�2��3�oΰ�ȼ ����$T�����T}�|&�G��Wϙ;� ��� ���L"T�!3� `u����y#,\�dA���{d'��m�w;����0vpn����C�1�=��9��D�Z3��B���0;���|۟o�{�o�>������P�!ʎ���:��%zĆ�e�{��`����x����&�>4�Eպ?��)c��^Ֆ���^��&q��S,�N�����m��W?m��Z�//ۋ��6d�"<�ҽ����T08hr���&�����H��9�b���ꂣ�I}쏣q�X� �vڔB����=���������}�Mt8m�t';�$�8�-��j?Y$述:84 ��p�cw[K�{���3�d�/:N�G�9B��4�|��F��n��Dʐ������XL��#-]��Oqo�+�S���p��;�4^�:｟��i
nUl����gZ�9�#��;bC�Q9����QD��8��9�
�|�.i�\���n6�T��H�%�����,�	Ĺ��R�D��R���'wd��bV[칌�}{�u��0��6���Pr'8��! 3�j�~9����_�Cm�u�cs*]��p0lt�1	����������)|Fp=�����
���o������&�f�<ۙ�T׻�_>�(�;�� 8���T�ʷ�H��J�n�c'8�R��5a۾�id�_�m�+�
��E���y��55�Z���p���>2F`P�d���;�_�Z����އAA�߬`3\�1yW}�`)R=����B������r��*��*��N��䴣�jY��l�|;U[��Vr�i|��P��х��-:����?Kv�0J4����u�T�	����d�B�6�r��"��h/�/ȁ.�
�K�ѐu��~������l<\�u��2eR��LF�N�V�:�9�5z�yEXkQ�L�ou��Ku��>��1,�\
�����42�{N빽�)��b�`XڣLg�$j�K��9�H�
�pV�z�,���������՝j������a)�Vt��x!3ah�����]��Ws���I���<����]���e��gSY�|7^�9���R�y}��*[��?�������fX��.��a��2��"B����x3mӏ��JZ�?GH�є"ߠQF-��=w|� Ъ/�6;��5��|?z���r+�y$���e����S��.O�������!y(t�"`�N�[��*f�C=���-�j)�|VҠ��m�`������eҳu��q���2���g�-�������f~�/��; �~��yc̿u\ǃ#ۥ����7~��(�jӐSX��]�!�JQꌰ[i��x����-���j\%|�<'3f��0iRia
���F�g��!�rм��ņ��'�2Mp�[fa������xb��L(X�N�s��Ym-�|j�z��'bn.��Zw�U�dqe�����0�����v�b��F�-���V}VU�-^�U�EnN��km�E�ۋO7�g�l���~Y����>�K��^�v{E}t�"fŃw�� WП�y �U/X(�2*~e�U|�.0��Z�����F�����YO=63;'
:���!���k�=pǝ�~.�۴�g�mv�/��h#ҷ��K�n��d�Gp>a�X�.��\���q�)�:��i뫥.�9fpZ8���:�ʦ���l0qsU N����@����65�?컈�3ޛ\�Mq_֪ҭ��K���UFRo�.Hs�L�~�A���N�R
xV�I�mF�L���f$����XF��'a��Ǧ����)Y��]��Q��h"�_��-�Z̿1�ؘw��xyNk�_ؒ%[m���]tS&��D"�M*uW�]�E�p�v��1�`��!c��bRe�N�@�0���\�8���Ie!�0up_#��wnӜ۝ׄQn:�����Íb<|��8�/�����g��K�
V�2��m.���d/lfɼ@�G&��<m�E.(�K�C��f#�1�J4D�?b����$����3E���Cg>��:�L�������`�ϥ���ksC�"ёi_�&�䅻��/�@D��d������3R��X�N��̀:�����T�c?�i�x�e<�K�T�ݸR�w��8� ,h��u�3�~^�v���N��FHP\�.٢��?(��$�V��>p^�t�}��;���9����{~sS�?�Ὧ<��q>�3�oH�����'ܬ��sګ�JB��g	�F��f�T�"���L�Z�LO:�2j] �Kt���e��/�g��!S��Kau��#Qc��I��r?J �ai�q��o�Q����Q���c�|��e��y@��h�%� �%�Cy��ĳ+�t��T5�z�/#E�u�����SܧL;�tmobP���M|�7zW����B�Y��+X݆��L�ޖMƩ$�	z�2�L�q٩U�]�\���a��lǣ�l^���fv�!�?���L:�6�RA���腓���ْ�ď[�`Լ�m�싚��|�3�y��*�I��E�W^��En��գ��r�%ot|�X�pk��j.���usC@��A��4[���hJ��h��Vů㭗N�c�����O����6^��!������^HW�|�r�"!�3K����;��@mN���ihL�GW�Mpy��A��J�g5�)�TR󞩱�����@���vR���?-�ݗ��7F��ޞ�Ɍ �`<�gvD�*�\��៻����&��6�g�Á�L�zռ��M*]Oi:$�H��2�@`���V�Q:�z�O&�mz��Ň�珍HCn~ �M���~�����`v-�����Hr�uG�m�J<�b�!f��4���E5�R��7\L�Z�������$���^���p8|FC�b�����g� ����^�_80���	�G�-���HFa����*��y�ĳ-oR�ӛ�&�!��2P�S�Rrv9�����c1�8pz��>�Κ��<t*=ӁG/�Up#�����R�^R��<:{X��*:���T�n9]e;Z�=_����.3��T�Lz�(Q�e �q
��ɩ`f
�s�2JT��_�?���>�cs���0<�{<�|&�fo�ܓ��m$���5��xjw�n�5_q[U�F�A�a�`�hsSv5#�	A�Hş�C�{��,	�YI�"��U��YY��|�BgmK������y��9})�z�_|��?������_;��s��M���/�g�EQc�.�_=���!�mj�ɸ\bD!�;b�9a���xw�������c���YJ�h�#̆��� �ݎ6�� ��Ya�|��`�n��3��'���y��7����+�4:��eFK�r�}�iw4�$�0#N�N��U&>�[��m��S�
6]�26�A�W��[���H���e�T	#�og0���������P0

--- File: .git/objects/55/a1cbc146410e4ded134a70caf1b814276c3be3 ---
x��Ij1 s�+�n0ZZj	L���|BQ����Ț��>�7�Xu(�l��&XO/s�@�\r��#�'b�DS�Ÿr���zu�C�$Gd�Q2B��3c
![�i���SMu��>����?�!���K�<�y^��%Ko�5��\��LHFc$भ����$�{o��2�;�^��[�<�e�_�Q�

--- File: .git/objects/78/d64083d469249a1d4a85edbef0e5c93a8541a0 ---
x�SKo1�_1Z�r q(��V�V�r�D�c��v�clo��g�MJ\z���=fƪ%g���L *';��P)29�)��Й�#��4Wl1DK.-ĩ8��֧Cf���f���j�aCR�𞁿;��To�;����6
�"�i1��+�.adF�S02I%#�&�P�\>���+��c��	�B~0�3>Q�Ҏ�mPN��p-�rUd�*-����Q'm1i��=+������x���,P77��(,��D��n,��
NN �6�����2ˀ��M�G��/�m*��ч6Sp�e�������M���n~y�w6���2�Q��p�Q0Y��_E��SC!���Z������0�T_?�{��Ds#�埔�:��.LO�zP��b���ݢӖ���t|Y����+=�_�6�]/��k�8&p�Pɜ�Ņxu��Fr;T����;>����\M4l�Vpk�8������

--- File: .git/objects/cf/d47797da57a7ce1a1c4a4f9e10f0678e9d085a ---
x=�A�0�=�WD���cz��MQ���Ơ45�"l�w�Mv	/y�K���l��j2��XF� ��c��/�8�曇�~���"[��떩�	
�[�O��#��4ͣ�U��[����S\��¬�F�#jM	܉u�௯ɮ;ף���#kx�4*M�,��od��˘δ@��6Ch�rN���P>

--- File: .git/objects/cf/dca8a458d4577dd687e079fc13f6af8c44d425 ---
x+)JMU0�4g040031Q�K�,�L��/Je8�{�D!���gO���j�W��*�����U/7�A������?�a���'�l�**HL�NLO���O���*��c�>I! rw�?����f���U1D]�5��+�*�d�Z������U�����Ԣ��"�2��Wʧ�
_~NJ��������Q q,O�

--- File: .git/objects/pack/pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.idx ---
�tOc                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        �n1(K�C�V;WX%�L��G7q�yw@]Ԗj ���<7gܛ�B]cs���s�9��ƻ��8�i��Q-��<S�}W$�M�[�	E��Q�@�       
  ]*I��c�ؒM�=�p��ll?��r9�NȄz��%*�ȵ��Ƌ}

--- File: .git/objects/pack/pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.pack ---
PACK      �(x�u��r�@ E�|EשּM��*�J���(Q⎗�Ay���3I�3wwn�]�۷q0�B!���9ȿF�~�t����}ڴ��Q�`�Y��oz)�	�H*?+_¦�X,��'D�`9��m��}�%�C �ꦍo���d}:��%�����+���{`*&pTeO��-�`�؉�H�(Qj��VLl%[�I��jՑR�*���~fNӞ���@���f ��u���k�iu�7e�[����U2L�)��CvWص�����f���0���:2�s�KkyΟJ�չ���<�VOU�=��x�R�4��Ó�-�����F���=�Tf@��S]�r������b<�jy�R<9��'-q�F�i�4e��Z.rMP����.����sQДR�嗢�S�r)���9[<v������۽MIl����ڀ�wF�(o��BGH���n��g�i�a��H��H˛��*7oꖅ�i tQJ��n�ǎ�q&���6ƨu�g~	~��k4̱�x�340031Q�K�,�L��/Je8�{�D!���gO���j�W���*�����U/7�A������?�a���'�l� ����x��U[o�4~ϯ�ԇ�����-��b�,�E+!�FN|&�Ա-_�~=�q�tڂx�L��s���ⳛbc�q�ᯱ~nyb�9�`����l(Xy��+ͅ��r�.&=�@ޅ�7�)��}�[��;�^z�/��}��eS�?�m?�u����,���6附�I6^+NxF"��g|X�	4&Nb��6��g���0z�b"KA�8��!��q����G~m j�dS�P����s&��	��C6�j�ɮ�i�b�Y����sb�O�!�Da&���p�N7'ƀ����H&m�֛<!�F��d|h��P�l����v��"OV�Og�l��t���My���w�Œj�>�=R�{=ep�Q��w�Ǡ}ZȚ=܃m%�K����^X�k/Y�ߒ!��mĚb�6v�Si��!�y��� � �;�Y�?�
���#�Fa��������x��L�����1�W�H#0��*�� ����EZ�sTL'C��M�a�cpC���

>�ߕ�B�U؍��RA��<�����~�,�u�90�Q�[U�-m+�^��ę�wL��7����!~F'OA'L����Jѫ�a�%�G����d��ZH��/(������q�A�o�,j��s�To�<ε�+<zF2�B\��ښa9���٩�֏6��S�B�D��B۸e���sD�-�g0 ��e�%z�f\+X��P��H����`���Uz/N.���6�Fq�$�¬�5P��&��߀�]��C���b��Z����Rf��z���י��~Mh��wOXz�/!��>YY�Iwc�2�+�?z�ѕ��ʘS�65��|;�6X���=��i�=��=����������&ټ��-���ӝ`>j/cG۶��1�)���[C��ۨyݕ��/�Q�� ���å�����#ҖY�k��=[����E.hq�$�N��Z��1U�Y�[��j��/�P�x�-��nA��<�%�����?��>Af&���l��"޾��7��g{����C�|c)�h��Ķ�^��f���[��A�CZj<j\p��x��$�����U��FQU|�BA���U����M3�w��ga����7�Eo�2�][�Go��$�8��Ҕ�΁)��������L�*I��c�ؒM�=�p��ll?��

--- File: .git/packed-refs ---
# pack-refs with: peeled fully-peeled sorted 
473771e3791e77405dd4966a20b1f08f3c1f1f37 refs/remotes/origin/main


--- File: .git/refs/heads/main ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .git/refs/remotes/origin/HEAD ---
ref: refs/remotes/origin/main


--- File: .git/refs/remotes/origin/main ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


--- File: .history/src/app_20230803101441.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

app.use

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: .history/src/app_20230803121957.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: .history/src/app_20230803122001.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: .history/src/config/passport_20230803095330.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUser } from '../models/User';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUser) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUser) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803120530.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUser) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUser) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803120539.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/config/passport_20230803121028.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: .history/src/models/Exercise.model_20230803115039.ts ---


--- File: .history/src/models/Exercise.model_20230803115557.ts ---
import { ObjectId } from 'mongodb';
import mongoose, { Document, Schema } from 'mongoose';

export enum ExerciseType {
  ENDURANCE = 'endurance',
  CARDIO = 'cardio',
  RECOVERY = 'recovery',
  STRENGTH = 'strength',
  FLEXIBILITY = 'flexibility',
  MOBILITY = 'mobility',
  BALANCE = 'balance',
  PLYOMETRICS = 'plyometrics',
  FUNCTIONAL_TRAINING = 'functional_training',
  YOGA = 'yoga',
  PILATES = 'pilates',
  HIIT = 'hiit',
  INTERVAL_TRAINING = 'interval_training',
  CORE_STRENGTHENING = 'core_strengthening',
  AEROBICS = 'aerobics',
  DANCE = 'dance',
  SWIMMING = 'swimming',
  CYCLING = 'cycling',
  ROWING = 'rowing',
  CLIMBING = 'climbing',
  CROSSFIT = 'crossfit',
  MARTIAL_ARTS = 'martial_arts',
  SPORT_SPECIFIC_TRAINING = 'sport_specific_training',
  // Add more exercise types as needed
}

export interface IMuscleGroup {
  name: string;
}

export enum EquipmentType {
  BODYWEIGHT = 'bodyweight',
  DUMBBELLS = 'dumbbells',
  BARBELL = 'barbell',
  RESISTANCE_BANDS = 'resistance bands',
  CARDIO_MACHINE = 'cardio machine',
  TREADMILL = 'treadmill',
  EXERCISE_BIKE = 'exercise bike',
  ELLIPTICAL_MACHINE = 'elliptical machine',
  ROWING_MACHINE = 'rowing machine',
  KETTLEBELLS = 'kettlebells',
  MEDICINE_BALL = 'medicine ball',
  JUMP_ROPE = 'jump rope',
  // Add more equipment types as needed
}

export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: ExerciseType;
  tags: string[];
  explanation: string;
  equipment: EquipmentType[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, enum: Object.values(ExerciseType), required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], enum: Object.values(EquipmentType), required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120625.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export enum ExerciseType {
  ENDURANCE = 'endurance',
  CARDIO = 'cardio',
  RECOVERY = 'recovery',
  STRENGTH = 'strength',
  FLEXIBILITY = 'flexibility',
  MOBILITY = 'mobility',
  BALANCE = 'balance',
  PLYOMETRICS = 'plyometrics',
  FUNCTIONAL_TRAINING = 'functional_training',
  YOGA = 'yoga',
  PILATES = 'pilates',
  HIIT = 'hiit',
  INTERVAL_TRAINING = 'interval_training',
  CORE_STRENGTHENING = 'core_strengthening',
  AEROBICS = 'aerobics',
  DANCE = 'dance',
  SWIMMING = 'swimming',
  CYCLING = 'cycling',
  ROWING = 'rowing',
  CLIMBING = 'climbing',
  CROSSFIT = 'crossfit',
  MARTIAL_ARTS = 'martial_arts',
  SPORT_SPECIFIC_TRAINING = 'sport_specific_training',
  // Add more exercise types as needed
}

export interface IMuscleGroup {
  name: string;
}

export enum EquipmentType {
  BODYWEIGHT = 'bodyweight',
  DUMBBELLS = 'dumbbells',
  BARBELL = 'barbell',
  RESISTANCE_BANDS = 'resistance bands',
  CARDIO_MACHINE = 'cardio machine',
  TREADMILL = 'treadmill',
  EXERCISE_BIKE = 'exercise bike',
  ELLIPTICAL_MACHINE = 'elliptical machine',
  ROWING_MACHINE = 'rowing machine',
  KETTLEBELLS = 'kettlebells',
  MEDICINE_BALL = 'medicine ball',
  JUMP_ROPE = 'jump rope',
  // Add more equipment types as needed
}

export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: ExerciseType;
  tags: string[];
  explanation: string;
  equipment: EquipmentType[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, enum: Object.values(ExerciseType), required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], enum: Object.values(EquipmentType), required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120723.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export enum ExerciseType {
  ENDURANCE = 'endurance',
  CARDIO = 'cardio',
  RECOVERY = 'recovery',
  STRENGTH = 'strength',
  FLEXIBILITY = 'flexibility',
  MOBILITY = 'mobility',
  BALANCE = 'balance',
  PLYOMETRICS = 'plyometrics',
  FUNCTIONAL_TRAINING = 'functional_training',
  YOGA = 'yoga',
  PILATES = 'pilates',
  HIIT = 'hiit',
  INTERVAL_TRAINING = 'interval_training',
  CORE_STRENGTHENING = 'core_strengthening',
  AEROBICS = 'aerobics',
  DANCE = 'dance',
  SWIMMING = 'swimming',
  CYCLING = 'cycling',
  ROWING = 'rowing',
  CLIMBING = 'climbing',
  CROSSFIT = 'crossfit',
  MARTIAL_ARTS = 'martial_arts',
  SPORT_SPECIFIC_TRAINING = 'sport_specific_training',
  // Add more exercise types as needed
}

export interface IMuscleGroup {
  name: string;
}

export enum EquipmentType {
  BODYWEIGHT = 'bodyweight',
  DUMBBELLS = 'dumbbells',
  BARBELL = 'barbell',
  RESISTANCE_BANDS = 'resistance bands',
  CARDIO_MACHINE = 'cardio machine',
  TREADMILL = 'treadmill',
  EXERCISE_BIKE = 'exercise bike',
  ELLIPTICAL_MACHINE = 'elliptical machine',
  ROWING_MACHINE = 'rowing machine',
  KETTLEBELLS = 'kettlebells',
  MEDICINE_BALL = 'medicine ball',
  JUMP_ROPE = 'jump rope',
  // Add more equipment types as needed
}

export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: ExerciseType;
  tags: string[];
  explanation: string;
  equipment: EquipmentType[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, enum: Object.values(ExerciseType), required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], enum: Object.values(EquipmentType), required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120824.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, enum: Object.values(ExerciseType), required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], enum: Object.values(EquipmentType), required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120902.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803120903.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);







--- File: .history/src/models/Exercise.model_20230803121249.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

export const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);

export default ExerciseModel;




--- File: .history/src/models/Exercise.model_20230803121251.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);

export default ExerciseModel;




--- File: .history/src/models/Ingredient.model_20230803113925.ts ---


--- File: .history/src/models/Ingredient.model_20230803113942.ts ---
import { Schema } from "mongoose";

export interface Ingredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}


const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

export default ingredientSchema

--- File: .history/src/models/Ingredient.model_20230803114024.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}


const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default ingredientSchema

--- File: .history/src/models/Ingredient.model_20230803114026.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default ingredientSchema

--- File: .history/src/models/Ingredient.model_20230803120720.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

export const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);


--- File: .history/src/models/Ingredient.model_20230803121238.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

export const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Ingredient.model_20230803121240.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default Ingredient;

--- File: .history/src/models/Meal.model_20230803113629.ts ---


--- File: .history/src/models/Meal.model_20230803113720.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export { Meal };

--- File: .history/src/models/Meal.model_20230803114036.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export default Meal ;

--- File: .history/src/models/Meal.model_20230803120717.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

export const Meal = mongoose.model<IMeal>('Meal', mealSchema);


--- File: .history/src/models/Meal.model_20230803121226.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

export const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export default Meal;

--- File: .history/src/models/Meal.model_20230803121228.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export default Meal;

--- File: .history/src/models/MealPlan.model_20230803101601.ts ---
import mongoose, { Document, Schema, Types } from 'mongoose';

export type WeekDays = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
export type IMealPlan = Record<WeekDays, Types.ObjectId[]>;

export interface IMealPlanDocument extends IMealPlan, Document {}

const MealPlanSchema = new Schema<IMealPlanDocument>({
  monday: { type: [Schema.Types.ObjectId], required: false },
  tuesday: { type: [Schema.Types.ObjectId], required: false },
  wednesday: { type: [Schema.Types.ObjectId], required: false },
  thursday: { type: [Schema.Types.ObjectId], required: false },
  friday: { type: [Schema.Types.ObjectId], required: false },
  saturday: { type: [Schema.Types.ObjectId], required: false },
  sunday: { type: [Schema.Types.ObjectId], required: false },
});

export const MealPlanModel = mongoose.model<IMealPlanDocument>('MealPlan', MealPlanSchema);

--- File: .history/src/models/MealPlan.model_20230803112841.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMealPlan extends Document {
    startDate: Date;
    endDate: Date;
    meals: mongoose.Schema.Types.ObjectId[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Recipe' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803113703.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMealPlan extends Document {
  user: IUser;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803120012.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUser;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803120014.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803120712.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

export const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);


--- File: .history/src/models/MealPlan.model_20230803121218.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

export const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/MealPlan.model_20230803121220.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: .history/src/models/Pts.model_20230803121605.ts ---


--- File: .history/src/models/Pts.model_20230803121624.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPtsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PTSSchema = new Schema<IPtsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

export const PTSModel = mongoose.model<IPtsDocument>('PTS', PTSSchema);

export default PTSModel;

--- File: .history/src/models/Pts.model_20230803121627.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPtsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PTSSchema = new Schema<IPtsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PTSModel = mongoose.model<IPtsDocument>('PTS', PTSSchema);

export default PTSModel;

--- File: .history/src/models/Recipe.model_20230803101601.ts ---
import { ObjectId } from 'mongodb';
import mongoose, { Document, Schema } from 'mongoose';
import { IIngredient } from '../interfaces/IIngredient';
import { IRecipe } from '../interfaces/IRecipe';
import { IReview } from '../interfaces/IReview';

export interface IRecipeDocument extends Document, IRecipe {}

const IngredientSchema = new Schema<IIngredient>({
  name: { type: String, required: true },
  quantity: { type: String, required: false },
  unit: { type: String, required: false },
});

const ReviewSchema = new Schema<IReview>({
  username: { type: String, required: true },
  rating: { type: Number, required: true },
  text: { type: String, required: true },
});

const RecipeSchema = new Schema<IRecipeDocument>({
  _id: { type: ObjectId, required: false },
  title: { type: String, required: true },
  prepTime: { type: String, required: true },
  mealType: { type: String, required: false },
  calories: { type: String || Number, required: true },
  description: { type: String, required: true },
  ingredients: { type: [IngredientSchema], required: true },
  instructions: { type: [String], required: true },
  productImage: { type: ObjectId, ref: 'ProductImage', required: false },
  include: { type: [String], required: true },
  exclude: { type: [String], required: true },
  midjourney: { type: String, required: true },
  tags: { type: [String], required: false },
  shoppingList: { type: [], required: false },
  user: { type: ObjectId, ref: 'User', required: false },
  reviews: { type: [ReviewSchema], required: true },
});

export const RecipeModel = mongoose.model<IRecipeDocument>('Recipe', RecipeSchema);

--- File: .history/src/models/Recipe.model_20230803113300.ts ---
import mongoose from "mongoose";

export interface IRecipe extends Document {
  name: string;
  ingredients: Ingredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803113320.ts ---
import mongoose from "mongoose";

export interface Ingredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

export interface IRecipe extends Document {
  name: string;
  ingredients: Ingredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803113324.ts ---
import mongoose, { Schema } from "mongoose";

export interface Ingredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

export interface IRecipe extends Document {
  name: string;
  ingredients: Ingredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803113917.ts ---
import mongoose, { Schema } from "mongoose";


export interface IRecipe extends Document {
  name: string;
  ingredients: Ingredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114052.ts ---
import mongoose, { Schema } from "mongoose";
import ingredientSchema, { IIngredient } from "./Ingredient.model";


export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: { type: [ingredientSchema], required: true },
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114153.ts ---
import mongoose, { Schema } from "mongoose";
import ingredientSchema, { IIngredient } from "./Ingredient.model";


export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  caloriesPerServing: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  caloriesPerServing: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114333.ts ---
import mongoose, { Schema } from "mongoose";
import ingredientSchema, { IIngredient } from "./Ingredient.model";


export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114336.ts ---
import mongoose, { Schema } from "mongoose";
import { IIngredient } from "./Ingredient.model";


export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803114337.ts ---
import mongoose, { Schema } from "mongoose";
import { IIngredient } from "./Ingredient.model";

export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export { Recipe };

--- File: .history/src/models/Recipe.model_20230803120707.ts ---
import mongoose, { Schema } from "mongoose";
import { IIngredient } from "./Ingredient.model";

export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

export const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);


--- File: .history/src/models/Recipe.model_20230803121211.ts ---
import mongoose, { Schema } from "mongoose";
import { IIngredient } from "./Ingredient.model";

export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export default Recipe;

--- File: .history/src/models/User.model_20230803101255.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803112212.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803112941.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: mongoose.Schema.Types.ObjectId[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803113002.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: mongoose.Schema.Types.ObjectId[];
    fitnessPlans: mongoose.Schema.Types.ObjectId[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    fitnessPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'FitnessPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803115950.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: mongoose.Schema.Types.ObjectId[];
    fitnessPlans: mongoose.Schema.Types.ObjectId[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    fitnessPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'FitnessPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803115952.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: mongoose.Schema.Types.ObjectId[];
    fitnessPlans: mongoose.Schema.Types.ObjectId[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    fitnessPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'FitnessPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803120100.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'MealPlan' }],
    fitnessPlans: [{ type: mongoose.Schema.Types.ObjectId, ref: 'FitnessPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803120130.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803120131.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803120703.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

export const User = mongoose.model<IUserDocument>('User', userSchema);

--- File: .history/src/models/User.model_20230803121024.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

export const User = mongoose.model<IUserDocument>('User', userSchema);

--- File: .history/src/models/User.model_20230803121158.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default USer;

--- File: .history/src/models/User.model_20230803121200.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803121816.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, ObjectId, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';


export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription extends Document {
    user: ObjectId; // Reference to the user who owns the subscription
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

  
export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: string;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: { type: String, enum: ['Free', 'Premium', 'Pro'], default: 'Free' },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803121931.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';


export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/User.model_20230803121948.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: .history/src/models/UserMealPlan.model_20230803120008.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan.model_20230803121150.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

export default UserMealPlanModel

--- File: .history/src/models/UserMealPlan_20230803115733 ---


--- File: .history/src/models/UserMealPlan_20230803115741 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User';
import { IMealPlanDocument } from './MealPlan';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlanDocument;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115816 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlanDocument } from './MealPlan';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlanDocument;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115825 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlanDocument } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlanDocument;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115829 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlanDocument;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115832 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803115834 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUser } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803120007 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUser;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMealPlan_20230803120009 ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

export const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

--- File: .history/src/models/UserMetrics.model_20230803111806.ts ---


--- File: .history/src/models/UserMetrics.model_20230803111813.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

export default UserMetrics;

--- File: .history/src/models/UserMetrics.model_20230803120657.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

export const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

--- File: .history/src/models/UserMetrics.model_20230803121139.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

export default UserMetrics

--- File: .history/src/models/UserMetrics.model_20230803121140.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

export default UserMetrics;

--- File: README.md ---
# bodyone-backend-node
Server-side logic for the BodyOne app, built with Node.js. Handles API integrations, database connections, and processes requests from the frontend. Follows Airbnb's JavaScript Style Guide.


--- File: package-lock.json ---
{
  "name": "bodyone-backend-node",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "bodyone-backend-node",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@types/supertest": "^2.0.12",
        "axios": "^1.4.0",
        "bcrypt": "^5.1.0",
        "bcryptjs": "^2.4.3",
        "bull": "^4.10.4",
        "cors": "^2.8.5",
        "express": "^4.18.2",
        "express-session": "~1.17.0",
        "helmet": "^7.0.0",
        "ioredis": "^5.3.2",
        "jest-mock-extended": "^3.0.4",
        "joi": "^17.9.2",
        "jsonwebtoken": "^9.0.0",
        "lodash": "^4.17.21",
        "midjourney": "^2.2.31",
        "mongodb": "^5.5.0",
        "mongoose": "^7.1.1",
        "node-fetch": "^2.6.11",
        "openai": "^3.3.0",
        "passport": "^0.6.0",
        "passport-jwt": "^4.0.1",
        "passport-local": "^1.0.0",
        "redis": "^4.6.6",
        "ts-node": "^10.9.1",
        "typescript": "^5.0.4"
      },
      "devDependencies": {
        "@types/bcrypt": "^5.0.0",
        "@types/bcryptjs": "^2.4.2",
        "@types/cors": "^2.8.13",
        "@types/express-session": "~1.17.0",
        "@types/jest": "^29.5.1",
        "@types/jsonwebtoken": "^9.0.2",
        "@types/mocha": "^10.0.1",
        "@types/mongoose": "^5.11.97",
        "@types/node": "^20.1.7",
        "@types/node-fetch": "^2.6.4",
        "@types/passport": "^1.0.12",
        "@types/passport-jwt": "^3.0.8",
        "@types/passport-local": "^1.0.35",
        "dotenv": "^16.0.3",
        "nodemon": "^2.0.22",
        "supertest": "^6.3.3",
        "ts-jest": "^29.1.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz",
      "integrity": "sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==",
      "peer": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.22.5.tgz",
      "integrity": "sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==",
      "dependencies": {
        "@babel/highlight": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.22.9.tgz",
      "integrity": "sha512-5UamI7xkUcJ3i9qVDS+KFDEK8/7oJ55/sJMB1Ge7IEapr7KfdfV/HErR+koZwOfd+SgtFKOKRhRakdg++DcJpQ==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.22.9.tgz",
      "integrity": "sha512-G2EgeufBcYw27U4hhoIwFcgc1XU7TlXJ3mv04oOv1WCuo900U/anZSPzEqNjwdjgffkk2Gs0AN0dW1CKVLcG7w==",
      "peer": true,
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.9",
        "@babel/helper-compilation-targets": "^7.22.9",
        "@babel/helper-module-transforms": "^7.22.9",
        "@babel/helpers": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.8",
        "@babel/types": "^7.22.5",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.2",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "peer": true
    },
    "node_modules/@babel/core/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/core/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.22.9.tgz",
      "integrity": "sha512-KtLMbmicyuK2Ak/FTCJVbDnkN1SlT8/kceFTiuDiiRUUSMnHMidxSCdG4ndkTOHHpoomWe/4xkvHkEOncwjYIw==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5",
        "@jridgewell/gen-mapping": "^0.3.2",
        "@jridgewell/trace-mapping": "^0.3.17",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.9.tgz",
      "integrity": "sha512-7qYrNM6HjpnPHJbopxmb8hSPoZ0gsX8IvUS32JGVoy+pU9e5N0nLr1VjJoR6kA4d9dmGLxNYOjeB8sUDal2WMw==",
      "peer": true,
      "dependencies": {
        "@babel/compat-data": "^7.22.9",
        "@babel/helper-validator-option": "^7.22.5",
        "browserslist": "^4.21.9",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "peer": true,
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "peer": true
    },
    "node_modules/@babel/helper-environment-visitor": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz",
      "integrity": "sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-function-name": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz",
      "integrity": "sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.22.5",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-hoist-variables": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz",
      "integrity": "sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz",
      "integrity": "sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.22.9.tgz",
      "integrity": "sha512-t+WA2Xn5K+rTeGtC8jCsdAH52bjggG5TKRuRrAGNM/mjIbO4GxvlLMFOEz9wXY5I2XQ60PMFsAG2WIcG82dQMQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-module-imports": "^7.22.5",
        "@babel/helper-simple-access": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/helper-validator-identifier": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz",
      "integrity": "sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz",
      "integrity": "sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-split-export-declaration": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz",
      "integrity": "sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz",
      "integrity": "sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz",
      "integrity": "sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz",
      "integrity": "sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.22.6.tgz",
      "integrity": "sha512-YjDs6y/fVOYFV8hAf1rxd1QvR9wJe1pDBZ2AREKq/SDayfPzgk0PBnVuTCE5X1acEpMMNOVUqoe+OwiZGJ+OaA==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.6",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.22.5.tgz",
      "integrity": "sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.22.5",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "node_modules/@babel/highlight/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.22.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.22.7.tgz",
      "integrity": "sha512-7NF8pOkHP5o2vpmGgNGcfAeCvOYhGLyA3Z4eBQkT1RJlWu47n63bCs93QfJ2hIAFCil7L5P2IWhs1oToVgrL0Q==",
      "peer": true,
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.22.5.tgz",
      "integrity": "sha512-gvyP4hZrgrs/wWMaocvxZ44Hw0b3W8Pe+cMxc8V1ULQ07oh8VNbIRaoD1LRZVTvD+0nieDKjfgKg89sD7rrKrg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.22.5.tgz",
      "integrity": "sha512-1mS2o03i7t1c6VzH6fdQ3OA8tcEIxwG18zIPRp+UY1Ihv6W+XZzBCVxExF9upussPXJ0xE9XRHwMoNs1ep/nRQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.5.tgz",
      "integrity": "sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.22.5",
        "@babel/parser": "^7.22.5",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.22.8",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.22.8.tgz",
      "integrity": "sha512-y6LPR+wpM2I3qJrsheCTwhIinzkETbplIgPBbwvqPKc+uljeA5gP+3nP8irdYt1mjQaDnlIcG+dw8OjAco4GXw==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.7",
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-function-name": "^7.22.5",
        "@babel/helper-hoist-variables": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/types": "^7.22.5",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/traverse/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/@babel/types": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.22.5.tgz",
      "integrity": "sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-string-parser": "^7.22.5",
        "@babel/helper-validator-identifier": "^7.22.5",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "peer": true
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "node_modules/@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@huggingface/inference": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@huggingface/inference/-/inference-2.6.1.tgz",
      "integrity": "sha512-qFYchgOCPeEkZJKiSr7Kz62QwukJtgkeQCT7Q0SSKUcvHpTQVNJp6i/JrJMR4dBdzQysJ1SZDC0pLBBnnskTag==",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@ioredis/commands": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.2.0.tgz",
      "integrity": "sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg=="
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "peer": true,
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.6.2.tgz",
      "integrity": "sha512-0N0yZof5hi44HAR2pPS+ikJ3nzKNoZdVu8FffRf3wy47I7Dm7etk/3KetMdRUqzVd16V4O2m2ISpNTbnIuqy1w==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.6.2.tgz",
      "integrity": "sha512-Oj+5B+sDMiMWLhPFF+4/DvHOf+U10rgvCLGPHP8Xlsy/7QxS51aU/eBngudHlJXnaWD5EohAgJ4js+T6pa+zOg==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/reporters": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.5.0",
        "jest-config": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-resolve-dependencies": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/environment": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.6.2.tgz",
      "integrity": "sha512-AEcW43C7huGd/vogTddNNTDRpO6vQ2zaQNrttvWV18ArBx9Z56h7BIsXkNFJVOO4/kblWEQz30ckw0+L3izc+Q==",
      "peer": true,
      "dependencies": {
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-m6DrEJxVKjkELTVAztTLyS/7C92Y2b0VYqmDROYKLLALHn8T/04yPs70NADUYPrV3ruI+H3J0iUIuhkjp7vkfg==",
      "peer": true,
      "dependencies": {
        "expect": "^29.6.2",
        "jest-snapshot": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.6.2.tgz",
      "integrity": "sha512-6zIhM8go3RV2IG4aIZaZbxwpOzz3ZiM23oxAlkquOIole+G6TrbeXnykxWYlqF7kz2HlBjdKtca20x9atkEQYg==",
      "dependencies": {
        "jest-get-type": "^29.4.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.6.2.tgz",
      "integrity": "sha512-euZDmIlWjm1Z0lJ1D0f7a0/y5Kh/koLFMUBE5SUYWrmy8oNhJpbTBDAP6CxKnadcMLDoDf4waRYCe35cH6G6PA==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.6.2.tgz",
      "integrity": "sha512-cjuJmNDjs6aMijCmSa1g2TNG4Lby/AeU7/02VtpW+SLcZXzOLK2GpN2nLqcFjmhy3B3AoPeQVx7BnyOf681bAw==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/types": "^29.6.1",
        "jest-mock": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.6.2.tgz",
      "integrity": "sha512-sWtijrvIav8LgfJZlrGCdN0nP2EWbakglJY49J1Y5QihcQLfy7ovyxxjJBRXMNltgt4uPtEcFmIMbVshEDfFWw==",
      "peer": true,
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/schemas": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.0.tgz",
      "integrity": "sha512-rxLjXyJBTL4LQeJW3aKo0M/+GkCOXsO+8i9Iu7eDb6KwtP65ayoDsitrdPBtujxQ88k4wI2FNYfa6TOGwSn6cQ==",
      "dependencies": {
        "@sinclair/typebox": "^0.27.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.0.tgz",
      "integrity": "sha512-oA+I2SHHQGxDCZpbrsCQSoMLb3Bz547JnM+jUr9qEbuw0vQlWZfpPS7CO9J7XiwKicEz9OFn/IYoLkkiUD7bzA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.6.2.tgz",
      "integrity": "sha512-3VKFXzcV42EYhMCsJQURptSqnyjqCGbtLuX5Xxb6Pm6gUf1wIRIl+mandIRGJyWKgNKYF9cnstti6Ls5ekduqw==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.6.2.tgz",
      "integrity": "sha512-GVYi6PfPwVejO7slw6IDO0qKVum5jtrJ3KoLGbgBWyr2qr4GaxFV6su+ZAjdTX75Sr1DkMFRk09r2ZVa+wtCGw==",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.6.2.tgz",
      "integrity": "sha512-ZqCqEISr58Ce3U+buNFJYUktLJZOggfyvR+bZMaiV1e8B1SIvJbwZMrYz3gx/KAPn9EXmOmN+uB08yLCjWkQQg==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "29.6.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.1.tgz",
      "integrity": "sha512-tPKQNMPuXgvdOn2/Lg9HNfUvjYVGolt04Hp03f5hAk878uwOLikN+JzeLY0HcVgKgFl9Hs3EIqpu3WX27XNhnw==",
      "dependencies": {
        "@jest/schemas": "^29.6.0",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
      "peer": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "peer": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.18",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz",
      "integrity": "sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      }
    },
    "node_modules/@jridgewell/trace-mapping/node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.14",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
      "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
      "peer": true
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.2.tgz",
      "integrity": "sha512-9bfjwDxIDWmmOKusUcqdS4Rw+SETlp9Dy39Xui9BEGEk19dDwH0jhipwFzEff/pFg95NKymc6TOTbRKcWeRqyQ==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.2.tgz",
      "integrity": "sha512-lwriRAHm1Yg4iDf23Oxm9n/t5Zpw1lVnxYU3HnJPTi2lJRkKTrps1KVgvL6m7WvmhYVt/FIsssWay+k45QHeuw==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.2.tgz",
      "integrity": "sha512-MOI9Dlfrpi2Cuc7i5dXdxPbFIgbDBGgKR5F2yWEa6FVEtSWncfVNKW5AKjImAQ6CZlBK9tympdsZJ2xThBiWWA==",
      "cpu": [
        "arm"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.2.tgz",
      "integrity": "sha512-FU20Bo66/f7He9Fp9sP2zaJ1Q8L9uLPZQDub/WlUip78JlPeMbVL8546HbZfcW9LNciEXc8d+tThSJjSC+tmsg==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.2.tgz",
      "integrity": "sha512-gsWNDCklNy7Ajk0vBBf9jEx04RUxuDQfBse918Ww+Qb9HCPoGzS+XJTLe96iN3BVK7grnLiYghP/M4L8VsaHeA==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-win32-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.2.tgz",
      "integrity": "sha512-O+6Gs8UeDbyFpbSh2CPEz/UOrrdWPTBYNblZK5CxxLisYt4kGX3Sc+czffFonyjiGSq3jWLwJS/CCJc7tBr4sQ==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@redis/bloom": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/client": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.5.8.tgz",
      "integrity": "sha512-xzElwHIO6rBAqzPeVnCzgvrnBEcFL1P0w8P65VNLRkdVW8rOE58f52hdj0BDgmsdOm4f1EoXPZtH4Fh7M/qUpw==",
      "dependencies": {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        "yallist": "4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@redis/graph": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.0.tgz",
      "integrity": "sha512-16yZWngxyXPd+MJxeSr0dqh2AIOi8j9yXKcKCwVaKDbH3HTuETpDVPcLujhFYVPtYrngSco31BUcSa9TH31Gqg==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/json": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.4.tgz",
      "integrity": "sha512-LUZE2Gdrhg0Rx7AN+cZkb1e6HjoSKaeeW8rYnt89Tly13GBI5eP4CwDVr+MY8BAYfCg4/N15OUrtLoona9uSgw==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/search": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.1.3.tgz",
      "integrity": "sha512-4Dg1JjvCevdiCBTZqjhKkGoC5/BcB7k9j99kdMnaXFXg8x4eyOIVg9487CMv7/BUVkFLZCaIh8ead9mU15DNng==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/time-series": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.0.4.tgz",
      "integrity": "sha512-ThUIgo2U/g7cCuZavucQTQzA9g9JbDDY2f64u3AbAoz/8vE2lt2U37LamDUVChhaDA3IRT9R6VvJwqnUfTJzng==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@sideway/address": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.4.tgz",
      "integrity": "sha512-7vwq+rOHVWjyXxVlR76Agnvhy8I9rpzjosTESvmhNeXOXdZZB15Fl+TI9x1SiHZH5Jv2wTGduSxFDIaq0m3DUw==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "node_modules/@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA=="
    },
    "node_modules/@sinonjs/commons": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.0.tgz",
      "integrity": "sha512-jXBtWAF4vmdNmZgD5FoKsVLv3rPgDnLgPbU84LIJ3otV44vJlDRokVng5v8NFJdCf/da9legHcKaRuZs4L7faA==",
      "peer": true,
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "peer": true,
      "dependencies": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA=="
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag=="
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow=="
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA=="
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.1.tgz",
      "integrity": "sha512-aACu/U/omhdk15O4Nfb+fHgH/z3QsfQzpnvRZhYhThms83ZnAOZz7zZAWO7mn2yyNQaA4xTO8GLK3uqFU4bYYw==",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.4",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.4.tgz",
      "integrity": "sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.1.tgz",
      "integrity": "sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.1.tgz",
      "integrity": "sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/bcrypt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.0.tgz",
      "integrity": "sha512-agtcFKaruL8TmcvqbndlqHPSJgsolhf/qPWchFlgnW1gECTN/nKbFcoFnvKAQRFfKbh+BO6A3SWdJu9t+xF3Lw==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/bcryptjs": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@types/bcryptjs/-/bcryptjs-2.4.2.tgz",
      "integrity": "sha512-LiMQ6EOPob/4yUL66SZzu6Yh77cbzJFYll+ZfaPiPPFswtIlA/Fs1MzdKYA7JApHU49zQTbJGX3PDmCpIdDBRQ==",
      "dev": true
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dev": true,
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cookiejar": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.2.tgz",
      "integrity": "sha512-t73xJJrvdTjXrn4jLS9VSGRbz0nUY3cl2DMGDU48lKl+HR9dbbjW2A9r3g40VA++mQpy6uuHg33gy7du2BKpog=="
    },
    "node_modules/@types/cors": {
      "version": "2.8.13",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.13.tgz",
      "integrity": "sha512-RG8AStHlUiV5ysZQKq97copd2UmVYw3/pRMLefISZ3S1hK104Cwm7iLQ3fTKx+lsUH2CE8FlLaYeEA2LSeqYUA==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/express": {
      "version": "4.17.17",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.17.tgz",
      "integrity": "sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==",
      "dev": true,
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.17.35",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz",
      "integrity": "sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/express-session": {
      "version": "1.17.7",
      "resolved": "https://registry.npmjs.org/@types/express-session/-/express-session-1.17.7.tgz",
      "integrity": "sha512-L25080PBYoRLu472HY/HNCxaXY8AaGgqGC8/p/8+BYMhG0RDOLQ1wpXOpAzr4Gi5TGozTKyJv5BVODM5UNyVMw==",
      "dev": true,
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.6.tgz",
      "integrity": "sha512-Sig0SNORX9fdW+bQuTEovKj3uHcUL6LQKbCrrqb1X7J6/ReAbhCXRAhc+SMejhLELFj2QcyuxmUooZ4bt5ReSw==",
      "peer": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.1.tgz",
      "integrity": "sha512-/K3ds8TRAfBvi5vfjuz8y6+GiAYBZ0x4tXv1Av6CWBWn0IlADc+ZX9pMq7oU0fNQPnBwIZl3rmeLp6SBApbxSQ==",
      "dev": true
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz",
      "integrity": "sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g=="
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
      "integrity": "sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz",
      "integrity": "sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/jest": {
      "version": "29.5.3",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-29.5.3.tgz",
      "integrity": "sha512-1Nq7YrO/vJE/FYnqYyw0FS8LdrjExSgIiHyKg7xPpn+yi8Q4huZryKnkJatN1ZRH89Kw2v33/8ZMB7DuZeSLlA==",
      "dev": true,
      "dependencies": {
        "expect": "^29.0.0",
        "pretty-format": "^29.0.0"
      }
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-drE6uz7QBKq1fYqqoFKTDRdFCPHd5TCub75BM+D+cMx7NU9hUz7SESLfC2fSCXVFMO5Yj8sOWHuGqPgjc+fz0Q==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==",
      "dev": true
    },
    "node_modules/@types/mocha": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/@types/mocha/-/mocha-10.0.1.tgz",
      "integrity": "sha512-/fvYntiO1GeICvqbQ3doGDIP97vWmvFt83GKguJ6prmQM2iXZfFcq6YE8KteFyRtX2/h5Hf91BYvPodJKFYv5Q==",
      "dev": true
    },
    "node_modules/@types/mongoose": {
      "version": "5.11.97",
      "resolved": "https://registry.npmjs.org/@types/mongoose/-/mongoose-5.11.97.tgz",
      "integrity": "sha512-cqwOVYT3qXyLiGw7ueU2kX9noE8DPGRY6z8eUxudhXY8NZ7DMKYAxyZkLSevGfhCX3dO/AoX5/SO9lAzfjon0Q==",
      "deprecated": "Mongoose publishes its own types, so you do not need to install this package.",
      "dev": true,
      "dependencies": {
        "mongoose": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "20.4.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.4.6.tgz",
      "integrity": "sha512-q0RkvNgMweWWIvSMDiXhflGUKMdIxBo2M2tYM/0kEGDueQByFzK4KZAgu5YHGFNxziTlppNpTIBcqHQAxlfHdA=="
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.4",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.4.tgz",
      "integrity": "sha512-1ZX9fcN4Rvkvgv4E6PAY5WXUFWFcRWxZa3EW83UjycOB9ljJCedb2CupIP4RZMEwF/M3eTcCihbBRgwtGbg5Rg==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "node_modules/@types/passport": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/@types/passport/-/passport-1.0.12.tgz",
      "integrity": "sha512-QFdJ2TiAEoXfEQSNDISJR1Tm51I78CymqcBa8imbjo6dNNu+l2huDxxbDEIoFIwOSKMkOfHEikyDuZ38WwWsmw==",
      "dev": true,
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/passport-jwt": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/@types/passport-jwt/-/passport-jwt-3.0.9.tgz",
      "integrity": "sha512-5XJt+79emfgpuBvBQusUPylFIVtW1QVAAkTRwCbRJAmxUjmLtIqUU6V1ovpnHPu6Qut3mR5Juc+s7kd06roNTg==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/jsonwebtoken": "*",
        "@types/passport-strategy": "*"
      }
    },
    "node_modules/@types/passport-local": {
      "version": "1.0.35",
      "resolved": "https://registry.npmjs.org/@types/passport-local/-/passport-local-1.0.35.tgz",
      "integrity": "sha512-K4eLTJ8R0yYW8TvCqkjB0pTKoqfUSdl5PfZdidTjV2ETV3604fQxtY6BHKjQWAx50WUS0lqzBvKv3LoI1ZBPeA==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/passport": "*",
        "@types/passport-strategy": "*"
      }
    },
    "node_modules/@types/passport-strategy": {
      "version": "0.2.35",
      "resolved": "https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.35.tgz",
      "integrity": "sha512-o5D19Jy2XPFoX2rKApykY15et3Apgax00RRLf0RUotPDUsYrQa7x4howLYr9El2mlUApHmCMv5CZ1IXqKFQ2+g==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/passport": "*"
      }
    },
    "node_modules/@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==",
      "dev": true
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==",
      "dev": true
    },
    "node_modules/@types/send": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.1.tgz",
      "integrity": "sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==",
      "dev": true,
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.2.tgz",
      "integrity": "sha512-J2LqtvFYCzaj8pVYKw8klQXrLLk7TBZmQ4ShlcdkELFKGwGMfevMLneMMRkMgZxotOD9wg497LpC7O8PcvAmfw==",
      "dev": true,
      "dependencies": {
        "@types/http-errors": "*",
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.1.tgz",
      "integrity": "sha512-Hl219/BT5fLAaz6NDkSuhzasy49dwQS/DSdu4MdggFB8zcXv7vflBI3xp7FEmkmdDkBUI2bPUNeMttp2knYdxw=="
    },
    "node_modules/@types/superagent": {
      "version": "4.1.18",
      "resolved": "https://registry.npmjs.org/@types/superagent/-/superagent-4.1.18.tgz",
      "integrity": "sha512-LOWgpacIV8GHhrsQU+QMZuomfqXiqzz3ILLkCtKx3Us6AmomFViuzKT9D693QTKgyut2oCytMG8/efOop+DB+w==",
      "dependencies": {
        "@types/cookiejar": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/supertest": {
      "version": "2.0.12",
      "resolved": "https://registry.npmjs.org/@types/supertest/-/supertest-2.0.12.tgz",
      "integrity": "sha512-X3HPWTwXRerBZS7Mo1k6vMVR1Z6zmJcDVn5O/31whe0tnjE4te6ZJSJGq1RiqHPjzPdMTfjCFogDJmwng9xHaQ==",
      "dependencies": {
        "@types/superagent": "*"
      }
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "dependencies": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "17.0.24",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.24.tgz",
      "integrity": "sha512-6i0aC7jV6QzQB8ne1joVZ0eSFIstHsCrobmOtghM11yGlH0j43FKL2UhWdELkyps0zuf7qVTUVCCR+tgSlyLLw==",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.0",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.0.tgz",
      "integrity": "sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA=="
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.10.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.10.0.tgz",
      "integrity": "sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw==",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agent-base/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/agent-base/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "peer": true,
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
    },
    "node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "peer": true,
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "node_modules/axios": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.4.0.tgz",
      "integrity": "sha512-S4XCWMEmzvo64T9GfvQDOXgYRDJ/wsSZc7Jvdgx5u1sd0JwsuPLqb3SYmusag+edF6ziyMensPVqLTSc1PiSEA==",
      "dependencies": {
        "follow-redirects": "^1.15.0",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/axios/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/babel-jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.6.2.tgz",
      "integrity": "sha512-BYCzImLos6J3BH/+HvUCHG1dTf2MzmAB4jaVxHV+29RZLjR29XuYTmsf2sdDwkrb+FczkGo3kOhE7ga6sI0P4A==",
      "peer": true,
      "dependencies": {
        "@jest/transform": "^29.6.2",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.5.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.5.0.tgz",
      "integrity": "sha512-zSuuuAlTMT4mzLj2nPnUm6fsE6270vdOfnpbJ+RmruU75UhLFvL0N2NgI7xpeS7NaB6hGqmd5pVpGTDYvi4Q3w==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz",
      "integrity": "sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==",
      "peer": true,
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.5.0.tgz",
      "integrity": "sha512-JOMloxOqdiBSxMAzjRaH023/vvcaSaec49zvg+2LmNsktC7ei39LTJGw02J+9uUtTZUq6xbLyJ4dxe9sSmIuAg==",
      "peer": true,
      "dependencies": {
        "babel-plugin-jest-hoist": "^29.5.0",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/bcrypt": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.0.tgz",
      "integrity": "sha512-RHBS7HI5N5tEnGTmtR/pppX0mmDSBpQ4aCBsj7CEQfYXDcO74A8sIBYcJMuCsis2E81zDxeENYhv66oZwLiA+Q==",
      "hasInstallScript": true,
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.10",
        "node-addon-api": "^5.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.21.10",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.10.tgz",
      "integrity": "sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true,
      "dependencies": {
        "caniuse-lite": "^1.0.30001517",
        "electron-to-chromium": "^1.4.477",
        "node-releases": "^2.0.13",
        "update-browserslist-db": "^1.0.11"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bs-logger": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
      "dev": true,
      "dependencies": {
        "fast-json-stable-stringify": "2.x"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "peer": true,
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/bson": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-5.4.0.tgz",
      "integrity": "sha512-WRZ5SQI5GfUuKnPTNmAYPiKIof3ORXAF4IRU5UcgmivNIon01rWQlw5RUH954dpu8yGL8T59YShVddIPaU/gFA==",
      "engines": {
        "node": ">=14.20.1"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "peer": true
    },
    "node_modules/bull": {
      "version": "4.10.4",
      "resolved": "https://registry.npmjs.org/bull/-/bull-4.10.4.tgz",
      "integrity": "sha512-o9m/7HjS/Or3vqRd59evBlWCXd9Lp+ALppKseoSKHaykK46SmRjAilX98PgmOz1yeVaurt8D5UtvEt4bUjM3eA==",
      "dependencies": {
        "cron-parser": "^4.2.1",
        "debuglog": "^1.0.0",
        "get-port": "^5.1.1",
        "ioredis": "^5.0.0",
        "lodash": "^4.17.21",
        "msgpackr": "^1.5.2",
        "semver": "^7.3.2",
        "uuid": "^8.3.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001519",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001519.tgz",
      "integrity": "sha512-0QHgqR+Jv4bxHMp8kZ1Kn8CH55OikjKJ6JmKkZYP1F3D7w+lnFXF70nG5eNfsZS89jadi5Ywy5UCSKLAglIRkg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ci-info": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.8.0.tgz",
      "integrity": "sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
      "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==",
      "peer": true
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "peer": true,
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "peer": true,
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "peer": true
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==",
      "dev": true
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ=="
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "peer": true
    },
    "node_modules/cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "node_modules/cron-parser": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.8.1.tgz",
      "integrity": "sha512-jbokKWGcyU4gl6jAfX97E1gDpY12DJ1cLJZmoDzaAln/shZ+S3KBFBuA2Q6WeUN4gJf/8klnV1EfvhA2lK5IRQ==",
      "dependencies": {
        "luxon": "^3.2.1"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "peer": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/debuglog": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
      "integrity": "sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw==",
      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/dedent": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.1.tgz",
      "integrity": "sha512-+LxW+KLWxu3HW3M2w2ympwtqPrqYRzU8fqi6Fhd18fBALe15blJPI/I4+UHveMVG6lJqB4JNd4UG0S5cnVHwIg==",
      "peer": true,
      "peerDependencies": {
        "babel-plugin-macros": "^3.1.0"
      },
      "peerDependenciesMeta": {
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ=="
    },
    "node_modules/denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "dependencies": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/diff-sequences": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.4.3.tgz",
      "integrity": "sha512-ofrBgwpPhCD85kMKtE9RYFFq6OC1A89oW2vvgWZNCwxrUpRUILopY7lsYyMDSjc8g6U6aiO0Qubg6r4Wgt5ZnA==",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/motdotla/dotenv?sponsor=1"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/electron-to-chromium": {
      "version": "1.4.482",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.482.tgz",
      "integrity": "sha512-h+UqpfmEr1Qkk0zp7ej/jid7CXoq4m4QzW6wNTb0ELJ/BZCpA4wgUylBIMGCe621tnr4l5VmoHjdoSx2lbnNJA==",
      "peer": true
    },
    "node_modules/emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "peer": true,
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "peer": true,
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "peer": true,
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "peer": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-iAErsLxJ8C+S02QbLAwgSGSezLQK+XXRDt8IuFXFpwCNw2ECmzZSmjKcCaFVp5VRMk+WAvz6h6jokzEzBFZEuA==",
      "dependencies": {
        "@jest/expect-utils": "^29.6.2",
        "@types/node": "*",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express-session": {
      "version": "1.17.3",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.3.tgz",
      "integrity": "sha512-4+otWXlShYlG1Ma+2Jnn+xgKUZTMJ5QD3YvfilX3AcocOAbIkVylSWEklzALe/+Pu4qV6TYBj5GwOBFfdKqLBw==",
      "dependencies": {
        "cookie": "0.4.2",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "node_modules/fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "peer": true,
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "peer": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "dev": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/formidable": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.1.2.tgz",
      "integrity": "sha512-CM3GuJ57US06mlpQ47YcunuUZ9jpm8Vx+P2CGt2j7HpgkKZO/DJYQ0Bobim8G6PFQmK5lOqOOdUXboU+h73A4g==",
      "dev": true,
      "dependencies": {
        "dezalgo": "^1.0.4",
        "hexoid": "^1.0.0",
        "once": "^1.4.0",
        "qs": "^6.11.0"
      },
      "funding": {
        "url": "https://ko-fi.com/tunnckoCore/commissions"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "node_modules/gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/generic-pool": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "peer": true,
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "peer": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-port": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/get-port/-/get-port-5.1.1.tgz",
      "integrity": "sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
    },
    "node_modules/helmet": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.0.0.tgz",
      "integrity": "sha512-MsIgYmdBh460ZZ8cJC81q4XJknjG567wzEmv46WOBblDb6TUd3z8/GhgmsM9pn8g2B80tAJ4m5/d3Bi1KrSUBQ==",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/hexoid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "peer": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "peer": true,
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "node_modules/import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "peer": true,
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "peer": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ioredis": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.3.2.tgz",
      "integrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA==",
      "dependencies": {
        "@ioredis/commands": "^1.1.1",
        "cluster-key-slot": "^1.1.0",
        "debug": "^4.3.4",
        "denque": "^2.1.0",
        "lodash.defaults": "^4.2.0",
        "lodash.isarguments": "^3.1.0",
        "redis-errors": "^1.2.0",
        "redis-parser": "^3.0.0",
        "standard-as-callback": "^2.1.0"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/ioredis"
      }
    },
    "node_modules/ioredis/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/ioredis/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "peer": true
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.12.1.tgz",
      "integrity": "sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==",
      "peer": true,
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "peer": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "peer": true
    },
    "node_modules/isomorphic-ws": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-5.0.0.tgz",
      "integrity": "sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz",
      "integrity": "sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "peer": true,
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "peer": true,
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "peer": true,
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
      "peer": true,
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.6.2.tgz",
      "integrity": "sha512-8eQg2mqFbaP7CwfsTpCxQ+sHzw1WuNWL5UUvjnWP4hx2riGz9fPSzYOaU5q8/GqWn1TfgZIVTqYJygbGbWAANg==",
      "peer": true,
      "dependencies": {
        "@jest/core": "^29.6.2",
        "@jest/types": "^29.6.1",
        "import-local": "^3.0.2",
        "jest-cli": "^29.6.2"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.5.0.tgz",
      "integrity": "sha512-IFG34IUMUaNBIxjQXF/iu7g6EcdMrGRRxaUSw92I/2g2YC6vCdTltl4nHvt7Ci5nSJwXIkCu8Ka1DKF+X7Z1Ag==",
      "peer": true,
      "dependencies": {
        "execa": "^5.0.0",
        "p-limit": "^3.1.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.6.2.tgz",
      "integrity": "sha512-G9mN+KOYIUe2sB9kpJkO9Bk18J4dTDArNFPwoZ7WKHKel55eKIS/u2bLthxgojwlf9NLCVQfgzM/WsOVvoC6Fw==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.6.2",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.6.2",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-cli": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.6.2.tgz",
      "integrity": "sha512-TT6O247v6dCEX2UGHGyflMpxhnrL0DNqP2fRTKYm3nJJpCTfXX3GCMQPGFjXDoj0i5/Blp3jriKXFgdfmbYB6Q==",
      "peer": true,
      "dependencies": {
        "@jest/core": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "prompts": "^2.0.1",
        "yargs": "^17.3.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.6.2.tgz",
      "integrity": "sha512-VxwFOC8gkiJbuodG9CPtMRjBUNZEHxwfQXmIudSTzFWxaci3Qub1ddTRbFNQlD/zUeaifLndh/eDccFX4wCMQw==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-jest": "^29.6.2",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.6.2",
        "jest-environment-node": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@types/node": "*",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-diff": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.6.2.tgz",
      "integrity": "sha512-t+ST7CB9GX5F2xKwhwCf0TAR17uNDiaPTZnVymP9lw0lssa9vG+AFyDZoeIHStU3WowFFwT+ky+er0WVl2yGhA==",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.4.3",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.4.3.tgz",
      "integrity": "sha512-fzdTftThczeSD9nZ3fzA/4KkHtnmllawWrXO69vtI+L9WjEIuXWs4AmyME7lN5hU7dB0sHhuPfcKofRsUb/2Fg==",
      "peer": true,
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.6.2.tgz",
      "integrity": "sha512-MsrsqA0Ia99cIpABBc3izS1ZYoYfhIy0NNWqPSE0YXbQjwchyt6B1HD2khzyPe1WiJA7hbxXy77ZoUQxn8UlSw==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "jest-util": "^29.6.2",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.6.2.tgz",
      "integrity": "sha512-YGdFeZ3T9a+/612c5mTQIllvWkddPbYcN2v95ZH24oWMbGA4GGS2XdIF92QMhUhvrjjuQWYgUGW2zawOyH63MQ==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.4.3.tgz",
      "integrity": "sha512-J5Xez4nRRMjk8emnTpWrlkyb9pfRQQanDrvWHhsR1+VUfbwxi30eVcZFlcdGInRibU4G5LwHXpI7IRHU0CY+gg==",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.6.2.tgz",
      "integrity": "sha512-+51XleTDAAysvU8rT6AnS1ZJ+WHVNqhj1k6nTvN2PYP+HjU3kqlaKQ1Lnw3NYW3bm2r8vq82X0Z1nDDHZMzHVA==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.6.2.tgz",
      "integrity": "sha512-aNqYhfp5uYEO3tdWMb2bfWv6f0b4I0LOxVRpnRLAeque2uqOVVMLh6khnTcE2qJ5wAKop0HcreM1btoysD6bPQ==",
      "peer": true,
      "dependencies": {
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.6.2.tgz",
      "integrity": "sha512-4LiAk3hSSobtomeIAzFTe+N8kL6z0JtF3n6I4fg29iIW7tt99R7ZcIFW34QkX+DuVrf+CUe6wuVOpm7ZKFJzZQ==",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.6.2.tgz",
      "integrity": "sha512-vnIGYEjoPSuRqV8W9t+Wow95SDp6KPX2Uf7EoeG9G99J2OVh7OSwpS4B6J0NfpEIpfkBNHlBZpA2rblEuEFhZQ==",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.6.2.tgz",
      "integrity": "sha512-hoSv3lb3byzdKfwqCuT6uTscan471GUECqgNYykg6ob0yiAw3zYc7OrPnI9Qv8Wwoa4lC7AZ9hyS4AiIx5U2zg==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock-extended": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-3.0.5.tgz",
      "integrity": "sha512-/eHdaNPUAXe7f65gHH5urc8SbRVWjYxBqmCgax2uqOBJy8UUcCBMN1upj1eZ8y/i+IqpyEm4Kq0VKss/GCCTdw==",
      "dependencies": {
        "ts-essentials": "^7.0.3"
      },
      "peerDependencies": {
        "jest": "^24.0.0 || ^25.0.0 || ^26.0.0 || ^27.0.0 || ^28.0.0 || ^29.0.0",
        "typescript": "^3.0.0 || ^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "peer": true,
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.4.3.tgz",
      "integrity": "sha512-O4FglZaMmWXbGHSQInfXewIsd1LMn9p3ZXB/6r4FOkyhX2/iP/soMG98jGvk/A3HAN78+5VWcBGO0BJAPRh4kg==",
      "peer": true,
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.6.2.tgz",
      "integrity": "sha512-G/iQUvZWI5e3SMFssc4ug4dH0aZiZpsDq9o1PtXTV1210Ztyb2+w+ZgQkB3iOiC5SmAEzJBOHWz6Hvrd+QnNPw==",
      "peer": true,
      "dependencies": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.6.2.tgz",
      "integrity": "sha512-LGqjDWxg2fuQQm7ypDxduLu/m4+4Lb4gczc13v51VMZbVP5tSBILqVx8qfWcsdP8f0G7aIqByIALDB0R93yL+w==",
      "peer": true,
      "dependencies": {
        "jest-regex-util": "^29.4.3",
        "jest-snapshot": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.6.2.tgz",
      "integrity": "sha512-wXOT/a0EspYgfMiYHxwGLPCZfC0c38MivAlb2lMEAlwHINKemrttu1uSbcGbfDV31sFaPWnWJPmb2qXM8pqZ4w==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/environment": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.4.3",
        "jest-environment-node": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-leak-detector": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-resolve": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "jest-worker": "^29.6.2",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.6.2.tgz",
      "integrity": "sha512-2X9dqK768KufGJyIeLmIzToDmsN0m7Iek8QNxRSI/2+iPFYHF0jTwlO3ftn7gdKd98G/VQw9XJCk77rbTGZnJg==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/globals": "^29.6.2",
        "@jest/source-map": "^29.6.0",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.6.2.tgz",
      "integrity": "sha512-1OdjqvqmRdGNvWXr/YZHuyhh5DeaLp1p/F8Tht/MrMw4Kr1Uu/j4lRG+iKl1DAqUJDWxtQBMk41Lnf/JETYBRA==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.6.2",
        "semver": "^7.5.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.6.2.tgz",
      "integrity": "sha512-3eX1qb6L88lJNCFlEADKOkjpXJQyZRiavX1INZ4tRnrBVr2COd3RgcTLyUiEXMNBlDU/cgYq6taUS0fExrWW4w==",
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.6.2.tgz",
      "integrity": "sha512-vGz0yMN5fUFRRbpJDPwxMpgSXW1LDKROHfBopAvDcmD6s+B/s8WJrwi+4bfH4SdInBA5C3P3BI19dBtKzx1Arg==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watcher": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.6.2.tgz",
      "integrity": "sha512-GZitlqkMkhkefjfN/p3SJjrDaxPflqxEAv3/ik10OirZqJGYH5rPiIsgVcfof0Tdqg3shQGdEIxDBx+B4tuLzA==",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.6.2",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.6.2.tgz",
      "integrity": "sha512-l3ccBOabTdkng8I/ORCkADz4eSMKejTYv1vB/Z83UiubqhC1oQ5Li6dWCyqOIvSifGjUBxuvxvlm6KGK2DtuAQ==",
      "peer": true,
      "dependencies": {
        "@types/node": "*",
        "jest-util": "^29.6.2",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "peer": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/joi": {
      "version": "17.9.2",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.9.2.tgz",
      "integrity": "sha512-Itk/r+V4Dx0V3c7RLFdRh12IOjySm2/WGPMubBT92cQvRfYZhPM2W0hZlctjj72iES8jsRCwp7S/cRmWBnJ4nw==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0",
        "@hapi/topo": "^5.0.0",
        "@sideway/address": "^4.1.3",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "peer": true,
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "peer": true,
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "peer": true
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.1.tgz",
      "integrity": "sha512-K8wx7eJ5TPvEjuiVSkv167EVboBDv9PZdDoF7BgeQnBLVvZWW9clr2PsQHVJDTKaEIH5JBIwHujGcHp7GgI2eg==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash": "^4.17.21",
        "ms": "^2.1.1",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA==",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "peer": true
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "peer": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ=="
    },
    "node_modules/lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg=="
    },
    "node_modules/lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "dev": true
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/luxon": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
      "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "peer": true,
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "peer": true
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "dependencies": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/midjourney": {
      "version": "2.7.79",
      "resolved": "https://registry.npmjs.org/midjourney/-/midjourney-2.7.79.tgz",
      "integrity": "sha512-klnOas1htHIIDlw+SyX6/kaT3wNNbbtxJaFpEqnJnw5w++a1WfbjFhgiD4QWggbSvsACbJukV6LWsvgyvf7WOQ==",
      "dependencies": {
        "@huggingface/inference": "^2.5.0",
        "isomorphic-ws": "^5.0.0",
        "mime": "^3.0.0",
        "p-queue": "^6.6.2",
        "snowyflake": "^2.0.0",
        "throat": "^6.0.2",
        "tslib": "^2.5.0",
        "websocket-ts": "^1.1.1",
        "ws": "^8.13.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/midjourney/node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/mongodb": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.7.0.tgz",
      "integrity": "sha512-zm82Bq33QbqtxDf58fLWBwTjARK3NSvKYjyz997KSy6hpat0prjeX/kxjbPVyZY60XYPDNETaHkHJI2UCzSLuw==",
      "dependencies": {
        "bson": "^5.4.0",
        "mongodb-connection-string-url": "^2.6.0",
        "socks": "^2.7.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "optionalDependencies": {
        "saslprep": "^1.0.3"
      },
      "peerDependencies": {
        "@aws-sdk/credential-providers": "^3.201.0",
        "@mongodb-js/zstd": "^1.1.0",
        "kerberos": "^2.0.1",
        "mongodb-client-encryption": ">=2.3.0 <3",
        "snappy": "^7.2.2"
      },
      "peerDependenciesMeta": {
        "@aws-sdk/credential-providers": {
          "optional": true
        },
        "@mongodb-js/zstd": {
          "optional": true
        },
        "kerberos": {
          "optional": true
        },
        "mongodb-client-encryption": {
          "optional": true
        },
        "snappy": {
          "optional": true
        }
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "dependencies": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/tr46": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
      "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/whatwg-url": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
      "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
      "dependencies": {
        "tr46": "^3.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongoose": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-7.4.1.tgz",
      "integrity": "sha512-o3E5KHHiHdaiwCJG3+9r70sncRKki71Ktf/TfXdW6myu+53rtZ56uLl5ylkQiCf60V3COJuOeekcxXVsjQ7cBA==",
      "dependencies": {
        "bson": "^5.4.0",
        "kareem": "2.5.1",
        "mongodb": "5.7.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mongoose"
      }
    },
    "node_modules/mongoose/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "dependencies": {
        "debug": "4.x"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/mquery/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/mquery/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/msgpackr": {
      "version": "1.9.6",
      "resolved": "https://registry.npmjs.org/msgpackr/-/msgpackr-1.9.6.tgz",
      "integrity": "sha512-50rmb6+ZWvEm0vJn8R8CwI1Eavss3h5rgtKrcdUal3EkZcpqw82+xsmc7RoHb8fYB5V4EOU2NDaOitDAdO0t+w==",
      "optionalDependencies": {
        "msgpackr-extract": "^3.0.2"
      }
    },
    "node_modules/msgpackr-extract": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/msgpackr-extract/-/msgpackr-extract-3.0.2.tgz",
      "integrity": "sha512-SdzXp4kD/Qf8agZ9+iTu6eql0m3kWm1A2y1hkpTeVNENutaB0BwHlSvAIaMxwntmRUAUjon2V4L8Z/njd0Ct8A==",
      "hasInstallScript": true,
      "optional": true,
      "dependencies": {
        "node-gyp-build-optional-packages": "5.0.7"
      },
      "bin": {
        "download-msgpackr-prebuilds": "bin/download-prebuilds.js"
      },
      "optionalDependencies": {
        "@msgpackr-extract/msgpackr-extract-darwin-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-darwin-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-win32-x64": "3.0.2"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "peer": true
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA=="
    },
    "node_modules/node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-C/fGU2E8ToujUivIO0H+tpQ6HWo4eEmchoPIoXtxCrVghxdKq+QOHqEZW7tuP3KlV3bC8FRMO5nMCC7Zm1VP6g==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-gyp-build-optional-packages": {
      "version": "5.0.7",
      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.0.7.tgz",
      "integrity": "sha512-YlCCc6Wffkx0kHkmam79GKvDQ6x+QZkMjFGrIMxgFNILFvGSbCp2fCBC55pGTT9gVaz8Na5CLmxt/urtzRv36w==",
      "optional": true,
      "bin": {
        "node-gyp-build-optional-packages": "bin.js",
        "node-gyp-build-optional-packages-optional": "optional.js",
        "node-gyp-build-optional-packages-test": "build-test.js"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "peer": true
    },
    "node_modules/node-releases": {
      "version": "2.0.13",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.13.tgz",
      "integrity": "sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==",
      "peer": true
    },
    "node_modules/nodemon": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz",
      "integrity": "sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==",
      "dev": true,
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/nodemon/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/nodemon/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/nodemon/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "peer": true,
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "peer": true,
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/openai": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-3.3.0.tgz",
      "integrity": "sha512-uqxI/Au+aPRnsaQRe8CojU0eCR7I0mBiKjD3sNMzY6DaC1ZVrc85u98mtJW6voDug8fgGN+DIZmTDxTthxb7dQ==",
      "dependencies": {
        "axios": "^0.26.0",
        "form-data": "^4.0.0"
      }
    },
    "node_modules/openai/node_modules/axios": {
      "version": "0.26.1",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.26.1.tgz",
      "integrity": "sha512-fPwcX4EvnSHuInCMItEhAGnaSEXRBjtzh9fOtsE6E1G6p7vl7edEeZe11QHf18+6+9gR5PbKV/sGKNaD8YaMeA==",
      "dependencies": {
        "follow-redirects": "^1.14.8"
      }
    },
    "node_modules/openai/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "peer": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "peer": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-locate/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "peer": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-queue": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/p-queue/-/p-queue-6.6.2.tgz",
      "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
      "dependencies": {
        "eventemitter3": "^4.0.4",
        "p-timeout": "^3.2.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "dependencies": {
        "p-finally": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/passport": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
      "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
      "dependencies": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1",
        "utils-merge": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/jaredhanson"
      }
    },
    "node_modules/passport-jwt": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.1.tgz",
      "integrity": "sha512-UCKMDYhNuGOBE9/9Ycuoyh7vP6jpeTp/+sfMJl7nLff/t6dps+iaeE0hhNkKN8/HZHcJ7lCdOyDxHdDoxoSvdQ==",
      "dependencies": {
        "jsonwebtoken": "^9.0.0",
        "passport-strategy": "^1.0.0"
      }
    },
    "node_modules/passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha512-9wCE6qKznvf9mQYYbgJ3sVOHmCWoUNMVFoZzNoznmISbhnNNPhN9xfY3sLmScHMetEJeoY7CXwfhCe7argfQow==",
      "dependencies": {
        "passport-strategy": "1.x.x"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha512-CB97UUvDKJde2V0KDWWB3lyf6PC3FaZP7YxZ2G8OAtn9p4HI9j9JLP9qjOGZFvyl8uwNT8qM+hGnz/n16NI7oA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "peer": true
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "node_modules/pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha512-KG8UEiEVkR3wGEb4m5yZkVCzigAD+cVEJck2CzYZO37ZGJfctvVptVO192MwrtPhzONn6go8ylnOdMhKqi4nfg=="
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "peer": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "peer": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "peer": true,
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pretty-format": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.6.2.tgz",
      "integrity": "sha512-1q0oC8eRveTg5nnBEWMXAU2qpv65Gnuf2eCQzSjxpWFkPaPARwqZZDGuNE0zPAZfTCHzIk3A8dIjwlQKKLphyg==",
      "dependencies": {
        "@jest/schemas": "^29.6.0",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "peer": true,
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "node_modules/punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pure-rand": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.0.2.tgz",
      "integrity": "sha512-6Yg0ekpKICSjPswYOuC5sku/TSWaRYlA0qsXqJgM/d/4pLPHPuTxK7Nbf7jFKzAeedUhR8C7K9Uv63FBsSo8xQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/dubzzz"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fast-check"
        }
      ],
      "peer": true
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react-is": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/redis": {
      "version": "4.6.7",
      "resolved": "https://registry.npmjs.org/redis/-/redis-4.6.7.tgz",
      "integrity": "sha512-KrkuNJNpCwRm5vFJh0tteMxW8SaUzkm5fBH7eL5hd/D0fAkzvapxbfGPP/r+4JAXdQuX7nebsBkBqA2RHB7Usw==",
      "dependencies": {
        "@redis/bloom": "1.2.0",
        "@redis/client": "1.5.8",
        "@redis/graph": "1.1.0",
        "@redis/json": "1.0.4",
        "@redis/search": "1.1.3",
        "@redis/time-series": "1.0.4"
      }
    },
    "node_modules/redis-errors": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/redis-parser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
      "dependencies": {
        "redis-errors": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.2",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.2.tgz",
      "integrity": "sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==",
      "peer": true,
      "dependencies": {
        "is-core-module": "^2.11.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "peer": true,
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve.exports": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
      "integrity": "sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "peer": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "node_modules/simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "dependencies": {
        "semver": "~7.0.0"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/simple-update-notifier/node_modules/semver": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
      "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "peer": true
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/snowyflake": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/snowyflake/-/snowyflake-2.0.0.tgz",
      "integrity": "sha512-BxeqV0KJxJASu6EBJGUkX194Zhh37AEa0ow/JRK39icWbLTG9Wl/7LAL6a/ZMSjNm4O9pZk6QoLcWP7f/YKmtA==",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "dependencies": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.13.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "peer": true,
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "peer": true
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/standard-as-callback": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A=="
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "peer": true,
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "peer": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/superagent": {
      "version": "8.0.9",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.0.9.tgz",
      "integrity": "sha512-4C7Bh5pyHTvU33KpZgwrNKh/VQnvgtCSqPRfJAUdmrtSYePVzVg4E4OzsrbkhJj9O7SO6Bnv75K/F8XVZT8YHA==",
      "dev": true,
      "dependencies": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^2.1.2",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=6.4.0 <13 || >=14"
      }
    },
    "node_modules/superagent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dev": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/superagent/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dev": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/superagent/node_modules/mime": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
      "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
      "dev": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/superagent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "dev": true
    },
    "node_modules/supertest": {
      "version": "6.3.3",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-6.3.3.tgz",
      "integrity": "sha512-EMCG6G8gDu5qEqRQ3JjjPs6+FYT1a7Hv5ApHvtSghmOFJYtsU5S+pSb6Y2EUeCEY3CmEL3mmQ8YWlPOzQomabA==",
      "dev": true,
      "dependencies": {
        "methods": "^1.1.2",
        "superagent": "^8.0.5"
      },
      "engines": {
        "node": ">=6.4.0"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "peer": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tar": {
      "version": "6.1.15",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.15.tgz",
      "integrity": "sha512-/zKt9UyngnxIT/EAGYuxaMYgOIJiP81ab9ZfkILq4oNLPFX50qyYmu7jRj9qeXoxmJHjGlbH0+cm2uy1WCs10A==",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "peer": true,
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ=="
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "peer": true
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "dependencies": {
        "nopt": "~1.0.10"
      },
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/touch/node_modules/nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
      "dev": true,
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/ts-essentials": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/ts-essentials/-/ts-essentials-7.0.3.tgz",
      "integrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ==",
      "peerDependencies": {
        "typescript": ">=3.7.0"
      }
    },
    "node_modules/ts-jest": {
      "version": "29.1.1",
      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.1.1.tgz",
      "integrity": "sha512-D6xjnnbP17cC85nliwGiL+tpoKN0StpgE0TeOjXQTU6MVCfsB4v7aW05CgQ/1OywGb0x/oy9hHFnN+sczTiRaA==",
      "dev": true,
      "dependencies": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^29.0.0",
        "json5": "^2.2.3",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "^7.5.3",
        "yargs-parser": "^21.0.1"
      },
      "bin": {
        "ts-jest": "cli.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": ">=7.0.0-beta.0 <8",
        "@jest/types": "^29.0.0",
        "babel-jest": "^29.0.0",
        "jest": "^29.0.0",
        "typescript": ">=4.3 <6"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "@jest/types": {
          "optional": true
        },
        "babel-jest": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        }
      }
    },
    "node_modules/ts-node": {
      "version": "10.9.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
      "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/tslib": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.1.tgz",
      "integrity": "sha512-t0hLfiEKfMUoqhG+U1oid7Pva4bbDPHYfJNiB7BiIjRkj1pyC++4N3huJfqY6aRH6VTB0rvtzQwjM4K6qpfOig=="
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typescript": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.1.6.tgz",
      "integrity": "sha512-zaWCozRZ6DLEWAWFrVDz1H6FVXzUSfTy5FUMWsQlU8Ym5JP9eO4xkTIROFCQvhQf61z6O/G6ugw3SgAnvvm+HA==",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz",
      "integrity": "sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true,
      "dependencies": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg=="
    },
    "node_modules/v8-to-istanbul": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.1.0.tgz",
      "integrity": "sha512-6z3GW9x8G1gd+JIIgQQQxXuiJtCXeAjp6RaPEPLv62mH3iPHPxV6W3robxtCzNErRo6ZwTmzWhsbNvjyEBKzKA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/v8-to-istanbul/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "peer": true
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "peer": true,
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/websocket-ts": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/websocket-ts/-/websocket-ts-1.1.1.tgz",
      "integrity": "sha512-rm+S60J74Ckw5iizzgID12ju+OfaHAa6dhXhULIOrXkl0e05RzxfY42/vMStpz5jWL3iz9mkyjPcFUY1IgI0fw=="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "peer": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "peer": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "peer": true,
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/ws": {
      "version": "8.13.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.13.0.tgz",
      "integrity": "sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "peer": true,
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  },
  "dependencies": {
    "@ampproject/remapping": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz",
      "integrity": "sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==",
      "peer": true,
      "requires": {
        "@jridgewell/gen-mapping": "^0.3.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@babel/code-frame": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.22.5.tgz",
      "integrity": "sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==",
      "requires": {
        "@babel/highlight": "^7.22.5"
      }
    },
    "@babel/compat-data": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.22.9.tgz",
      "integrity": "sha512-5UamI7xkUcJ3i9qVDS+KFDEK8/7oJ55/sJMB1Ge7IEapr7KfdfV/HErR+koZwOfd+SgtFKOKRhRakdg++DcJpQ==",
      "peer": true
    },
    "@babel/core": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.22.9.tgz",
      "integrity": "sha512-G2EgeufBcYw27U4hhoIwFcgc1XU7TlXJ3mv04oOv1WCuo900U/anZSPzEqNjwdjgffkk2Gs0AN0dW1CKVLcG7w==",
      "peer": true,
      "requires": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.9",
        "@babel/helper-compilation-targets": "^7.22.9",
        "@babel/helper-module-transforms": "^7.22.9",
        "@babel/helpers": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.8",
        "@babel/types": "^7.22.5",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.2",
        "semver": "^6.3.1"
      },
      "dependencies": {
        "convert-source-map": {
          "version": "1.9.0",
          "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
          "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
          "peer": true
        },
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        },
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        }
      }
    },
    "@babel/generator": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.22.9.tgz",
      "integrity": "sha512-KtLMbmicyuK2Ak/FTCJVbDnkN1SlT8/kceFTiuDiiRUUSMnHMidxSCdG4ndkTOHHpoomWe/4xkvHkEOncwjYIw==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5",
        "@jridgewell/gen-mapping": "^0.3.2",
        "@jridgewell/trace-mapping": "^0.3.17",
        "jsesc": "^2.5.1"
      }
    },
    "@babel/helper-compilation-targets": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.9.tgz",
      "integrity": "sha512-7qYrNM6HjpnPHJbopxmb8hSPoZ0gsX8IvUS32JGVoy+pU9e5N0nLr1VjJoR6kA4d9dmGLxNYOjeB8sUDal2WMw==",
      "peer": true,
      "requires": {
        "@babel/compat-data": "^7.22.9",
        "@babel/helper-validator-option": "^7.22.5",
        "browserslist": "^4.21.9",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "dependencies": {
        "lru-cache": {
          "version": "5.1.1",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
          "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
          "peer": true,
          "requires": {
            "yallist": "^3.0.2"
          }
        },
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        },
        "yallist": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
          "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
          "peer": true
        }
      }
    },
    "@babel/helper-environment-visitor": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz",
      "integrity": "sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==",
      "peer": true
    },
    "@babel/helper-function-name": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz",
      "integrity": "sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.22.5",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-hoist-variables": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz",
      "integrity": "sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-module-imports": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz",
      "integrity": "sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-module-transforms": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.22.9.tgz",
      "integrity": "sha512-t+WA2Xn5K+rTeGtC8jCsdAH52bjggG5TKRuRrAGNM/mjIbO4GxvlLMFOEz9wXY5I2XQ60PMFsAG2WIcG82dQMQ==",
      "peer": true,
      "requires": {
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-module-imports": "^7.22.5",
        "@babel/helper-simple-access": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/helper-validator-identifier": "^7.22.5"
      }
    },
    "@babel/helper-plugin-utils": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz",
      "integrity": "sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==",
      "peer": true
    },
    "@babel/helper-simple-access": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz",
      "integrity": "sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-split-export-declaration": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz",
      "integrity": "sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-string-parser": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz",
      "integrity": "sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==",
      "peer": true
    },
    "@babel/helper-validator-identifier": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz",
      "integrity": "sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ=="
    },
    "@babel/helper-validator-option": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz",
      "integrity": "sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==",
      "peer": true
    },
    "@babel/helpers": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.22.6.tgz",
      "integrity": "sha512-YjDs6y/fVOYFV8hAf1rxd1QvR9wJe1pDBZ2AREKq/SDayfPzgk0PBnVuTCE5X1acEpMMNOVUqoe+OwiZGJ+OaA==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.6",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/highlight": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.22.5.tgz",
      "integrity": "sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==",
      "requires": {
        "@babel/helper-validator-identifier": "^7.22.5",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "3.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
          "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
          "requires": {
            "color-convert": "^1.9.0"
          }
        },
        "chalk": {
          "version": "2.4.2",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
          "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
          "requires": {
            "ansi-styles": "^3.2.1",
            "escape-string-regexp": "^1.0.5",
            "supports-color": "^5.3.0"
          }
        },
        "color-convert": {
          "version": "1.9.3",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
          "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
          "requires": {
            "color-name": "1.1.3"
          }
        },
        "color-name": {
          "version": "1.1.3",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
          "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
        },
        "escape-string-regexp": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
          "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg=="
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw=="
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "@babel/parser": {
      "version": "7.22.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.22.7.tgz",
      "integrity": "sha512-7NF8pOkHP5o2vpmGgNGcfAeCvOYhGLyA3Z4eBQkT1RJlWu47n63bCs93QfJ2hIAFCil7L5P2IWhs1oToVgrL0Q==",
      "peer": true
    },
    "@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.12.13"
      }
    },
    "@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-jsx": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.22.5.tgz",
      "integrity": "sha512-gvyP4hZrgrs/wWMaocvxZ44Hw0b3W8Pe+cMxc8V1ULQ07oh8VNbIRaoD1LRZVTvD+0nieDKjfgKg89sD7rrKrg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.22.5"
      }
    },
    "@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.14.5"
      }
    },
    "@babel/plugin-syntax-typescript": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.22.5.tgz",
      "integrity": "sha512-1mS2o03i7t1c6VzH6fdQ3OA8tcEIxwG18zIPRp+UY1Ihv6W+XZzBCVxExF9upussPXJ0xE9XRHwMoNs1ep/nRQ==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.22.5"
      }
    },
    "@babel/template": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.5.tgz",
      "integrity": "sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.22.5",
        "@babel/parser": "^7.22.5",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/traverse": {
      "version": "7.22.8",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.22.8.tgz",
      "integrity": "sha512-y6LPR+wpM2I3qJrsheCTwhIinzkETbplIgPBbwvqPKc+uljeA5gP+3nP8irdYt1mjQaDnlIcG+dw8OjAco4GXw==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.7",
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-function-name": "^7.22.5",
        "@babel/helper-hoist-variables": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/types": "^7.22.5",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        }
      }
    },
    "@babel/types": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.22.5.tgz",
      "integrity": "sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==",
      "peer": true,
      "requires": {
        "@babel/helper-string-parser": "^7.22.5",
        "@babel/helper-validator-identifier": "^7.22.5",
        "to-fast-properties": "^2.0.0"
      }
    },
    "@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "peer": true
    },
    "@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "requires": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "dependencies": {
        "@jridgewell/trace-mapping": {
          "version": "0.3.9",
          "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
          "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
          "requires": {
            "@jridgewell/resolve-uri": "^3.0.3",
            "@jridgewell/sourcemap-codec": "^1.4.10"
          }
        }
      }
    },
    "@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@huggingface/inference": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@huggingface/inference/-/inference-2.6.1.tgz",
      "integrity": "sha512-qFYchgOCPeEkZJKiSr7Kz62QwukJtgkeQCT7Q0SSKUcvHpTQVNJp6i/JrJMR4dBdzQysJ1SZDC0pLBBnnskTag=="
    },
    "@ioredis/commands": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.2.0.tgz",
      "integrity": "sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg=="
    },
    "@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "peer": true,
      "requires": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      }
    },
    "@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "peer": true
    },
    "@jest/console": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.6.2.tgz",
      "integrity": "sha512-0N0yZof5hi44HAR2pPS+ikJ3nzKNoZdVu8FffRf3wy47I7Dm7etk/3KetMdRUqzVd16V4O2m2ISpNTbnIuqy1w==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0"
      }
    },
    "@jest/core": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.6.2.tgz",
      "integrity": "sha512-Oj+5B+sDMiMWLhPFF+4/DvHOf+U10rgvCLGPHP8Xlsy/7QxS51aU/eBngudHlJXnaWD5EohAgJ4js+T6pa+zOg==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/reporters": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.5.0",
        "jest-config": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-resolve-dependencies": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "@jest/environment": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.6.2.tgz",
      "integrity": "sha512-AEcW43C7huGd/vogTddNNTDRpO6vQ2zaQNrttvWV18ArBx9Z56h7BIsXkNFJVOO4/kblWEQz30ckw0+L3izc+Q==",
      "peer": true,
      "requires": {
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2"
      }
    },
    "@jest/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-m6DrEJxVKjkELTVAztTLyS/7C92Y2b0VYqmDROYKLLALHn8T/04yPs70NADUYPrV3ruI+H3J0iUIuhkjp7vkfg==",
      "peer": true,
      "requires": {
        "expect": "^29.6.2",
        "jest-snapshot": "^29.6.2"
      }
    },
    "@jest/expect-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.6.2.tgz",
      "integrity": "sha512-6zIhM8go3RV2IG4aIZaZbxwpOzz3ZiM23oxAlkquOIole+G6TrbeXnykxWYlqF7kz2HlBjdKtca20x9atkEQYg==",
      "requires": {
        "jest-get-type": "^29.4.3"
      }
    },
    "@jest/fake-timers": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.6.2.tgz",
      "integrity": "sha512-euZDmIlWjm1Z0lJ1D0f7a0/y5Kh/koLFMUBE5SUYWrmy8oNhJpbTBDAP6CxKnadcMLDoDf4waRYCe35cH6G6PA==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "@jest/globals": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.6.2.tgz",
      "integrity": "sha512-cjuJmNDjs6aMijCmSa1g2TNG4Lby/AeU7/02VtpW+SLcZXzOLK2GpN2nLqcFjmhy3B3AoPeQVx7BnyOf681bAw==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/types": "^29.6.1",
        "jest-mock": "^29.6.2"
      }
    },
    "@jest/reporters": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.6.2.tgz",
      "integrity": "sha512-sWtijrvIav8LgfJZlrGCdN0nP2EWbakglJY49J1Y5QihcQLfy7ovyxxjJBRXMNltgt4uPtEcFmIMbVshEDfFWw==",
      "peer": true,
      "requires": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      }
    },
    "@jest/schemas": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.0.tgz",
      "integrity": "sha512-rxLjXyJBTL4LQeJW3aKo0M/+GkCOXsO+8i9Iu7eDb6KwtP65ayoDsitrdPBtujxQ88k4wI2FNYfa6TOGwSn6cQ==",
      "requires": {
        "@sinclair/typebox": "^0.27.8"
      }
    },
    "@jest/source-map": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.0.tgz",
      "integrity": "sha512-oA+I2SHHQGxDCZpbrsCQSoMLb3Bz547JnM+jUr9qEbuw0vQlWZfpPS7CO9J7XiwKicEz9OFn/IYoLkkiUD7bzA==",
      "peer": true,
      "requires": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      }
    },
    "@jest/test-result": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.6.2.tgz",
      "integrity": "sha512-3VKFXzcV42EYhMCsJQURptSqnyjqCGbtLuX5Xxb6Pm6gUf1wIRIl+mandIRGJyWKgNKYF9cnstti6Ls5ekduqw==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      }
    },
    "@jest/test-sequencer": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.6.2.tgz",
      "integrity": "sha512-GVYi6PfPwVejO7slw6IDO0qKVum5jtrJ3KoLGbgBWyr2qr4GaxFV6su+ZAjdTX75Sr1DkMFRk09r2ZVa+wtCGw==",
      "peer": true,
      "requires": {
        "@jest/test-result": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "slash": "^3.0.0"
      }
    },
    "@jest/transform": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.6.2.tgz",
      "integrity": "sha512-ZqCqEISr58Ce3U+buNFJYUktLJZOggfyvR+bZMaiV1e8B1SIvJbwZMrYz3gx/KAPn9EXmOmN+uB08yLCjWkQQg==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      }
    },
    "@jest/types": {
      "version": "29.6.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.1.tgz",
      "integrity": "sha512-tPKQNMPuXgvdOn2/Lg9HNfUvjYVGolt04Hp03f5hAk878uwOLikN+JzeLY0HcVgKgFl9Hs3EIqpu3WX27XNhnw==",
      "requires": {
        "@jest/schemas": "^29.6.0",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      }
    },
    "@jridgewell/gen-mapping": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
      "peer": true,
      "requires": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w=="
    },
    "@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "peer": true
    },
    "@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "@jridgewell/trace-mapping": {
      "version": "0.3.18",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz",
      "integrity": "sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==",
      "peer": true,
      "requires": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      },
      "dependencies": {
        "@jridgewell/sourcemap-codec": {
          "version": "1.4.14",
          "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
          "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
          "peer": true
        }
      }
    },
    "@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "requires": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      }
    },
    "@msgpackr-extract/msgpackr-extract-darwin-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.2.tgz",
      "integrity": "sha512-9bfjwDxIDWmmOKusUcqdS4Rw+SETlp9Dy39Xui9BEGEk19dDwH0jhipwFzEff/pFg95NKymc6TOTbRKcWeRqyQ==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-darwin-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.2.tgz",
      "integrity": "sha512-lwriRAHm1Yg4iDf23Oxm9n/t5Zpw1lVnxYU3HnJPTi2lJRkKTrps1KVgvL6m7WvmhYVt/FIsssWay+k45QHeuw==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-arm": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.2.tgz",
      "integrity": "sha512-MOI9Dlfrpi2Cuc7i5dXdxPbFIgbDBGgKR5F2yWEa6FVEtSWncfVNKW5AKjImAQ6CZlBK9tympdsZJ2xThBiWWA==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.2.tgz",
      "integrity": "sha512-FU20Bo66/f7He9Fp9sP2zaJ1Q8L9uLPZQDub/WlUip78JlPeMbVL8546HbZfcW9LNciEXc8d+tThSJjSC+tmsg==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.2.tgz",
      "integrity": "sha512-gsWNDCklNy7Ajk0vBBf9jEx04RUxuDQfBse918Ww+Qb9HCPoGzS+XJTLe96iN3BVK7grnLiYghP/M4L8VsaHeA==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-win32-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.2.tgz",
      "integrity": "sha512-O+6Gs8UeDbyFpbSh2CPEz/UOrrdWPTBYNblZK5CxxLisYt4kGX3Sc+czffFonyjiGSq3jWLwJS/CCJc7tBr4sQ==",
      "optional": true
    },
    "@redis/bloom": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
      "requires": {}
    },
    "@redis/client": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.5.8.tgz",
      "integrity": "sha512-xzElwHIO6rBAqzPeVnCzgvrnBEcFL1P0w8P65VNLRkdVW8rOE58f52hdj0BDgmsdOm4f1EoXPZtH4Fh7M/qUpw==",
      "requires": {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        "yallist": "4.0.0"
      }
    },
    "@redis/graph": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.0.tgz",
      "integrity": "sha512-16yZWngxyXPd+MJxeSr0dqh2AIOi8j9yXKcKCwVaKDbH3HTuETpDVPcLujhFYVPtYrngSco31BUcSa9TH31Gqg==",
      "requires": {}
    },
    "@redis/json": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.4.tgz",
      "integrity": "sha512-LUZE2Gdrhg0Rx7AN+cZkb1e6HjoSKaeeW8rYnt89Tly13GBI5eP4CwDVr+MY8BAYfCg4/N15OUrtLoona9uSgw==",
      "requires": {}
    },
    "@redis/search": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.1.3.tgz",
      "integrity": "sha512-4Dg1JjvCevdiCBTZqjhKkGoC5/BcB7k9j99kdMnaXFXg8x4eyOIVg9487CMv7/BUVkFLZCaIh8ead9mU15DNng==",
      "requires": {}
    },
    "@redis/time-series": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.0.4.tgz",
      "integrity": "sha512-ThUIgo2U/g7cCuZavucQTQzA9g9JbDDY2f64u3AbAoz/8vE2lt2U37LamDUVChhaDA3IRT9R6VvJwqnUfTJzng==",
      "requires": {}
    },
    "@sideway/address": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.4.tgz",
      "integrity": "sha512-7vwq+rOHVWjyXxVlR76Agnvhy8I9rpzjosTESvmhNeXOXdZZB15Fl+TI9x1SiHZH5Jv2wTGduSxFDIaq0m3DUw==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA=="
    },
    "@sinonjs/commons": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.0.tgz",
      "integrity": "sha512-jXBtWAF4vmdNmZgD5FoKsVLv3rPgDnLgPbU84LIJ3otV44vJlDRokVng5v8NFJdCf/da9legHcKaRuZs4L7faA==",
      "peer": true,
      "requires": {
        "type-detect": "4.0.8"
      }
    },
    "@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "peer": true,
      "requires": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "@tsconfig/node10": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA=="
    },
    "@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag=="
    },
    "@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow=="
    },
    "@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA=="
    },
    "@types/babel__core": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.1.tgz",
      "integrity": "sha512-aACu/U/omhdk15O4Nfb+fHgH/z3QsfQzpnvRZhYhThms83ZnAOZz7zZAWO7mn2yyNQaA4xTO8GLK3uqFU4bYYw==",
      "peer": true,
      "requires": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "@types/babel__generator": {
      "version": "7.6.4",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.4.tgz",
      "integrity": "sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__template": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.1.tgz",
      "integrity": "sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==",
      "peer": true,
      "requires": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__traverse": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.1.tgz",
      "integrity": "sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.20.7"
      }
    },
    "@types/bcrypt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.0.tgz",
      "integrity": "sha512-agtcFKaruL8TmcvqbndlqHPSJgsolhf/qPWchFlgnW1gECTN/nKbFcoFnvKAQRFfKbh+BO6A3SWdJu9t+xF3Lw==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/bcryptjs": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@types/bcryptjs/-/bcryptjs-2.4.2.tgz",
      "integrity": "sha512-LiMQ6EOPob/4yUL66SZzu6Yh77cbzJFYll+ZfaPiPPFswtIlA/Fs1MzdKYA7JApHU49zQTbJGX3PDmCpIdDBRQ==",
      "dev": true
    },
    "@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dev": true,
      "requires": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/cookiejar": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.2.tgz",
      "integrity": "sha512-t73xJJrvdTjXrn4jLS9VSGRbz0nUY3cl2DMGDU48lKl+HR9dbbjW2A9r3g40VA++mQpy6uuHg33gy7du2BKpog=="
    },
    "@types/cors": {
      "version": "2.8.13",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.13.tgz",
      "integrity": "sha512-RG8AStHlUiV5ysZQKq97copd2UmVYw3/pRMLefISZ3S1hK104Cwm7iLQ3fTKx+lsUH2CE8FlLaYeEA2LSeqYUA==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/express": {
      "version": "4.17.17",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.17.tgz",
      "integrity": "sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==",
      "dev": true,
      "requires": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "@types/express-serve-static-core": {
      "version": "4.17.35",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz",
      "integrity": "sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "@types/express-session": {
      "version": "1.17.7",
      "resolved": "https://registry.npmjs.org/@types/express-session/-/express-session-1.17.7.tgz",
      "integrity": "sha512-L25080PBYoRLu472HY/HNCxaXY8AaGgqGC8/p/8+BYMhG0RDOLQ1wpXOpAzr4Gi5TGozTKyJv5BVODM5UNyVMw==",
      "dev": true,
      "requires": {
        "@types/express": "*"
      }
    },
    "@types/graceful-fs": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.6.tgz",
      "integrity": "sha512-Sig0SNORX9fdW+bQuTEovKj3uHcUL6LQKbCrrqb1X7J6/ReAbhCXRAhc+SMejhLELFj2QcyuxmUooZ4bt5ReSw==",
      "peer": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/http-errors": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.1.tgz",
      "integrity": "sha512-/K3ds8TRAfBvi5vfjuz8y6+GiAYBZ0x4tXv1Av6CWBWn0IlADc+ZX9pMq7oU0fNQPnBwIZl3rmeLp6SBApbxSQ==",
      "dev": true
    },
    "@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz",
      "integrity": "sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g=="
    },
    "@types/istanbul-lib-report": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
      "integrity": "sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==",
      "requires": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "@types/istanbul-reports": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz",
      "integrity": "sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==",
      "requires": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "@types/jest": {
      "version": "29.5.3",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-29.5.3.tgz",
      "integrity": "sha512-1Nq7YrO/vJE/FYnqYyw0FS8LdrjExSgIiHyKg7xPpn+yi8Q4huZryKnkJatN1ZRH89Kw2v33/8ZMB7DuZeSLlA==",
      "dev": true,
      "requires": {
        "expect": "^29.0.0",
        "pretty-format": "^29.0.0"
      }
    },
    "@types/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-drE6uz7QBKq1fYqqoFKTDRdFCPHd5TCub75BM+D+cMx7NU9hUz7SESLfC2fSCXVFMO5Yj8sOWHuGqPgjc+fz0Q==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==",
      "dev": true
    },
    "@types/mocha": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/@types/mocha/-/mocha-10.0.1.tgz",
      "integrity": "sha512-/fvYntiO1GeICvqbQ3doGDIP97vWmvFt83GKguJ6prmQM2iXZfFcq6YE8KteFyRtX2/h5Hf91BYvPodJKFYv5Q==",
      "dev": true
    },
    "@types/mongoose": {
      "version": "5.11.97",
      "resolved": "https://registry.npmjs.org/@types/mongoose/-/mongoose-5.11.97.tgz",
      "integrity": "sha512-cqwOVYT3qXyLiGw7ueU2kX9noE8DPGRY6z8eUxudhXY8NZ7DMKYAxyZkLSevGfhCX3dO/AoX5/SO9lAzfjon0Q==",
      "dev": true,
      "requires": {
        "mongoose": "*"
      }
    },
    "@types/node": {
      "version": "20.4.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.4.6.tgz",
      "integrity": "sha512-q0RkvNgMweWWIvSMDiXhflGUKMdIxBo2M2tYM/0kEGDueQByFzK4KZAgu5YHGFNxziTlppNpTIBcqHQAxlfHdA=="
    },
    "@types/node-fetch": {
      "version": "2.6.4",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.4.tgz",
      "integrity": "sha512-1ZX9fcN4Rvkvgv4E6PAY5WXUFWFcRWxZa3EW83UjycOB9ljJCedb2CupIP4RZMEwF/M3eTcCihbBRgwtGbg5Rg==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "@types/passport": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/@types/passport/-/passport-1.0.12.tgz",
      "integrity": "sha512-QFdJ2TiAEoXfEQSNDISJR1Tm51I78CymqcBa8imbjo6dNNu+l2huDxxbDEIoFIwOSKMkOfHEikyDuZ38WwWsmw==",
      "dev": true,
      "requires": {
        "@types/express": "*"
      }
    },
    "@types/passport-jwt": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/@types/passport-jwt/-/passport-jwt-3.0.9.tgz",
      "integrity": "sha512-5XJt+79emfgpuBvBQusUPylFIVtW1QVAAkTRwCbRJAmxUjmLtIqUU6V1ovpnHPu6Qut3mR5Juc+s7kd06roNTg==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/jsonwebtoken": "*",
        "@types/passport-strategy": "*"
      }
    },
    "@types/passport-local": {
      "version": "1.0.35",
      "resolved": "https://registry.npmjs.org/@types/passport-local/-/passport-local-1.0.35.tgz",
      "integrity": "sha512-K4eLTJ8R0yYW8TvCqkjB0pTKoqfUSdl5PfZdidTjV2ETV3604fQxtY6BHKjQWAx50WUS0lqzBvKv3LoI1ZBPeA==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/passport": "*",
        "@types/passport-strategy": "*"
      }
    },
    "@types/passport-strategy": {
      "version": "0.2.35",
      "resolved": "https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.35.tgz",
      "integrity": "sha512-o5D19Jy2XPFoX2rKApykY15et3Apgax00RRLf0RUotPDUsYrQa7x4howLYr9El2mlUApHmCMv5CZ1IXqKFQ2+g==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/passport": "*"
      }
    },
    "@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==",
      "dev": true
    },
    "@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==",
      "dev": true
    },
    "@types/send": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.1.tgz",
      "integrity": "sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==",
      "dev": true,
      "requires": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "@types/serve-static": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.2.tgz",
      "integrity": "sha512-J2LqtvFYCzaj8pVYKw8klQXrLLk7TBZmQ4ShlcdkELFKGwGMfevMLneMMRkMgZxotOD9wg497LpC7O8PcvAmfw==",
      "dev": true,
      "requires": {
        "@types/http-errors": "*",
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "@types/stack-utils": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.1.tgz",
      "integrity": "sha512-Hl219/BT5fLAaz6NDkSuhzasy49dwQS/DSdu4MdggFB8zcXv7vflBI3xp7FEmkmdDkBUI2bPUNeMttp2knYdxw=="
    },
    "@types/superagent": {
      "version": "4.1.18",
      "resolved": "https://registry.npmjs.org/@types/superagent/-/superagent-4.1.18.tgz",
      "integrity": "sha512-LOWgpacIV8GHhrsQU+QMZuomfqXiqzz3ILLkCtKx3Us6AmomFViuzKT9D693QTKgyut2oCytMG8/efOop+DB+w==",
      "requires": {
        "@types/cookiejar": "*",
        "@types/node": "*"
      }
    },
    "@types/supertest": {
      "version": "2.0.12",
      "resolved": "https://registry.npmjs.org/@types/supertest/-/supertest-2.0.12.tgz",
      "integrity": "sha512-X3HPWTwXRerBZS7Mo1k6vMVR1Z6zmJcDVn5O/31whe0tnjE4te6ZJSJGq1RiqHPjzPdMTfjCFogDJmwng9xHaQ==",
      "requires": {
        "@types/superagent": "*"
      }
    },
    "@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "requires": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "@types/yargs": {
      "version": "17.0.24",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.24.tgz",
      "integrity": "sha512-6i0aC7jV6QzQB8ne1joVZ0eSFIstHsCrobmOtghM11yGlH0j43FKL2UhWdELkyps0zuf7qVTUVCCR+tgSlyLLw==",
      "requires": {
        "@types/yargs-parser": "*"
      }
    },
    "@types/yargs-parser": {
      "version": "21.0.0",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.0.tgz",
      "integrity": "sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA=="
    },
    "abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "requires": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      }
    },
    "acorn": {
      "version": "8.10.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.10.0.tgz",
      "integrity": "sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw=="
    },
    "acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA=="
    },
    "agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "requires": {
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "peer": true,
      "requires": {
        "type-fest": "^0.21.3"
      }
    },
    "ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
    },
    "ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "requires": {
        "color-convert": "^2.0.1"
      }
    },
    "anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
    },
    "are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "requires": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      }
    },
    "arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "peer": true,
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "axios": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.4.0.tgz",
      "integrity": "sha512-S4XCWMEmzvo64T9GfvQDOXgYRDJ/wsSZc7Jvdgx5u1sd0JwsuPLqb3SYmusag+edF6ziyMensPVqLTSc1PiSEA==",
      "requires": {
        "follow-redirects": "^1.15.0",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      },
      "dependencies": {
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "babel-jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.6.2.tgz",
      "integrity": "sha512-BYCzImLos6J3BH/+HvUCHG1dTf2MzmAB4jaVxHV+29RZLjR29XuYTmsf2sdDwkrb+FczkGo3kOhE7ga6sI0P4A==",
      "peer": true,
      "requires": {
        "@jest/transform": "^29.6.2",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.5.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      }
    },
    "babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      }
    },
    "babel-plugin-jest-hoist": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.5.0.tgz",
      "integrity": "sha512-zSuuuAlTMT4mzLj2nPnUm6fsE6270vdOfnpbJ+RmruU75UhLFvL0N2NgI7xpeS7NaB6hGqmd5pVpGTDYvi4Q3w==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      }
    },
    "babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz",
      "integrity": "sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==",
      "peer": true,
      "requires": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      }
    },
    "babel-preset-jest": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.5.0.tgz",
      "integrity": "sha512-JOMloxOqdiBSxMAzjRaH023/vvcaSaec49zvg+2LmNsktC7ei39LTJGw02J+9uUtTZUq6xbLyJ4dxe9sSmIuAg==",
      "peer": true,
      "requires": {
        "babel-plugin-jest-hoist": "^29.5.0",
        "babel-preset-current-node-syntax": "^1.0.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "bcrypt": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.0.tgz",
      "integrity": "sha512-RHBS7HI5N5tEnGTmtR/pppX0mmDSBpQ4aCBsj7CEQfYXDcO74A8sIBYcJMuCsis2E81zDxeENYhv66oZwLiA+Q==",
      "requires": {
        "@mapbox/node-pre-gyp": "^1.0.10",
        "node-addon-api": "^5.0.0"
      }
    },
    "bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true
    },
    "body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "requires": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "browserslist": {
      "version": "4.21.10",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.10.tgz",
      "integrity": "sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==",
      "peer": true,
      "requires": {
        "caniuse-lite": "^1.0.30001517",
        "electron-to-chromium": "^1.4.477",
        "node-releases": "^2.0.13",
        "update-browserslist-db": "^1.0.11"
      }
    },
    "bs-logger": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
      "dev": true,
      "requires": {
        "fast-json-stable-stringify": "2.x"
      }
    },
    "bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "peer": true,
      "requires": {
        "node-int64": "^0.4.0"
      }
    },
    "bson": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-5.4.0.tgz",
      "integrity": "sha512-WRZ5SQI5GfUuKnPTNmAYPiKIof3ORXAF4IRU5UcgmivNIon01rWQlw5RUH954dpu8yGL8T59YShVddIPaU/gFA=="
    },
    "buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "peer": true
    },
    "bull": {
      "version": "4.10.4",
      "resolved": "https://registry.npmjs.org/bull/-/bull-4.10.4.tgz",
      "integrity": "sha512-o9m/7HjS/Or3vqRd59evBlWCXd9Lp+ALppKseoSKHaykK46SmRjAilX98PgmOz1yeVaurt8D5UtvEt4bUjM3eA==",
      "requires": {
        "cron-parser": "^4.2.1",
        "debuglog": "^1.0.0",
        "get-port": "^5.1.1",
        "ioredis": "^5.0.0",
        "lodash": "^4.17.21",
        "msgpackr": "^1.5.2",
        "semver": "^7.3.2",
        "uuid": "^8.3.0"
      }
    },
    "bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
    },
    "call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "requires": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      }
    },
    "callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "peer": true
    },
    "camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "peer": true
    },
    "caniuse-lite": {
      "version": "1.0.30001519",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001519.tgz",
      "integrity": "sha512-0QHgqR+Jv4bxHMp8kZ1Kn8CH55OikjKJ6JmKkZYP1F3D7w+lnFXF70nG5eNfsZS89jadi5Ywy5UCSKLAglIRkg==",
      "peer": true
    },
    "chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "requires": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      }
    },
    "char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "peer": true
    },
    "chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      }
    },
    "chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ=="
    },
    "ci-info": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.8.0.tgz",
      "integrity": "sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw=="
    },
    "cjs-module-lexer": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
      "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==",
      "peer": true
    },
    "cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "peer": true,
      "requires": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      }
    },
    "cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA=="
    },
    "co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "peer": true
    },
    "collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "peer": true
    },
    "color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "requires": {
        "color-name": "~1.1.4"
      }
    },
    "color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg=="
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==",
      "dev": true
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ=="
    },
    "content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "requires": {
        "safe-buffer": "5.2.1"
      }
    },
    "content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA=="
    },
    "convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "peer": true
    },
    "cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw=="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true
    },
    "cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "requires": {
        "object-assign": "^4",
        "vary": "^1"
      }
    },
    "create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "cron-parser": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.8.1.tgz",
      "integrity": "sha512-jbokKWGcyU4gl6jAfX97E1gDpY12DJ1cLJZmoDzaAln/shZ+S3KBFBuA2Q6WeUN4gJf/8klnV1EfvhA2lK5IRQ==",
      "requires": {
        "luxon": "^3.2.1"
      }
    },
    "cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "peer": true,
      "requires": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      }
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "debuglog": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
      "integrity": "sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw=="
    },
    "dedent": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.1.tgz",
      "integrity": "sha512-+LxW+KLWxu3HW3M2w2ympwtqPrqYRzU8fqi6Fhd18fBALe15blJPI/I4+UHveMVG6lJqB4JNd4UG0S5cnVHwIg==",
      "peer": true,
      "requires": {}
    },
    "deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "peer": true
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="
    },
    "delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ=="
    },
    "denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg=="
    },
    "detect-libc": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw=="
    },
    "detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "peer": true
    },
    "dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "requires": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A=="
    },
    "diff-sequences": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.4.3.tgz",
      "integrity": "sha512-ofrBgwpPhCD85kMKtE9RYFFq6OC1A89oW2vvgWZNCwxrUpRUILopY7lsYyMDSjc8g6U6aiO0Qubg6r4Wgt5ZnA=="
    },
    "dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "dev": true
    },
    "ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "electron-to-chromium": {
      "version": "1.4.482",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.482.tgz",
      "integrity": "sha512-h+UqpfmEr1Qkk0zp7ej/jid7CXoq4m4QzW6wNTb0ELJ/BZCpA4wgUylBIMGCe621tnr4l5VmoHjdoSx2lbnNJA==",
      "peer": true
    },
    "emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "peer": true
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w=="
    },
    "error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "peer": true,
      "requires": {
        "is-arrayish": "^0.2.1"
      }
    },
    "escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "peer": true
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w=="
    },
    "esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "peer": true
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg=="
    },
    "eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
    },
    "execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "peer": true,
      "requires": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      }
    },
    "exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "peer": true
    },
    "expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-iAErsLxJ8C+S02QbLAwgSGSezLQK+XXRDt8IuFXFpwCNw2ECmzZSmjKcCaFVp5VRMk+WAvz6h6jokzEzBFZEuA==",
      "requires": {
        "@jest/expect-utils": "^29.6.2",
        "@types/node": "*",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "requires": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      }
    },
    "express-session": {
      "version": "1.17.3",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.3.tgz",
      "integrity": "sha512-4+otWXlShYlG1Ma+2Jnn+xgKUZTMJ5QD3YvfilX3AcocOAbIkVylSWEklzALe/+Pu4qV6TYBj5GwOBFfdKqLBw==",
      "requires": {
        "cookie": "0.4.2",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "dependencies": {
        "cookie": {
          "version": "0.4.2",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
          "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA=="
        }
      }
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true
    },
    "fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "peer": true,
      "requires": {
        "bser": "2.1.1"
      }
    },
    "fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      }
    },
    "find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "peer": true,
      "requires": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      }
    },
    "follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA=="
    },
    "form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "dev": true,
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      }
    },
    "formidable": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.1.2.tgz",
      "integrity": "sha512-CM3GuJ57US06mlpQ47YcunuUZ9jpm8Vx+P2CGt2j7HpgkKZO/DJYQ0Bobim8G6PFQmK5lOqOOdUXboU+h73A4g==",
      "dev": true,
      "requires": {
        "dezalgo": "^1.0.4",
        "hexoid": "^1.0.0",
        "once": "^1.4.0",
        "qs": "^6.11.0"
      }
    },
    "forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow=="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q=="
    },
    "fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "requires": {
        "minipass": "^3.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        }
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "optional": true
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "requires": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      }
    },
    "generic-pool": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g=="
    },
    "gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "peer": true
    },
    "get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "peer": true
    },
    "get-intrinsic": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
      "requires": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3"
      }
    },
    "get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "peer": true
    },
    "get-port": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/get-port/-/get-port-5.1.1.tgz",
      "integrity": "sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ=="
    },
    "get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "peer": true
    },
    "glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "peer": true
    },
    "graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="
    },
    "has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg=="
    },
    "has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A=="
    },
    "has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
    },
    "helmet": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.0.0.tgz",
      "integrity": "sha512-MsIgYmdBh460ZZ8cJC81q4XJknjG567wzEmv46WOBblDb6TUd3z8/GhgmsM9pn8g2B80tAJ4m5/d3Bi1KrSUBQ=="
    },
    "hexoid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
      "dev": true
    },
    "html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "peer": true
    },
    "http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "requires": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      }
    },
    "https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "requires": {
        "agent-base": "6",
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "peer": true
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "peer": true,
      "requires": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      }
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "peer": true
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ioredis": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.3.2.tgz",
      "integrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA==",
      "requires": {
        "@ioredis/commands": "^1.1.1",
        "cluster-key-slot": "^1.1.0",
        "debug": "^4.3.4",
        "denque": "^2.1.0",
        "lodash.defaults": "^4.2.0",
        "lodash.isarguments": "^3.1.0",
        "redis-errors": "^1.2.0",
        "redis-parser": "^3.0.0",
        "standard-as-callback": "^2.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
    },
    "is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "peer": true
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-core-module": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.12.1.tgz",
      "integrity": "sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==",
      "peer": true,
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
    },
    "is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "peer": true
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="
    },
    "is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "peer": true
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "peer": true
    },
    "isomorphic-ws": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-5.0.0.tgz",
      "integrity": "sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==",
      "requires": {}
    },
    "istanbul-lib-coverage": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz",
      "integrity": "sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==",
      "peer": true
    },
    "istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        }
      }
    },
    "istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "peer": true,
      "requires": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "dependencies": {
        "make-dir": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
          "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
          "peer": true,
          "requires": {
            "semver": "^7.5.3"
          }
        }
      }
    },
    "istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "peer": true,
      "requires": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        }
      }
    },
    "istanbul-reports": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
      "peer": true,
      "requires": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      }
    },
    "jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.6.2.tgz",
      "integrity": "sha512-8eQg2mqFbaP7CwfsTpCxQ+sHzw1WuNWL5UUvjnWP4hx2riGz9fPSzYOaU5q8/GqWn1TfgZIVTqYJygbGbWAANg==",
      "peer": true,
      "requires": {
        "@jest/core": "^29.6.2",
        "@jest/types": "^29.6.1",
        "import-local": "^3.0.2",
        "jest-cli": "^29.6.2"
      }
    },
    "jest-changed-files": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.5.0.tgz",
      "integrity": "sha512-IFG34IUMUaNBIxjQXF/iu7g6EcdMrGRRxaUSw92I/2g2YC6vCdTltl4nHvt7Ci5nSJwXIkCu8Ka1DKF+X7Z1Ag==",
      "peer": true,
      "requires": {
        "execa": "^5.0.0",
        "p-limit": "^3.1.0"
      }
    },
    "jest-circus": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.6.2.tgz",
      "integrity": "sha512-G9mN+KOYIUe2sB9kpJkO9Bk18J4dTDArNFPwoZ7WKHKel55eKIS/u2bLthxgojwlf9NLCVQfgzM/WsOVvoC6Fw==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.6.2",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.6.2",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      }
    },
    "jest-cli": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.6.2.tgz",
      "integrity": "sha512-TT6O247v6dCEX2UGHGyflMpxhnrL0DNqP2fRTKYm3nJJpCTfXX3GCMQPGFjXDoj0i5/Blp3jriKXFgdfmbYB6Q==",
      "peer": true,
      "requires": {
        "@jest/core": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "prompts": "^2.0.1",
        "yargs": "^17.3.1"
      }
    },
    "jest-config": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.6.2.tgz",
      "integrity": "sha512-VxwFOC8gkiJbuodG9CPtMRjBUNZEHxwfQXmIudSTzFWxaci3Qub1ddTRbFNQlD/zUeaifLndh/eDccFX4wCMQw==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-jest": "^29.6.2",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.6.2",
        "jest-environment-node": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      }
    },
    "jest-diff": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.6.2.tgz",
      "integrity": "sha512-t+ST7CB9GX5F2xKwhwCf0TAR17uNDiaPTZnVymP9lw0lssa9vG+AFyDZoeIHStU3WowFFwT+ky+er0WVl2yGhA==",
      "requires": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.4.3",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-docblock": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.4.3.tgz",
      "integrity": "sha512-fzdTftThczeSD9nZ3fzA/4KkHtnmllawWrXO69vtI+L9WjEIuXWs4AmyME7lN5hU7dB0sHhuPfcKofRsUb/2Fg==",
      "peer": true,
      "requires": {
        "detect-newline": "^3.0.0"
      }
    },
    "jest-each": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.6.2.tgz",
      "integrity": "sha512-MsrsqA0Ia99cIpABBc3izS1ZYoYfhIy0NNWqPSE0YXbQjwchyt6B1HD2khzyPe1WiJA7hbxXy77ZoUQxn8UlSw==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "jest-util": "^29.6.2",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-environment-node": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.6.2.tgz",
      "integrity": "sha512-YGdFeZ3T9a+/612c5mTQIllvWkddPbYcN2v95ZH24oWMbGA4GGS2XdIF92QMhUhvrjjuQWYgUGW2zawOyH63MQ==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "jest-get-type": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.4.3.tgz",
      "integrity": "sha512-J5Xez4nRRMjk8emnTpWrlkyb9pfRQQanDrvWHhsR1+VUfbwxi30eVcZFlcdGInRibU4G5LwHXpI7IRHU0CY+gg=="
    },
    "jest-haste-map": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.6.2.tgz",
      "integrity": "sha512-+51XleTDAAysvU8rT6AnS1ZJ+WHVNqhj1k6nTvN2PYP+HjU3kqlaKQ1Lnw3NYW3bm2r8vq82X0Z1nDDHZMzHVA==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "fsevents": "^2.3.2",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      }
    },
    "jest-leak-detector": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.6.2.tgz",
      "integrity": "sha512-aNqYhfp5uYEO3tdWMb2bfWv6f0b4I0LOxVRpnRLAeque2uqOVVMLh6khnTcE2qJ5wAKop0HcreM1btoysD6bPQ==",
      "peer": true,
      "requires": {
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-matcher-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.6.2.tgz",
      "integrity": "sha512-4LiAk3hSSobtomeIAzFTe+N8kL6z0JtF3n6I4fg29iIW7tt99R7ZcIFW34QkX+DuVrf+CUe6wuVOpm7ZKFJzZQ==",
      "requires": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-message-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.6.2.tgz",
      "integrity": "sha512-vnIGYEjoPSuRqV8W9t+Wow95SDp6KPX2Uf7EoeG9G99J2OVh7OSwpS4B6J0NfpEIpfkBNHlBZpA2rblEuEFhZQ==",
      "requires": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      }
    },
    "jest-mock": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.6.2.tgz",
      "integrity": "sha512-hoSv3lb3byzdKfwqCuT6uTscan471GUECqgNYykg6ob0yiAw3zYc7OrPnI9Qv8Wwoa4lC7AZ9hyS4AiIx5U2zg==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-util": "^29.6.2"
      }
    },
    "jest-mock-extended": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-3.0.5.tgz",
      "integrity": "sha512-/eHdaNPUAXe7f65gHH5urc8SbRVWjYxBqmCgax2uqOBJy8UUcCBMN1upj1eZ8y/i+IqpyEm4Kq0VKss/GCCTdw==",
      "requires": {
        "ts-essentials": "^7.0.3"
      }
    },
    "jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "peer": true,
      "requires": {}
    },
    "jest-regex-util": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.4.3.tgz",
      "integrity": "sha512-O4FglZaMmWXbGHSQInfXewIsd1LMn9p3ZXB/6r4FOkyhX2/iP/soMG98jGvk/A3HAN78+5VWcBGO0BJAPRh4kg==",
      "peer": true
    },
    "jest-resolve": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.6.2.tgz",
      "integrity": "sha512-G/iQUvZWI5e3SMFssc4ug4dH0aZiZpsDq9o1PtXTV1210Ztyb2+w+ZgQkB3iOiC5SmAEzJBOHWz6Hvrd+QnNPw==",
      "peer": true,
      "requires": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      }
    },
    "jest-resolve-dependencies": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.6.2.tgz",
      "integrity": "sha512-LGqjDWxg2fuQQm7ypDxduLu/m4+4Lb4gczc13v51VMZbVP5tSBILqVx8qfWcsdP8f0G7aIqByIALDB0R93yL+w==",
      "peer": true,
      "requires": {
        "jest-regex-util": "^29.4.3",
        "jest-snapshot": "^29.6.2"
      }
    },
    "jest-runner": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.6.2.tgz",
      "integrity": "sha512-wXOT/a0EspYgfMiYHxwGLPCZfC0c38MivAlb2lMEAlwHINKemrttu1uSbcGbfDV31sFaPWnWJPmb2qXM8pqZ4w==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/environment": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.4.3",
        "jest-environment-node": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-leak-detector": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-resolve": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "jest-worker": "^29.6.2",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      }
    },
    "jest-runtime": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.6.2.tgz",
      "integrity": "sha512-2X9dqK768KufGJyIeLmIzToDmsN0m7Iek8QNxRSI/2+iPFYHF0jTwlO3ftn7gdKd98G/VQw9XJCk77rbTGZnJg==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/globals": "^29.6.2",
        "@jest/source-map": "^29.6.0",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      }
    },
    "jest-snapshot": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.6.2.tgz",
      "integrity": "sha512-1OdjqvqmRdGNvWXr/YZHuyhh5DeaLp1p/F8Tht/MrMw4Kr1Uu/j4lRG+iKl1DAqUJDWxtQBMk41Lnf/JETYBRA==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.6.2",
        "semver": "^7.5.3"
      }
    },
    "jest-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.6.2.tgz",
      "integrity": "sha512-3eX1qb6L88lJNCFlEADKOkjpXJQyZRiavX1INZ4tRnrBVr2COd3RgcTLyUiEXMNBlDU/cgYq6taUS0fExrWW4w==",
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      }
    },
    "jest-validate": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.6.2.tgz",
      "integrity": "sha512-vGz0yMN5fUFRRbpJDPwxMpgSXW1LDKROHfBopAvDcmD6s+B/s8WJrwi+4bfH4SdInBA5C3P3BI19dBtKzx1Arg==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.6.2"
      },
      "dependencies": {
        "camelcase": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
          "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
          "peer": true
        }
      }
    },
    "jest-watcher": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.6.2.tgz",
      "integrity": "sha512-GZitlqkMkhkefjfN/p3SJjrDaxPflqxEAv3/ik10OirZqJGYH5rPiIsgVcfof0Tdqg3shQGdEIxDBx+B4tuLzA==",
      "peer": true,
      "requires": {
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.6.2",
        "string-length": "^4.0.1"
      }
    },
    "jest-worker": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.6.2.tgz",
      "integrity": "sha512-l3ccBOabTdkng8I/ORCkADz4eSMKejTYv1vB/Z83UiubqhC1oQ5Li6dWCyqOIvSifGjUBxuvxvlm6KGK2DtuAQ==",
      "peer": true,
      "requires": {
        "@types/node": "*",
        "jest-util": "^29.6.2",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "dependencies": {
        "supports-color": {
          "version": "8.1.1",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
          "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
          "peer": true,
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "joi": {
      "version": "17.9.2",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.9.2.tgz",
      "integrity": "sha512-Itk/r+V4Dx0V3c7RLFdRh12IOjySm2/WGPMubBT92cQvRfYZhPM2W0hZlctjj72iES8jsRCwp7S/cRmWBnJ4nw==",
      "requires": {
        "@hapi/hoek": "^9.0.0",
        "@hapi/topo": "^5.0.0",
        "@sideway/address": "^4.1.3",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "peer": true,
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      }
    },
    "jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "peer": true
    },
    "json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "peer": true
    },
    "json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg=="
    },
    "jsonwebtoken": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.1.tgz",
      "integrity": "sha512-K8wx7eJ5TPvEjuiVSkv167EVboBDv9PZdDoF7BgeQnBLVvZWW9clr2PsQHVJDTKaEIH5JBIwHujGcHp7GgI2eg==",
      "requires": {
        "jws": "^3.2.2",
        "lodash": "^4.17.21",
        "ms": "^2.1.1",
        "semver": "^7.3.8"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "requires": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "requires": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA=="
    },
    "kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "peer": true
    },
    "leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "peer": true
    },
    "lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "peer": true
    },
    "locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "peer": true,
      "requires": {
        "p-locate": "^4.1.0"
      }
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ=="
    },
    "lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg=="
    },
    "lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "dev": true
    },
    "lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "luxon": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
      "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg=="
    },
    "make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "requires": {
        "semver": "^6.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA=="
        }
      }
    },
    "make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "peer": true,
      "requires": {
        "tmpl": "1.0.5"
      }
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ=="
    },
    "memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "peer": true
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w=="
    },
    "micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "requires": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      }
    },
    "midjourney": {
      "version": "2.7.79",
      "resolved": "https://registry.npmjs.org/midjourney/-/midjourney-2.7.79.tgz",
      "integrity": "sha512-klnOas1htHIIDlw+SyX6/kaT3wNNbbtxJaFpEqnJnw5w++a1WfbjFhgiD4QWggbSvsACbJukV6LWsvgyvf7WOQ==",
      "requires": {
        "@huggingface/inference": "^2.5.0",
        "isomorphic-ws": "^5.0.0",
        "mime": "^3.0.0",
        "p-queue": "^6.6.2",
        "snowyflake": "^2.0.0",
        "throat": "^6.0.2",
        "tslib": "^2.5.0",
        "websocket-ts": "^1.1.1",
        "ws": "^8.13.0"
      },
      "dependencies": {
        "mime": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
          "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A=="
        }
      }
    },
    "mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
    },
    "mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
    },
    "mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "requires": {
        "mime-db": "1.52.0"
      }
    },
    "mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "peer": true
    },
    "minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ=="
    },
    "minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "requires": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        }
      }
    },
    "mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw=="
    },
    "mongodb": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.7.0.tgz",
      "integrity": "sha512-zm82Bq33QbqtxDf58fLWBwTjARK3NSvKYjyz997KSy6hpat0prjeX/kxjbPVyZY60XYPDNETaHkHJI2UCzSLuw==",
      "requires": {
        "bson": "^5.4.0",
        "mongodb-connection-string-url": "^2.6.0",
        "saslprep": "^1.0.3",
        "socks": "^2.7.1"
      }
    },
    "mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "requires": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      },
      "dependencies": {
        "tr46": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
          "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
          "requires": {
            "punycode": "^2.1.1"
          }
        },
        "webidl-conversions": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
          "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g=="
        },
        "whatwg-url": {
          "version": "11.0.0",
          "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
          "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
          "requires": {
            "tr46": "^3.0.0",
            "webidl-conversions": "^7.0.0"
          }
        }
      }
    },
    "mongoose": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-7.4.1.tgz",
      "integrity": "sha512-o3E5KHHiHdaiwCJG3+9r70sncRKki71Ktf/TfXdW6myu+53rtZ56uLl5ylkQiCf60V3COJuOeekcxXVsjQ7cBA==",
      "requires": {
        "bson": "^5.4.0",
        "kareem": "2.5.1",
        "mongodb": "5.7.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew=="
    },
    "mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "requires": {
        "debug": "4.x"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "msgpackr": {
      "version": "1.9.6",
      "resolved": "https://registry.npmjs.org/msgpackr/-/msgpackr-1.9.6.tgz",
      "integrity": "sha512-50rmb6+ZWvEm0vJn8R8CwI1Eavss3h5rgtKrcdUal3EkZcpqw82+xsmc7RoHb8fYB5V4EOU2NDaOitDAdO0t+w==",
      "requires": {
        "msgpackr-extract": "^3.0.2"
      }
    },
    "msgpackr-extract": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/msgpackr-extract/-/msgpackr-extract-3.0.2.tgz",
      "integrity": "sha512-SdzXp4kD/Qf8agZ9+iTu6eql0m3kWm1A2y1hkpTeVNENutaB0BwHlSvAIaMxwntmRUAUjon2V4L8Z/njd0Ct8A==",
      "optional": true,
      "requires": {
        "@msgpackr-extract/msgpackr-extract-darwin-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-darwin-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-win32-x64": "3.0.2",
        "node-gyp-build-optional-packages": "5.0.7"
      }
    },
    "natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "peer": true
    },
    "negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
    },
    "node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA=="
    },
    "node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-C/fGU2E8ToujUivIO0H+tpQ6HWo4eEmchoPIoXtxCrVghxdKq+QOHqEZW7tuP3KlV3bC8FRMO5nMCC7Zm1VP6g==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "node-gyp-build-optional-packages": {
      "version": "5.0.7",
      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.0.7.tgz",
      "integrity": "sha512-YlCCc6Wffkx0kHkmam79GKvDQ6x+QZkMjFGrIMxgFNILFvGSbCp2fCBC55pGTT9gVaz8Na5CLmxt/urtzRv36w==",
      "optional": true
    },
    "node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "peer": true
    },
    "node-releases": {
      "version": "2.0.13",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.13.tgz",
      "integrity": "sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==",
      "peer": true
    },
    "nodemon": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz",
      "integrity": "sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==",
      "dev": true,
      "requires": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.7",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
          "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
          "dev": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
          "dev": true
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
          "dev": true
        },
        "semver": {
          "version": "5.7.2",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
          "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
          "dev": true
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "dev": true,
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "requires": {
        "abbrev": "1"
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="
    },
    "npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "peer": true,
      "requires": {
        "path-key": "^3.0.0"
      }
    },
    "npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "requires": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg=="
    },
    "object-inspect": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g=="
    },
    "on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA=="
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "requires": {
        "wrappy": "1"
      }
    },
    "onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "peer": true,
      "requires": {
        "mimic-fn": "^2.1.0"
      }
    },
    "openai": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-3.3.0.tgz",
      "integrity": "sha512-uqxI/Au+aPRnsaQRe8CojU0eCR7I0mBiKjD3sNMzY6DaC1ZVrc85u98mtJW6voDug8fgGN+DIZmTDxTthxb7dQ==",
      "requires": {
        "axios": "^0.26.0",
        "form-data": "^4.0.0"
      },
      "dependencies": {
        "axios": {
          "version": "0.26.1",
          "resolved": "https://registry.npmjs.org/axios/-/axios-0.26.1.tgz",
          "integrity": "sha512-fPwcX4EvnSHuInCMItEhAGnaSEXRBjtzh9fOtsE6E1G6p7vl7edEeZe11QHf18+6+9gR5PbKV/sGKNaD8YaMeA==",
          "requires": {
            "follow-redirects": "^1.14.8"
          }
        },
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow=="
    },
    "p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "peer": true,
      "requires": {
        "yocto-queue": "^0.1.0"
      }
    },
    "p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "peer": true,
      "requires": {
        "p-limit": "^2.2.0"
      },
      "dependencies": {
        "p-limit": {
          "version": "2.3.0",
          "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
          "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
          "peer": true,
          "requires": {
            "p-try": "^2.0.0"
          }
        }
      }
    },
    "p-queue": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/p-queue/-/p-queue-6.6.2.tgz",
      "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
      "requires": {
        "eventemitter3": "^4.0.4",
        "p-timeout": "^3.2.0"
      }
    },
    "p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "requires": {
        "p-finally": "^1.0.0"
      }
    },
    "p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "peer": true
    },
    "parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      }
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "passport": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
      "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
      "requires": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1",
        "utils-merge": "^1.0.1"
      }
    },
    "passport-jwt": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.1.tgz",
      "integrity": "sha512-UCKMDYhNuGOBE9/9Ycuoyh7vP6jpeTp/+sfMJl7nLff/t6dps+iaeE0hhNkKN8/HZHcJ7lCdOyDxHdDoxoSvdQ==",
      "requires": {
        "jsonwebtoken": "^9.0.0",
        "passport-strategy": "^1.0.0"
      }
    },
    "passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha512-9wCE6qKznvf9mQYYbgJ3sVOHmCWoUNMVFoZzNoznmISbhnNNPhN9xfY3sLmScHMetEJeoY7CXwfhCe7argfQow==",
      "requires": {
        "passport-strategy": "1.x.x"
      }
    },
    "passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha512-CB97UUvDKJde2V0KDWWB3lyf6PC3FaZP7YxZ2G8OAtn9p4HI9j9JLP9qjOGZFvyl8uwNT8qM+hGnz/n16NI7oA=="
    },
    "path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "peer": true
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg=="
    },
    "path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "peer": true
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "peer": true
    },
    "path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha512-KG8UEiEVkR3wGEb4m5yZkVCzigAD+cVEJck2CzYZO37ZGJfctvVptVO192MwrtPhzONn6go8ylnOdMhKqi4nfg=="
    },
    "picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "peer": true
    },
    "picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA=="
    },
    "pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "peer": true
    },
    "pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "peer": true,
      "requires": {
        "find-up": "^4.0.0"
      }
    },
    "pretty-format": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.6.2.tgz",
      "integrity": "sha512-1q0oC8eRveTg5nnBEWMXAU2qpv65Gnuf2eCQzSjxpWFkPaPARwqZZDGuNE0zPAZfTCHzIk3A8dIjwlQKKLphyg==",
      "requires": {
        "@jest/schemas": "^29.6.0",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
          "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA=="
        }
      }
    },
    "prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "peer": true,
      "requires": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      }
    },
    "proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "requires": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      }
    },
    "proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA=="
    },
    "pure-rand": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.0.2.tgz",
      "integrity": "sha512-6Yg0ekpKICSjPswYOuC5sku/TSWaRYlA0qsXqJgM/d/4pLPHPuTxK7Nbf7jFKzAeedUhR8C7K9Uv63FBsSo8xQ==",
      "peer": true
    },
    "qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "requires": {
        "side-channel": "^1.0.4"
      }
    },
    "random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ=="
    },
    "range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
    },
    "raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "requires": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      }
    },
    "react-is": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
    },
    "readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "requires": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "redis": {
      "version": "4.6.7",
      "resolved": "https://registry.npmjs.org/redis/-/redis-4.6.7.tgz",
      "integrity": "sha512-KrkuNJNpCwRm5vFJh0tteMxW8SaUzkm5fBH7eL5hd/D0fAkzvapxbfGPP/r+4JAXdQuX7nebsBkBqA2RHB7Usw==",
      "requires": {
        "@redis/bloom": "1.2.0",
        "@redis/client": "1.5.8",
        "@redis/graph": "1.1.0",
        "@redis/json": "1.0.4",
        "@redis/search": "1.1.3",
        "@redis/time-series": "1.0.4"
      }
    },
    "redis-errors": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w=="
    },
    "redis-parser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
      "requires": {
        "redis-errors": "^1.0.0"
      }
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "peer": true
    },
    "resolve": {
      "version": "1.22.2",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.2.tgz",
      "integrity": "sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==",
      "peer": true,
      "requires": {
        "is-core-module": "^2.11.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "peer": true,
      "requires": {
        "resolve-from": "^5.0.0"
      }
    },
    "resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "peer": true
    },
    "resolve.exports": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
      "integrity": "sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==",
      "peer": true
    },
    "rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "requires": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "requires": {
        "lru-cache": "^6.0.0"
      }
    },
    "send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "requires": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "requires": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      }
    },
    "set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "peer": true,
      "requires": {
        "shebang-regex": "^3.0.0"
      }
    },
    "shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "peer": true
    },
    "side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "requires": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      }
    },
    "sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "requires": {
        "semver": "~7.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
          "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
          "dev": true
        }
      }
    },
    "sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "peer": true
    },
    "slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q=="
    },
    "smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg=="
    },
    "snowyflake": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/snowyflake/-/snowyflake-2.0.0.tgz",
      "integrity": "sha512-BxeqV0KJxJASu6EBJGUkX194Zhh37AEa0ow/JRK39icWbLTG9Wl/7LAL6a/ZMSjNm4O9pZk6QoLcWP7f/YKmtA=="
    },
    "socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "requires": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "peer": true
    },
    "source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "peer": true,
      "requires": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "requires": {
        "memory-pager": "^1.0.2"
      }
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "peer": true
    },
    "stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "requires": {
        "escape-string-regexp": "^2.0.0"
      }
    },
    "standard-as-callback": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A=="
    },
    "statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
    },
    "string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "requires": {
        "safe-buffer": "~5.2.0"
      }
    },
    "string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "peer": true,
      "requires": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      }
    },
    "string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      }
    },
    "strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "requires": {
        "ansi-regex": "^5.0.1"
      }
    },
    "strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "peer": true
    },
    "strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "peer": true
    },
    "strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "peer": true
    },
    "superagent": {
      "version": "8.0.9",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.0.9.tgz",
      "integrity": "sha512-4C7Bh5pyHTvU33KpZgwrNKh/VQnvgtCSqPRfJAUdmrtSYePVzVg4E4OzsrbkhJj9O7SO6Bnv75K/F8XVZT8YHA==",
      "dev": true,
      "requires": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^2.1.2",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0",
        "semver": "^7.3.8"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "dev": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "dev": true,
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        },
        "mime": {
          "version": "2.6.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
          "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
          "dev": true
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "dev": true
        }
      }
    },
    "supertest": {
      "version": "6.3.3",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-6.3.3.tgz",
      "integrity": "sha512-EMCG6G8gDu5qEqRQ3JjjPs6+FYT1a7Hv5ApHvtSghmOFJYtsU5S+pSb6Y2EUeCEY3CmEL3mmQ8YWlPOzQomabA==",
      "dev": true,
      "requires": {
        "methods": "^1.1.2",
        "superagent": "^8.0.5"
      }
    },
    "supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "requires": {
        "has-flag": "^4.0.0"
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "peer": true
    },
    "tar": {
      "version": "6.1.15",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.15.tgz",
      "integrity": "sha512-/zKt9UyngnxIT/EAGYuxaMYgOIJiP81ab9ZfkILq4oNLPFX50qyYmu7jRj9qeXoxmJHjGlbH0+cm2uy1WCs10A==",
      "requires": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      }
    },
    "test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "peer": true,
      "requires": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      }
    },
    "throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ=="
    },
    "tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "peer": true
    },
    "to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "peer": true
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "requires": {
        "nopt": "~1.0.10"
      },
      "dependencies": {
        "nopt": {
          "version": "1.0.10",
          "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
          "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
          "dev": true,
          "requires": {
            "abbrev": "1"
          }
        }
      }
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "ts-essentials": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/ts-essentials/-/ts-essentials-7.0.3.tgz",
      "integrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ==",
      "requires": {}
    },
    "ts-jest": {
      "version": "29.1.1",
      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.1.1.tgz",
      "integrity": "sha512-D6xjnnbP17cC85nliwGiL+tpoKN0StpgE0TeOjXQTU6MVCfsB4v7aW05CgQ/1OywGb0x/oy9hHFnN+sczTiRaA==",
      "dev": true,
      "requires": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^29.0.0",
        "json5": "^2.2.3",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "^7.5.3",
        "yargs-parser": "^21.0.1"
      }
    },
    "ts-node": {
      "version": "10.9.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
      "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
      "requires": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      }
    },
    "tslib": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.1.tgz",
      "integrity": "sha512-t0hLfiEKfMUoqhG+U1oid7Pva4bbDPHYfJNiB7BiIjRkj1pyC++4N3huJfqY6aRH6VTB0rvtzQwjM4K6qpfOig=="
    },
    "type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "peer": true
    },
    "type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "peer": true
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "typescript": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.1.6.tgz",
      "integrity": "sha512-zaWCozRZ6DLEWAWFrVDz1H6FVXzUSfTy5FUMWsQlU8Ym5JP9eO4xkTIROFCQvhQf61z6O/G6ugw3SgAnvvm+HA=="
    },
    "uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "requires": {
        "random-bytes": "~1.0.0"
      }
    },
    "undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ=="
    },
    "update-browserslist-db": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz",
      "integrity": "sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==",
      "peer": true,
      "requires": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      }
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA=="
    },
    "uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg=="
    },
    "v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg=="
    },
    "v8-to-istanbul": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.1.0.tgz",
      "integrity": "sha512-6z3GW9x8G1gd+JIIgQQQxXuiJtCXeAjp6RaPEPLv62mH3iPHPxV6W3robxtCzNErRo6ZwTmzWhsbNvjyEBKzKA==",
      "peer": true,
      "requires": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0"
      },
      "dependencies": {
        "convert-source-map": {
          "version": "1.9.0",
          "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
          "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
          "peer": true
        }
      }
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg=="
    },
    "walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "peer": true,
      "requires": {
        "makeerror": "1.0.12"
      }
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "websocket-ts": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/websocket-ts/-/websocket-ts-1.1.1.tgz",
      "integrity": "sha512-rm+S60J74Ckw5iizzgID12ju+OfaHAa6dhXhULIOrXkl0e05RzxfY42/vMStpz5jWL3iz9mkyjPcFUY1IgI0fw=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "peer": true,
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "requires": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "peer": true,
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "peer": true,
      "requires": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      }
    },
    "ws": {
      "version": "8.13.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.13.0.tgz",
      "integrity": "sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==",
      "requires": {}
    },
    "y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "peer": true
    },
    "yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "peer": true,
      "requires": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      }
    },
    "yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw=="
    },
    "yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q=="
    },
    "yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "peer": true
    }
  }
}


--- File: package.json ---
{
  "name": "bodyone-backend-node",
  "version": "1.0.0",
  "description": "Backend for Ai Apis",
  "main": "index.js",
  "scripts": {
    "start": "npx ts-node src/app.ts",
    "test": "jest --watchAll --verbose --runInBand"
  },
  "keywords": [],
  "author": "Andy Lewis",
  "license": "ISC",
  "dependencies": {
    "@types/supertest": "^2.0.12",
    "axios": "^1.4.0",
    "bcrypt": "^5.1.0",
    "bcryptjs": "^2.4.3",
    "bull": "^4.10.4",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "express-session": "~1.17.0",
    "helmet": "^7.0.0",
    "ioredis": "^5.3.2",
    "jest-mock-extended": "^3.0.4",
    "joi": "^17.9.2",
    "jsonwebtoken": "^9.0.0",
    "lodash": "^4.17.21",
    "midjourney": "^2.2.31",
    "mongodb": "^5.5.0",
    "mongoose": "^7.1.1",
    "node-fetch": "^2.6.11",
    "openai": "^3.3.0",
    "passport": "^0.6.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "redis": "^4.6.6",
    "ts-node": "^10.9.1",
    "typescript": "^5.0.4"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.0",
    "@types/bcryptjs": "^2.4.2",
    "@types/cors": "^2.8.13",
    "@types/express-session": "~1.17.0",
    "@types/jest": "^29.5.1",
    "@types/jsonwebtoken": "^9.0.2",
    "@types/mocha": "^10.0.1",
    "@types/mongoose": "^5.11.97",
    "@types/node": "^20.1.7",
    "@types/node-fetch": "^2.6.4",
    "@types/passport": "^1.0.12",
    "@types/passport-jwt": "^3.0.8",
    "@types/passport-local": "^1.0.35",
    "dotenv": "^16.0.3",
    "nodemon": "^2.0.22",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.0"
  },
  "directories": {
    "test": "tests"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AJLewis/bodyone-backend-node.git"
  },
  "bugs": {
    "url": "https://github.com/AJLewis/bodyone-backend-node/issues"
  },
  "homepage": "https://github.com/AJLewis/bodyone-backend-node#readme"
}


--- File: project_structure.txt ---
--- Folder Structure ---
[.git]
    ├── COMMIT_EDITMSG
    ├── FETCH_HEAD
    ├── HEAD
    ├── ORIG_HEAD
    ├── config
    ├── description
    ├── [hooks]
        ├── applypatch-msg.sample
        ├── commit-msg.sample
        ├── fsmonitor-watchman.sample
        ├── post-update.sample
        ├── pre-applypatch.sample
        ├── pre-commit.sample
        ├── pre-merge-commit.sample
        ├── pre-push.sample
        ├── pre-rebase.sample
        ├── pre-receive.sample
        ├── prepare-commit-msg.sample
        └── update.sample
    ├── index
    ├── [info]
        └── exclude
    ├── [objects]
        ├── [13]
            └── fb5792205059bb7bfe0c7dd09fcc316b9cf0a3
        ├── [55]
            └── a1cbc146410e4ded134a70caf1b814276c3be3
        ├── [78]
            └── d64083d469249a1d4a85edbef0e5c93a8541a0
        ├── [cf]
            ├── d47797da57a7ce1a1c4a4f9e10f0678e9d085a
            └── dca8a458d4577dd687e079fc13f6af8c44d425
        ├── [info]
        └── [pack]
            ├── pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.idx
            └── pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.pack
    ├── packed-refs
    └── [refs]
        ├── [heads]
            └── main
        ├── [remotes]
            └── [origin]
                ├── HEAD
                └── main
        └── [tags]
.gitignore
README.md
[node_modules]
package-lock.json
package.json
[src]
    ├── app.ts
    ├── [config]
        ├── db.js
        └── passport.ts
    ├── [constants]
        └── openai-models.constant.ts
    ├── [controllers]
        ├── [external]
            ├── [bard]
                └── chat.ts
            ├── [openai]
                ├── chat.ts
                ├── completion.ts
                └── image.ts
            └── [stable-diffusion]
                ├── fetch_from_queue.ts
                ├── text_to_image.ts
                └── text_to_video.ts
        └── [internal]
            └── [auth]
                └── authentication.ts
    ├── [middlewares]
    ├── [models]
        ├── MealPlan.model.ts
        ├── ProductImage.model.ts
        ├── Recipe.model.ts
        └── User.ts
    └── [utils]
tsconfig.json

--- File Contents ---

--- File: .git/COMMIT_EDITMSG ---
Initial setup including server


--- File: .git/FETCH_HEAD ---
55a1cbc146410e4ded134a70caf1b814276c3be3		branch 'main' of https://github.com/AJLewis/bodyone-backend-node


--- File: .git/HEAD ---
ref: refs/heads/main


--- File: .git/ORIG_HEAD ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .git/config ---
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/AJLewis/bodyone-backend-node.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main


--- File: .git/description ---
Unnamed repository; edit this file 'description' to name the repository.


--- File: .git/hooks/applypatch-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


--- File: .git/hooks/commit-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


--- File: .git/hooks/fsmonitor-watchman.sample ---
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


--- File: .git/hooks/post-update.sample ---
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


--- File: .git/hooks/pre-applypatch.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


--- File: .git/hooks/pre-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


--- File: .git/hooks/pre-merge-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


--- File: .git/hooks/pre-push.sample ---
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


--- File: .git/hooks/pre-rebase.sample ---
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


--- File: .git/hooks/pre-receive.sample ---
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


--- File: .git/hooks/prepare-commit-msg.sample ---
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


--- File: .git/hooks/update.sample ---
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


--- File: .git/index ---
DIRC      d�XzE�zd�XzE�z  �,  ��  �     �ƻ��8�i��Q-��<S�} 
.gitignore        d�XzH{�d�XzH{�  �-  ��  �      ��n1(K�C�V;WX%�L�� 	README.md d�Z�*�d�Z�*�  琫  ��  �    ��W� PY�{�}П�1k�� package-lock.json d�Z�+�;d�Z�+�;  ��  ��  �     Nx�@��i$�J������:�A� package.json      d�Z�-��d�Z�-��  �m  ��  �      ���w��W��JO��g��Z 	server.js TREE    5 0
�ܨ�X�W}և�y����D�%A��6�mT�������\=D

--- File: .git/info/exclude ---
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


--- File: .git/objects/13/fb5792205059bb7bfe0c7dd09fcc316b9cf0a3 ---
x�i��ڶ X��W����`�"��g����4�u3�D��ʼ����e��.Y�����Ľ:`�~�9���?0�=������_��㇧�Ə�������ن�x�n��?�72#�-߃_��D�D�u|�>X�!]��oGF�Z���'Qj� LŬ��	`���&oP���[�wK3��^͏뷫��X��i�ݓ�;��A��ޟ`M�߀������������iX\ۏ�w������b��5�� �~������w�;�' ��������	�Q���]_O#F��U�/����� �+�~�v{�𲾓:|�c��"Hd�V�D�^���?��|�������gbV�%����0#+)!�������|t��۵)�� F�Y�U�	�u?['{ۢϔZO�Η*i��Z�DPX8�&�Ҟ�T��+�QN\��o�����n$��|8����o_�b����_��!�\���k�b��@ <rHM���h�χ�׷��w孟��;�Y���3kD�)��'���. r}� ,ٻZ��o��5�/�tf$�6�y��,��=����� ��Ȥ c�*��^Q�Q����=3����ΐ��]�n�le2�����L����P���b䷙v"3j��$5֣rZ-����L{򌚮��� X=���zX8��>|�@�-���|�S�~� �)�;~'�>`��?~�y��B 1�%O�ʖ���R�to��ǖ;��X�[�RL��;Q���v�!�#�c�C!-�S�.��a��鱏J�B8F��]G%�͏4r^�	h�;��.���!z�>j���2M�)�n��יĮ�TzN���
��0ߐ�p���Y�F{�eB͘�1F���193�S�2�%�[��8�M������Z{���������7@h?��J��7/R��WU�h֞1&�wv�)�� ���B����3m��cEe<�'�:J*br�E$�(�Tǻ����^�TDy;�a�:���a?@�Mb���&X
���4#H^�%Tj���ƫ?Ä�?_��8������((m�--�4�'�	7F��%�bv�-���wmw�fyk5�#׭�L��DĮ<ԔBꈩ��Jn��?_��X̵\�f3�7�hzu�ץC�`�~b)�_�O�]����ϴ��}�Oc��������G_�_�n���3�ā���W��rIs��QC{O��~��4gJ���@�����S��kw_,�Cg}�:'�\��¶{}�%&��nN����R>ݓ�g�
�5v_Դ��W�5�9\z�Y�����d�������}㒦��!��~�0ޣ��l���;�$YϹ�[��lH�&=6e�i�qUlؓ^{��C�0�9Ҋ�]Hg�-%�Xs�"($�VG��!��گ�2Ѿ"�)���M`��n��r�����i�Q���E���[���h'�V�&*�q�+\�}�g�1�#��5^r�}]nÍ���G���ԍ)�+Z҉I�!��ڄ?�NGSr9��]���ݍ3������ldS*�-��Pnw�3��RtQ 35�8R������߽�� [�������̭\�B-s��QC{��0��w���Բ��xq���<����xG�Ǘ+��wIl9��~�a�<ЭMUn�����f"dYu�s����������[�@�'��{��ǭUc�� !���7@k�G�#]� �B�YP�$�����l『�|�:dg�"�s��q;u�&�hN�ܴg������ZV���`g���s`+��(�Q|.6�[��h�	8D�Oj��������g^,��bAk�|�[��>�7�;$d��˰�W�Ȁ^���~��OڝY��� �����f"��ބn8��$�'������.:2]Q�D�����(�h�7܊�~��F�R~%���MG�rM��'5u{��4\���pS\ԋx2�)r��zg�%w��fy�)�3�;}o�0��*�h|\��N����Rï7\��(�f��rV<�`H��{Y��N�PG������Ȣ#��q�]u/���Dr�f�Zl&{6�����56v]u3Tv��+4) ��`��.��'�GY�q_�k��2��M��"��+# ��v#���xbF�V���(�M6H;�u'�(Xw��(>cr}�w�%��~L�dmΤ�؊�d�&�A��c���>_Z�փ8*1�ŉ�8�YuT����/���c�g)�xq.�$E�}�C	�Zʡ����?�H9K?��X�G�Dq{FH��݇^S����	04�����E(��ʹrb�d;^kBJwkm��)�@���!�'9_�6��8G92��N�U��d��:Ia�*�6��j���a��&ӀF 6�bRo� ����҃o\��m����LRǏ-~����:�~!4��F�ѧS}o&�}F�@�6���0X�~x�L˳��9vݮC�w��,�y���?7R�H6����@�o�U�  ������z�ԯ����E <�oQ�GQ���?� {c����X��� л�O_��90i�E6��G����r�j����l25�َ��3�FzEP�D��F(*�]9�\��{X���g婣�#5�>��JWf�v��S�B�j0{�9��9��Q �iJ, <2��-F���'9���0���\c����` ���d����5ݣb��8a�e�Z����nv�i�ވ=Q3]+[Ѿ�b�v�位8��z��Kj�z�?J�Ns����̾��ʆ�J#� 'J&*lz�DH���ڗ���}y�vF�r�	Dk��Ha��I�1C��g�@�"[�	%X�@M��·����jMu�C�]�֞��t�����C|���W_� \4�3F{T�� ���G�=�!�!��P�|���Y�JĠ�G}-j��S8��I?��h=�]���g�X�s���W;>9	��*���H�d����Eߚ~�;kq�2��O��WA{�e��nv�)ʮPڮ�M=X�mMձu�F�-�Ne#֒���G�EWn�YZdl�-T��!�d췅���4��uR��5E��[� �a� ����C�i0BtA	���W�#d�8��,`D�g�g]p}%��[�>^Mb}Fs=96�䘪j��ā����#��Dj��܃Q���M�j��j�E�-�J�n2��T�����Rd��,AYRߗ���!�͖�أY�0�c.�\b�j�,u�H*]��D��[���~�Xo��kTG?>�/��ݹ��1��X�2������wޫ����@e�,2[�����!�����ڛ�C.�tZ�|ҩZۜ���dV�Y8�����n�q�����6?��������{����?Oq޻w����/�
C���ͷ��xq4>jh�Q��Q���\�F�H���e�CU>'�h֋��Hm�8���"o��)�qN@��������x���4S���} oBxV\wFf��C��V {}��y�3��=�f�QR"���`�>��&��CI7X��1��w�U��\XU�V̷��w�#��H�ď�0��)�MEi�τӖ���ҏ��B<�}�n�[Pپ�
6�LsQ��O??�t�����V)��]�p��V�,��K��!�V�I��.Bz�����t���þ6����ً���l�L�v+�t�ks+�>V�aP:{`�s󵯲�F76<<�n�^P�[��w)ߑ��:�����kX�B�]y�ގ���/�>���E����є�Tm�s�4�=�X��D�����d��|�讒y�>��,���
{��~G�!�o����-�;�Xz��7���9;�$��k�,��@rE���Cs"�ə����~)$�������t��Dv�!�؍�&�L�}Ė�)I�����>i~��+����R�=����QfZ�Ҥ>Md�2��s_̶r�O��+�.{X��@̥bMG��n����$�U��T�x�-����-���5�%~�̎<���J���q����1A:�>W���F�����X����-|t ������ ײ80�Ӯ�6�brr��#��d9�Yi*�1��Z�]Ώ�G����ÓgH�L�}�B�s��٦��z{����w{{L�Vc2�;'��|F�}V��q��Cd6\�r5wT�(6)w�QV����h�UޱM\|���xcs�	�z��t?`��p��X��7�C*��`�H�;?��D����΁>������}�dr{<� �31�|&�kr��w�O�ݯn\�����m��f���
�
D�[G�ϩ���hZ�`yך�+�=F&�@C�����yl�t�;Z:4=rV���P$�3�q��,��<.:�2X�Me����W��ۿn}L~�`������H�&(�����L��1��Y�������m��%��#�^����X�j-����]��ǳS'g;_��Vl�Y�d�jL����F�yI�������f"���8�yϙ4WM�y�胮:X.�I�#E.G[~Lv		�P)�]�X��7��lHw�p�`������]{:Tt�~p��p&�$}���O���s���3��?�ڰ�+�G�8�8�M�8$Q�[��)a�< P��_k�Ӥf�SL���#u����6�t�����'�r�������`��6�٪���s�TC�8\�f��=;N���z�s�~,���@��V��](i�6pBůC#q�Q�	��� ��V!o��,��omEe�je��B�?��}p����OMC�c!�l4�WD�폇F��v>�;�a�_,Q/�qL�֎��Q����������������=dq���[\0�I����F>���(��i��xy*��)�+�ە�>��L/��JZ�ֱ�B��iG���+�'�.E�_G�A�(�y��ݹ�[�+T���j�j`9n���p�H��o]�Nɵ����y�@��wSf9a�C0�,b#R��D��Њ��kb�ICV�Н���-��X��ob<@�\���}U ���8�\���Sj6�q�,>�]� ��;m�.b������H��x�LyO(@��V�02u�p�,X'e��N�y�����e�e��4x'R�r����c ��7�5 W���K�B/{ӂp�\R:(�8�G�]k��XH
�2�h�G{K��M�8�sl��kW]t��=�	۔�Ȃ�o��蠏F���59!��=�:~*�k���~e�+����ޣ��p��(N?�g�`bj�lf�������8�f�֜0�,�׻)9�IZ)�R4`���*Gd2v�x��L�Ј}� ���l�/g �8�}��ʣm߸Kt9�H�_�����8�>�y��ϰܓ<�s�>�1�T��1 r~��P
��%���<��� �̗�"���7e�p�I��{	w@���Ow��y�{0�p�PW	��><�]��kD&�A/�>�h���  �5���_2Z�㯇A���:���暇UJr�H�s��g��X��YG��u��&A�N���ڮ�[�0T|	�W��);������3ټEI�/�(��Jr>��~Ȭ���O|ȣ~]p��������
W��nu(�uQb9�GM��>�:S�:9	���s�7{`Ra���w��?��3����0P����i<�;M���f��v<S$�l��N	z�;���ᖶ��T�L��a��*�͒�RzYV��,%ו6
H��0����
�ꉿ&o_��-7��=�/2�OJ� ;�\��:��� �N�s�*d��58h�+j���C0J63^�C����v����:�7K��_�U�H�U�6Y-������S��^5(��%�X�ld���0P��	��x#U�m�ڿ1ڠ�(���G)��j�v�2��#rʦ�!u)�(P��بՐ�+U��n���L��n�0�nV��-���)�H;i����S��y���(I��(u7�gH�5E7��i7�u�O �E���TK�,(H�[\�B4vƩblI}5���ę3+:V�Y[J�K+�Rw�E3��M���Sr|�?��vX����G������#�T��Ɏ�-?��}M�p-��uY���$��J��Ę����\���W,m;ي���1G��GO*���l!̋��Xq����6u%�}<.8�
��H{��t���a��P� �4ʀV���Z4#ş�8Ɓ�x�398+���j��r��pk9�~�7��e�`�v����PW��T3����h��H^!�7I���i;���+jBM�ץ��l3*�m������n�@1���I?�=�p���bc�p�)�q�`���K�φ���i_vz�?��{q�/S�R�b��O��U�t��[X�P�`eMO�<�EiO��k|���:�d*���ꇛ��5D���_ ��
�]y�7�A9tog��t�Z�t{�N�Y��O5R:]m慼=�k�K�G�:�,�����r'=`lΜ��`v:,9�\����bx���JB���z7� ��_r��~��/���*��I����H=P� � A xc; �WO��0_ �SG�s&�h�4��[g%rV�wotξ��-�~�f�wq.�g��~,�~x�S�>_����)U���H�\6�q�9�>Er���zG�@6�-.Ñ*�f�a�*B�5ˤ���sI�]�-����J���t��Xw�TYTXQ��7H�9U�")i���S���xP&���+ v��q��|V�F���oǥ�����!�7O����k��a���x���D !��?�c���Jțn��f �屲)r<ϖ���g����Jt�˘>��a:s��bǣ�ۭ�#�֑�A��Y\M�#j��-k�<x���Н5��A�X�H��,�PO�r�-�[u�7�n@�R�	=���������=<���X�*J��\ET������.����r�+��$�,Ϙ���߶� �%(+��߳ҡ�g,*�8k�����#�xR+fx�=DZpA/�--u��~�!�B�n�[�6�t�)WJd�ڒ�:��_����},D�����i+����y���i*�W�����P㿁�&B�eq-���SP�O�Z�?�V$�s��%�:�b9�5ʚ���N����.�,�	S��c��cEq
�31����a�� yW��e�o\�vS篈q�~��p?�����@8��8��9Y��da�2EZG���Jy�x�8��s���di�#���tī�̍�Y$�����9m��������%���{F�G��;���I��Ou�O	�o��Y�6ぢ�i5��iw=��Xފ�ce ���<qMr/N�#b�
~��{��;�Dq����\Q�94v_艇��W��Y�Ƹ�����}j��7M�B�tT)�I66!k:%A�afY;��2r��c�3�w�Z��N7�	�:�|cƔ���iM�eo��~K7	+7�i.�����������x����K��u9W�~�E�_��{�j���-�]O�g�?'�\�0��OxxbӶ9�Tc�������m)[cd��D�Y���-&���.1nS���\q�>$��c�&�[~7�X}ז��AM�vo��x��/�z��;}��d�Z2����<����u8���]�ӆ4����Ub`k�k����:x=��x��?u�hj�np�J�} -���MD�av�M˼2����.=�� 6��a�즃�CHN�����(Q��j��L�6�q��@D�nc*����4������]�h,�7���?�߯ؖ�}�k=t��}F������d��9C"|^�^k��{Ц��<���n���C<G�hJ��.^���I$�귷��U*�#�p�j%2�o:H�6c.�l�q������[�<R�����n��#�����PBs���5Nϗ��Հ�m$��]����Jf�	kv'�,�E�#=��R���0��q�^�Hod�̠�x��L�[�#]6��:4�O�U7��(o��p�AS�r�PZ�tIaCl��ۣ�na�5o��-ˋÁ��*��+�o������%� N���.���4d��:N�n�Tr��-�K�`������.��|ݟP��^Q��+3tA#8J~����N+lz�ե/�-5,��y�_�����/�9��s�Φ��{|��X��@�yg�"�v��#o�1�C�8u��1�V�>hp���!�Ƙ|����w�s�gjU麽Vڊ�1�-'�p�'�3�f��Bs�U��\Lg�~g�<��ǧ������G����3t⭱芆���-�,7��4���Vz�k����.�?~�߳颟�1�	\F�RK���	RR��$p{}�O��i���R���-�.Em.^Ϥ�4� �Yo>��Yz��Y@P&�6�zp��1�W?q_W�Y~p&�fߢi0�{�4������2�����\�
�Y��ok�|q��ǽė���S��a���S����S�y[AV�x���T�=�0g�2��˴e���2��H�+v4��vz�o@���<�E�]2�l7���	�)����uEqc&��۹4/���,Z�RIr��s|j�Ո;�`(T�����
�_�z�J<�eji�E4!����9���c�x�G�1�uC'�u�$�ǅ���>)�~��?�o6��9��3��(t͉ T���о'�<s���0���$<7�vwBl�yMc�o3,9����UNL~��v��$2pC�r$л�;	f{���+�!1ΜϢ�\����b�=e؃�B��5E�$����X������4-6��:MZ�vl����!f�H��8�T���k;d�8�v,۽cQ6��>�m�g����vY�N�V��ַ��r�Ò�.����{S�����/`E����	i��Є�Q& �B��Φ�Kj��1�������*�׭�T�fR!��c���%�Ї��cIv�M�:O��ω�Mю��N`
��c�W�	�'�-�xMs��hw����9�w�؂R�z8��ۙ��j!&��p���-cˬ<��� ��S��=b#��P8R*8ƻ�N�����$�F^����g�����P���%ЃP��X�35�6�\��RE�q�O��확��*"Q�h�·R�L����F�V�h�::���l89�B���e�jx@z�����q�'���iǠ�tGǴ���͏>�uA�H�8b��F9��=_ I��}K�ц����Hh��bDnc���ɜ��������[�?Xڨ ��!���J"h�0(���.�u!����T��KӮ���9S�O͚v��n)u��W]�@.���.���'���ŷX��Vh8�b��uS�6B!Ѭ=�c���fjwK'��K��4�'�\vE���)HC}�L�Ƕ@��U���ŝ�n�#����l~Q~_Ӕ���(�=x���-�|wt#d�!�Z-��B����~~L(��H0fe>j�x�ա��Z�1�5�>1�J�|�����~���H^<l��x���Ꙥ>���q�SW����V<ȯ6�p���#�
�^�jl0�.�}e�_�y;U���]�Y՝R�9��{)ѝu\�H�K?bc_�t��}m`_���*̞�1]����'�u�X?�z�5��g�*\�x��&�5Zز]���U+_Ibw;v�l�d��2�Dx�8��[���܎�h���̱N,��C�+x�G6���:�����b ���`��V��׏���s��y��Tem����]�f*���KnA�2��,��ɬ��Zٮ�����F��6������1T򋮇�7��cݫ��b� �vz��=�1���E�Č�:�G��>�eȘ��D貓%�y���l�r�u�V	Z��u����h��rƚ��fsy�fܼ?�Ut�$���wm{bǔ�E���y���L�ax���ny5�`A$�g�>�}!����R9�W	´%�h(�*��X�t��j��fݸ�V�fJ���x��i�t���*����t���
K���7V���o��h6F�-�����J��:Zc��	��@�Ή �7��c�	��ؖ�:DkT��e{��zX�;�-QnU�ypp%d�������/Im�'�m-zJ8Z���!��4F��O\O˚)�[��W���3����8�D<,a�X���;ɩq�6�g,��,Ы�x�����R��@��{J��t�ml��OD�zw6E��tg���u��c����s�`Rrf辌�.�B��H����h��갈7��t8��d����������t)�>�|�m[a� ̴����,ؓhc�l8�#�b)��#5G�<����r0�����R�Vs��i����������\\��1�?k�΃��)�hD̄~uX��?�wk�P(�z#���>�Bi�.���h�G�0K44��[���$ܢ>-�*���D�ہ5�:�q �8@|k�Ǹ2���-��c����e��F^s��q������>^�O0���.�&D��
hl8)���W���(�t�j��(�[nG�pn��-�SY��.�#(�@��d��8��T�e���dE
�̞��8�@�`SKy�B���T��Y�~Y���248೘쳟(X��g�S_�/G�8`�����4�����l�'w�.�L|�;`n}�D�.Ry���s��#�W�N���SgƂ�:Pq��4��!P;�F��#��/X:�H'uo�i<|�6"Ո�j~:� [�����z*'4��7X����_o�p��%��ﰲ�I������\�w뽸����+=�	����\|����ۯ��m`W7��ӿ0��:�8]�sߎ�Q����zҝvz�&�aj���f�ޡ����D�=����Uq�=��攌	],M:�[��+�����d5L:˲���y�b�ը�%�C;�v��|}`rT~���ﰁ�Ù�m2{}����)�vO�.�?�ݣ#הv  ��iCL��p�hn�};j�7�Jy��a#�}zJV(�|�\vٮ��a�D'�9�
d?F��GGM���y#O~���D�z�]�2L?�������:����<�����g�������W��\�����M����(�'UJ`��0\oD/�F4��i��;����|�|�7��}Y%y��	(2i)>�g"�>���=h;�?�;�w����gh��+{4�Nބ�����3����,���,�����e2�Ā�'g��-�y �5hf����>;�yk����50ghkW��V����|�f�
rNM�i��O-qi�rY:0��2N��ά�'I~���xHi*��@/�\h���w��b6�f�b��9�i"�=m��-[�zX�ӷ�[��^'J�=<]:�ұ� ����9=OYð�b'ŧ5��j/8)���/��5�����^���6���l���d�{?�S�ܔ�1T��u4���u�+�AK��)�z�J?=���U�"?����X�q�:?��z�b=���W�F�C~y6@D<S��i̔u��<7�ͼ��<[�#5^3d@(�u�~�j���f-��cޛ��T*fFy)�S�{����R���1K^h�����:N�y�m�հ��[�=w�V�x�~��A����`��=Cأ\5FXb��hc���璋�S�e�S1�&q�/4Sf$pj�;���9ә�0d+L
l9b�-w�I8x���5I�~R�0�?���>ץ�G���*k���������g���"����Y���_�f��ҝn��)�+Z҉I�!��ڄ?�N��+�*o����]hP,�v�-����ldS*�-�r¢�&�gP���@fj�q�2��޿�)����ln���!p��iT�l���}0Y����鐇V����O�����瞀��ˍ9�b@��x��G��-$ZN�ɀ�
������O,��}amA��]�����(������ކ@[������	���q��]3��h6e�]~��G9k�{����"N�1��6)>�݁����V��@�2]u��P�ؠ���a� uO zD�L�|�����!� L`�ŤqD)�@ځ�o'aK��L>N�jd�'ZV7�vJ��hi��ʑ�P�( �I�뺪���1��y���)+�K�=���� �)ݕ�|#5�6�u�
k�N�ȁ�d_�ӓhe4��ZI��g[�k�.�����.)Ƒd��Z����'���,�������<f<&�.&q����V��E�~u]�p�=5����������⽓g���;�����;�A4��k��ʅӿ�׊����%߽�}���|8�f� i�	�	'��!�ch�]$�b���g�#�!H���b)*��e�KP w�Ř+
����'L��SWg̤a�/EU##�\�$X�ˑ�'��1x�;'bMʵ@m���r�6�$�L}QӦA�0�'q�2����SN�.�ᰫ���Z�Ym
g�b4������b\�ֳ�>E'��Ȥ�C���q���a;�ZjA5�Gn|$����(�s���a Z p�l�l-�0�����/�5�D@��gf1=?����"����/ߧ�d@��ϰ����EsSX{��Ͱx��K�x�SM:��M�x�cC�K��I;>%�ik�����퐎���֙�����jb�xj�4�;�p��|�}.L.@��Vk�o�ٔ�a�p��0��ڨ'�i��nZ˰*f%N�M���ynX�5fj1� ��n�)^�Ϣ��Z�	���Pyp#ډ:,�%��P!��ͧ!��>i.�c��g������\�_L���h��Eh}���6;�jx��J�z���Z�t����䁭���A<����_�.�'m���R�$��nk�Sd��$ꏏ�����׺�2|����^��{ �q4�}��F��a�M[5�l�2�Ʒ3�aD�JpV`�"�j�{�f=�5�\�@�NفiF�~O:ka/��T�
�Z���W�B�+�@����a����#�:��J�{�2�&�<�h+~�6��(���`6(���Ul10�n�s�j�vy���`/hV�$p�<<9�	IQ#��bQ"�(̾�)젝:�Y����Jf��Y���8���ΨI�Rq|����J���#�s��:���qJj��mc��x7�~0t����8��T(��;(��^ԛ8��aΦ�Ӏ?z{N�E#��V��p.g��[��z���q��@��Ӝ��\�y}ص��y�7�ک:���EQ�}w:2��Z�}%Y;=�& �:��#+�~�Z���<dp4�YOVz�|t�mQRe|��h��{ȝ�=C�����,D���# �{D8�:f��89��=鑈�"t<�^/�p�}��^��E�\dɾJ	�ڈ:AV�d4��ۋĂ������Æv�:����)���/�}`@:l��f�QN�]2�s����3� ���&W�՜�FjU�I?��e�Ɲ!�lŔ�Z��3�ƴ�~�dN/Y�v�S3}5�W��v0�n�fJ�Ӎ�E�x���*���U��"&�;���k�j��d�-����3`�2�D�*��x��>_�i��B>��*mƭl�L�=+�'��?��!�;I9�e±��^{�"�2�66mw�c�Y^��<Ne<�ȿU�4u�`G�_x�?ܧ���c�H�;��hy��8x����Ȍ���~	Π�Su��H\kp��%�;� ���J���|�Ձ�h�03��(�#�]��H�Jpz��揳���7���~EJ����x�^���wg�@c4�!��QB��ɣ{������;��qͨ.#����`�pУU6@���hW���JBf3}����i#��wVC5���y�c�P�Y�E���A��p@�هc�;��ԩܿ���'����l� �3:����W=A�H��#����i Y�}/0γƑܙ��zLnfՌ�R���.���T���x��i5�w�r?��^��h
l�^�����N���������&wm���>n�@�sn���OW;��o�R��A���������H:-7R���g�Z�ߠc����SPm�����R�)ǵ�p��q*�0#��*�O/���;���ˁ8�,"w|<��5��J���m�V�����x[�R�s,��hvl��_"��A{n=���mj<�౛�3�=N�l�\��4��b��Stxl4�u*��ʪX��P)���? Cl�
u�hK6�Ia�����V-j��'̙�R.�� �3w�{�6n���>}�?��[�\\R����?Z�k�������,��?����1`̇��s�<���{u&�w��ѩ��(��,@u�nU���_��O?2�8?J���������{Y�}������=�O��<n��ux��Y�����X������Ӳ"��<~M�Sg3ہ������4��=���Vg�i�ff�����:����_
N���ڛ~o.`g�5Ηu\�A�ad�#�n�܋y��u�	h>�޳U$�x�'!R�+y�ΐaul��?_�`8����l?Y(�ţ�|��j@.�Z���AP1�Y�s��iu��C��e�9�@��D���A�ثk��ܳ&<��ΝABjn����1u̓��sY�jc�,(�Τh�Nn}��~*�6Q1�S�\�Z���jb�˓��y!��v-/\O�{H���k�յ�U��zqt��Ѻ�>h<zj��ЩQ� >OV~F&x���Xn ĚJ�cW �{"��J�F���ijtW,��(�_��ϒߚ�d���N� =#�T�d�RXS����3�NS�|�&h� 0��I��	�`Lw���@%�")@��Sz�S�������cM	��c������M7�/��>��s��g����ȝ]z��|wz9��@���>~��{��N7�4jW�.;��m��P�����N^�i�3a'� s�J���|�^��#0��{��Q�f�:�D��K4sp8Z.nҊ4MGe�i�gf��';v+	�����UԤ%(�VU������ C�E�3���J�����ϛ�|*O�5� �?$'<��c$�9yo�k��>����]X��z[�,����l�:W�V���l}Xt�9H3bt�:H�t�������!!Q��E7�L�)<k,E�O������<CTI������(�G������~�B������~oa9=��Ϻ��b�_��9��Lǔ(����i�mw"�"��3�_0����ݞ��M&ww�\f���<p���wZ�G�!B�S�����W&ᔤ3��-��du��&���niQ����^�d�(��~���nn�#ŗ@ؼ�B���B�'���^�R�nw������M��d?&�|~��"����	?���R��g!���S�Y�tYZc J�j���3��
}��ӺW��-!M��6�%���A3ٲ�ʺn����W���G���u'H�e�/��c�d�l������j��z���l�g�{��5����p��[���6�ޤ�'[N���H��h�3��k�y�0��9T�!#���<.��h�O���D�^�5��-#�T;'�����̃�J����D@O� ��p������`���� �Z����A��@g�~ąk�]��,VF>�[Hm�|��vY���vI�-��=5��=��T���Aq�^Dcz��h�����ͦ��.�"@������,r��/��g�g�m�#蛧��"D)�XV�|�K�U�}�����[[���A<�d�,���8�zaS��ȉ�d�+�� v�T���5��S��.A�V�iy���zR�9_D�-�������s��&<s�/���@N �q���N��4�Q�丮�a��O�H�ǧ�
�A,�Ϊ�Ed�B8�G��)ۓ6G��&�������d��ʺ�R��nu,bS_+j{�:-�d��)��"B�¬ߏ�7t��y*~!����Ch��A���	���v>��&_{���G򒮦��L[ѱ��=5Uf�
�r�k���ۂ�5�n���v��R�'=�'V�+�U[@�;Fn���ˁ�3F�Ih7�h�Z��xϼ�U�8��pѠ �U6G{����4���e<���5�o���d<��f�������C*�"l{4���]�q&t�{j�i���a����r�?�F#=]/����!��W���3�+F�kC�@��E�ެ���� o��ש��̷�����:Ύ)fK,28�#\,�l�Jv������X�r+�/D������^�?Y�aE-�0wc,��_�5�����ːw�ŋ�����79�~x�39?�ۚ�����</��F�@�ȝ���3-���8�z�A��;P��f=0�oP��+Tu�(;:���G�gǞZP�~�BPߧ�Eĥ"_%�.�e��u�MB����\�q���߿QQMP�(�<I���<W;�T� @�m��0�	Ɖ�* �Z$��L���NbH�i�0���s��c�:�lzv�Ւ��zhX�nJ�6�Ah�$w>;Q�
z�hn;-��8�І
T��������?�M!���]H����5ׄ����@�] k���Λ���z��F ����gr_��ڍY�0䅻�uܠ�����[���L��ʝu;����(�$C��c?�Vh�4?-���i��Hp�bB�9E�=�HV8��@;��O����t��^��� 7�Q�1��:O�ދϪ������A��n����K�������;�2<��C~�Q,��r����H�jD,����H��b���)݌��8�������i������x�g��a�W�W ����"ĢP��>��1��U��j�bN������y�Y�noПK:i�iŭǞr˺v9X��a�U#�E���Q�ohq�J@a4�Y�F�pAu��'��O�lX}�1{N�{Ք*g��(�Z~8���l���C�u9�����"`�zg��*�s�u���O>B�Y]W�+�hK��hJH�UZ%�
7v<��d�������
s���Ƙ{H�|�C��I$7�X�+� 4:���X�< ��U��~�kCڢ�ކ	i<�@F1�m�V�(&��,d)��~a���Y�}-��E��3�슗"�;v��':>���*`@kF����)�M���Y�)��ֶMt_����@�a5*N�o���Ƴ�ON�*a;C$_�?�^;~�* 9��ZG�aȔ���sn�֎ @�`q���F+J�.:j����(����Y
Ǟ�mD/��Cu?/ǭ�Al�՚��ᢒCy3�ys��QǠ����ڰ2�i��g����{#��x���uT��gҞ�N�n����nߏ6c􈨚�L�%�l8��wil|ҧ-Ra��\�f�.],�݁�j�����QO|p�ڷ��:�����b}Ϧ
�"��̯����b��^6�ufr��:U�\V��HFw���/�\n.#��QzT��b� R��Ka
�C/��;2eg� ���G;�^~�x�����+ak���}/� � :�8�	[�=C5���o�n`!��Ϩ%��ɘ0�FV@��n���4������5��t����\Ar���zN�#�;�@t�h1�E�÷V�8S8��0�3q$��N����Z��!m������94�5���9V�e3p=b��hjQ�. �Ml�� _�d&�[B�������i⽃�mR���B����@�5�͋D�������f��3���&����=[=�ݽm���&X��PAqxk:�NY��{��w��+���;�i7t�-sLݶ��2���^�pר^j�m7���)_d`"u���#-[S��Z�����ש>��@j%P�N��r�?��F�����' ,�?��p4����Q"<lצ 3��f�V}'d��Xl��qHl�>Sj=y:_��A8fj!Aa���K{�S9�0xe��2ʉ~ld���&��Pc���V��D�j��K�N'���a�	:��_{40̠���eP߭GB^=p�FɥeR�w����I̥q�%��\���݈��R�A��{��n� ��s�I��s(����ѭ��A�>�N��C��It���*�J����kH��)D7v�2���n�g&��xp(q��t1��L;��Ij�`k9���~h�=yFMWEe	N��i�l=,����^O�vۆj��,6��8�{ƹ���5V~��eyt��ʅ r�[�l���+eO�&/ql������* &�N�;���]nH����PHP�f|��tz�Ҳ�`z�U�����ݯ���-ʿ��b�����{^�&�C7[��LbWQ*=��vYGW�o�I����,R���2!�f��#��D昜ʩ?k�Ғ�p�r���s}����r��_���_��Ƌ�K��I����n���A��/jߨ��e����ȱ��2�O���F�(�!U��n/`���)Q��C�DX��dx�l�G;��A�	����+�f�+Y�'m�x}+>CKp�3'����A	�̂�'�	HA�ʖ؊�!��Bߵ�M���p̃()�n�f�4%"v�ࡦRGL7W�����GymY�{~�����c�`��Db��<`�!�'�'<�غ����M�@7���(�r�uN�/t��U�V��*�������ƾ5��Ʋ�[5?h�q���°5����돮}���$|~�God�6�b��6��y�_�k�'q@H@F��ƻZ`�}��������M��Q��&�KU�sg�z�p$q����Hf3!K��	�da[
b�`��'l�燽�7�_�������1�V�_w`���v(��@��W���
��2H��	^%�yP��I�)�����Z���{�?�vG�9�LY�l����Z��ge=����Kɚ���������ҁdx�IK%f
zG��b[��R���#T��޽ �'?b����}K������o�i�O ����_���i�׭}�E�ݰG?iZ*���p�y�U����Iƫ���;�C���lv��/�"���b��� Q������2Ui���v�-�u��l��Ps�l�j;���~��`?8NG��_I�N�{p$5p�u��3���W�ͅd�sK��2j_��߈�K��t��w��ˬCw�s�gś&�!=����t3b|~�|h��Fҥd�jH�a9����=��������F��Ui�$&�AI�R5�Y���å5g����{�XFò�G�#�<1�B��l�R���x-#&���JV�ļp���o���ݦi����F�ZΏm�� �R�c�Z�h՟��e��w��_l�{ʭ���������&-w J�9����tl�Rcv���P���%d�s��*<�Nk��@B�`���I�����:�����-�k�e�@������խ�H�������K��J���7	t%e�Kx�:�����=�]v7��,e�o'�ҝ��Y7;�rE��|���@,��4�?�V�v����w(���-m0�����l驀��p=̈%���H��\�F��6��.>#6U�>��Rf��U>K�@|{��lk�X`X�/��5�?��pp�Ed��gP�p�vn������S?��-���	�A}!_8�s��n�|{�VC�{Y�;�tQWK��l7�(.�~�s��5�Vb�ͪ�!ef�P}.��&%B�:<�j�0ߔ4;۸��v/��L f �(k�э���{�No�h	�/��m�����w��*d�w͈-j�_.���W왆�G��·څF �
��{P��#��%`.Z�qn��5ώ���s�ahr�}����4Й�<='�Vp�_2<Gu�z��Qn�G�@,+�F�,߮BN%}���]�7��CX�m�XC%u�S�C���'�ף-~��K��)p2��"������@��8/���5B�`6����fs���`H��=��:����2��ʄ0[i(v�k&<A��n�íD��3�G��ñ*e�dxMBl�0_]�:��F^6`��l�K�3���~��#��H��7�#��������҂�y̯&"5*���'���b�s�>��Q�(+���b�Ν=���MXs�s�!=���֟e���L,��M/�EC��@�r�/o=��!�.V�x���.8����x�%##�w8w4��lT
<:�LBK��!]ͤ?�)o��+
v�9��FS�Pu�S\��Í�<V�N�~���sR�9�d:�Q:�Bo{V"�YX�9L�=����6���C�4�c�c�Y��d�r�o(*�OQ�������.3p����c�`��j�{j���?����{U�.$������{t&�99d��moi��4*������(_����q���r�� ��� �l���2�N$�LE��F1�ٟn�0U,L�\qg�_~�s�V��2�����o��J�cg�ztmp��FU�?�.��V{��oLA�`��{1G�ήdz�zNWiӔ�<�'��"%({'fl,�j�y?ݟ=��r]���%p=�Z��� �K�""$��L�j���#��Su��Q!���&b~���v�|]eO���3r��]�d�Bk0*�Li34�B��l��N֜+!��5�`�o����k�my��~ �gϸH��;�z�pgr-/���SB�~"��Pf��U�p�0M\ױq^����] rO_�+;Z�;��IIf1ZtwB-�Q�P�pmmDӸɦ�Fa�4#���[t�f��E4�
��8(ߺ'da��uN�݁q�'�N��'Kć��������q���<^�bp�Pv��i��dd�̑�W{�XZ�|mc��	/��>4�\�̞��Ǜǳ=�b?���ʲq�����-��w�4����VNĚ0�j��7��! �A �}�I�E����[�G���R�����d������9�Hv��%��a1��s�JY7���m֐l�n^����&R�(�H8�0q��+���c(%�0N ó�F�)5���\�6ogbV����':f�ǃ16塖x��p��s����?m�u�'_qެ��s���d���֑��_��d^�m�C1x�keQ��ީ�(�Ň�Yp�u��a�a��vm�@ީʀ��ח�0c�e®��3v��^�L��گ���MK�{f�N�����k:�;="��"ާ:j��t���S�uXF�Q���u���ٹ >��T�&��Z,�ҫ��kZ���}����5��y�
����U���n��>ʝ�D\a�pߓ���H�u�:�hH���,t��'˃^�Aԕ�G��h����e5dړ�s>|����*�x����lٍ�������a�'�1��;�"�'���P�,��`q�xI�Ym��9b=$EN|z�b�	 w��d�p�����O�n�I�2��-N�������İ)�~���0�-��tA-DMam�+�BX����Rq*2��h>����N�n��D��iTZ�l�V1��(��쌮�h��a��ǔ�c�3��/���ݖ��J�v�_{K
�RyP��)��RRj�w�!U��G����[qB�a�Բ[/&������l���y. 0�Y&8R�#���6Cph�	[�8��c�ص��l�n�7�%�U��g���dk��d���O5�X�1��ޖ�W�t<p*�c�r���LN, �L�bx�x���ʹ�O�ق��Zs���i ����&*w����� �'��Z9�~+��f��VM�u�y�Z0Q��a��(+�S�_d5V���A�e�� �����q��5O�H���pb��зG�ʏٟ�?���d�/"�wz�j��/$	��$m p��Af�ߊl�*�����NҶk�X�bL�ƌ������LҶt,b�%sf�g��lb���l�[���eɰP���l�Q��:��1������pG�����`{�X	�Z�57�Z儆����dQ�X�f	��3@j���@��Ȗ�OI�������͈�Q�\��V�d)�쓿|������#���|�ڰ#�����+/XM�_(�h���ǳ] �-|����^X�Ȇ5� _-�~����k$*0�D�:I�P�3w6�%�k{���	w�~^��ȯX�y|�}�a�����b3kGȣ���࢙`#�b�*@��ٯ�)Q�0�#�p����"Nl*�/�U�����"�%T�`�jĭ��?Q��s�G���@�a~ �@���1�!y�R��nW���A�u�bB</�A��p�ט�Y�[`�&��,��G��2��0�4?L��_�'� �GPQ�U��AE���7���P�����!§K̡x�A|vՓr V��J��P�4�����,p�*Js��Ĕ!�lQ�.���O�u5%��Ϥs=_=�z~�
+�t�}%�r?�Q@R����'�2�M�钜}|�!x��@m"�V�}�	4�>'G߯��߼��!����y�*�W[������w���n*�v��n����e75���xF�i>�|1�˔�G�� (�/!g��Q�����ۊ��^�Ni�X�14�����������cs~��v?����7q�_�T��#���_g���4��J�������Ů�d��8����E�p[ۿ����|����|��z�A�ߤ��~���go-���r=�}P��f��+����v�+����o��a��|��͊<�f����
R���ґEP~�뉅�z�Xe�7�5H@Z�%>���x��u��Ԧ�iD0��x�[���������m�r�����2ns?���Z����k�;�f�ä���ZZ߯��o��!�f[Zg�D���?eD���v���	�>�dz]�m�(�p\V02��ٖ�a=>O đ]��ΰ�8���n��:>g6��IxY�{�0��lc�/���l�Uo���nZ��"�l�^O�֥1�(�(���^U�T��T��~x����tЕU�[��ӵ���M���@|���N���7�c4J�펆BP�[�3���d#��,׬a�gh����jͤ�A��l�t�q �|BCc�Vb��[ڻ]��p��.G�j���g���?�����u���__e�V��U�7#Ioa��]P��/���:Jp���U��n<7mG�\��@�/����T��fK�YA����,l'�)���/�\��b�@����*>�0�炙8i9��>u��Q�;Y^�bk-1�al���p_���������d����طc�y�Z�~{�X�~H�	�������*��z��){_�ezG������W�������{ܟ&�����y�$�`pw%���f����$��7�9A�3j>�e'v�S03v���^�)������cm�s���/o����F��������i�LńŤ^)�qJ�T8:��b��2��?+����.泤�:�X�#j5^;��ә~д>y����`��,2-��C��:���ͨ�2�R�۟-H���3\`�C4T�t�+q�����$�8W�=�:�V������\{��9y{R��C|����=�\�5:��Ò7.Miw��d����p)�m���>{N�CmF�F���Kw%�~�:�囵���O~�xmS�;��u|�_�>��a�ng� ���:;�N�Y��F�p�ه�N�Op�wn�w<?uc?�=ӦG��em��?`x�3u�F��o=��Rn��a2��d�&3N��]e�L�#���;3�˥Ψ�k+Hn��A/�غw>K�i�-2��7!�nvI��J7ϴ�a߿��a�A�޸G?{��ue�����OZz�������C�<[�A%^^ �,����f�����Dn!-I0�P۞�p�(��T�����H�)Jq�2�~o���*�&��Q4���W�ٸ��"���)���ˎ�a�/�\�E�r|؊�� �%��j��� ���Û�
���
�.���������f�7[����m��w����Ż�ǳ�k��m;��v@��1@���r��Yp]Y�8�ŷ�&������%�!"�|4��h�ȃM��2=��6;���I_؉Vwlh�@�T���>���w��R��n��du�>?�Յ���'�r{���1�q���m�ΈaG
�dM`���:��f�,�כ.g�Aw�F"b��_��U�ϏCg"TO�Z7\��\M�����B���W��JM�tߘ{ʫj��f9������g��U7F[jvX���I�}I���h�1�0�U��
����y�fύ���u�u_4;��������Y��������om����mcu���[ku��m���L����l��ȷ��6��sYf�M�% ���Y�`�a=E'�$-A�8�\j��t�|������yY�o�{�o��Z"AfeB!V>�5F�nc��+��ƅ�(�bw*���E��Tl�rtѢ���ТWռB��|Ww�xvDi�q�+v_v�<�V>���0�^kc���En���6F���ٺ�������K��j[�I�J���z֗K�3Cf����e���9#q��:8�����ұ�i���&�R94���Ϭ���g*}5+_(~��4�����2�����}�+����	������@�-���T�U;����4v�wڤ�e�RXu��fJ"Q�i�'4����<JF�?ۮ�Q��9�jgota��~�hfC�{߬@W
�tũ*=Q"�a�L�̷`�bY&�E{e��_��`㌵���z�;Y=�ؖ�ٲ���Ӊ،��JWI���κm6��o�h���_�q���:jW�;7����y��/���wo����uOcwO�+޸� zwʂLe�,�CJ�7!��Q�M�ȅL��Q�v�8�sɜ��Ψr�E�c���.����	5[�`ܾ��������qw�=a���BOG0I�;��~{ƿ�|RP�2 $b���jV�NQ-�.b��N���k�]�;���:��l�8Ma5�)!dHk),����g6�U~rq��:_��s�ƉN�W���u�|I�&�mW��~��l�s���� ��X�^��#�_�'�P�DQ��ŽWͼ5a��p}$�AqT�s�7G�Ab��[�������>�s��r���@�{��e����,�!�S�G}Jݎ�����6��q_y����%�C���c[��������ϡ�n/_�x�����D���!�̎����Q�F(��iC�/��*�����RaW���Z�\���q�>k:��-���������S'Ӝ�T�=zVŧ����,v Y�)��'��v8rY�}����~���A���i)~�$�<��b(���,xE�	Y��b���yH�S�ڜ�K���vpN�|����z	�.�LI�.e�N�L�z!�䖗�
������ڥ�!=M�n~M���W�I��� oC@��P�;��-&�����k^̠�c"=F�Z*�2Q��0�y���E_C��l�[�ѭ�ax��J�I�JU
c���ыI�g��E�1��B"����!����n+���}#��
�^�MЯ�W�רc���j��߆cg� �#A��4Y`�3]�V���XW�p��Ei��T��:;��ȓ"apQ��\F��E�t�����>10�*6/�_�~��W�{Rt�������
b������������G �����^�*��gS�_�P�>��D)EL�����)������(�}]�s%��W�'f�����x��#z�
��S�K� ���5��{���<@\��/��G�W�w!	"�� /����V�q�<o���;����u���!��H6�Ny���1{��[d�s/U���\��n��#9�ͮG��.�V;��ҝ�}�^]�w��L_>��W9��//�����~�s���5�}�s_�CvO�+t[�%���=-�����~���Β)Z>ˮ��i_��LY�dQ��}/+�!Y��E�����8~�Nנ&�܉|���}}B����۰1s�����S�4��>���A�=E�˽ӱ�4�M9;v�e�r�T���'���؛��y�G
&Ǿ�e��x����?ӓ&��s�]����/��4��o������.�%tP�6���9 �'���n�gz����D�c�Z�� Yv*���T�	�^��&�;�N(��
���wN�EI�y��I����o�l��r��^��8� ��P���<_:�-.� Fv��yJ�R�,`�ы�'��k	0�u�7ۅ��1�g��L(����w#+�rW�d�U��,r���w+��8��*��*��@���;��^Y���HM	�O��·�eƝ��7cͣ#��[���Yf8o�� T?)��6�]a�!��)���q�P)�N		c@^��!ׁ���a�E�q?}�?H�ͦ�^�mA�� w�p�� ���i4H�}h�Xg�\D|����n��ǌ�=� ���tb���$8(�������]ak�z�ΐ�X����8����������P��\<���|����C�u.z�2ff��>�9���*AO�UO)�P�������&
���1�$E/��f���#^.�\L�}�21:�G�:��'������*�w���M�R6�2���M%Ʒ��0�Z�� �dv�w�Noٯ$�,�u��4�M'�\�H���E��a���O��X�Fws�J!$��T��Z�Y�;��-�����Y��6��[N�]�4J#����0�O���G��8X�igf;(�"[����qO���A��ylx���%B�$��M{�}����_b���M�o˦�c��jv~	��锗����_d�Ź,������Q^;`4M��P؝��8�Ԃ��pÕ�fñ�b4ct��E��B���IBm�-��tSE�Uh����?���k_YowC�{��s�����E����4>�]�ff*/v7��[�wd1H;q����]��������UJO{�9�-��c���^��*].~�_݊b�U�<3͙�Sp�Yie����{�,�C�[g▽��(��wP�3����qCe���{T�e�_WzYw�59���X*�P���;���c�$�˯�\[|�?笠��~q�kN��ؔS��n|��&Q_�f(yr��:c��+̃9��J/rf��<:�)HsnΗ�/�R����D���=��=?�vA�|Z��0�?c37ߪ��'_p��f~aI/D߸n���e�'�t;����w
M�9����(�;zB��:q�p���n.Ϝ+y=�����TGёZtգJ�C�u|��Ug~=? 6��������'�^�����q��\�g���"�<�u!���|���{!�Uȱ��Tt�<���ٍc�ۓ��'fD"�wݐ��:Dy����a7v��Z\M#$tv�~Lk����"F��n��=<��~��0���[�B����
�S3��[/�F�i��=���Ԙ/w�Rt'[]��U=�TaG�\�F�k)�wvu^��*�U`�ښ5ڣL_��P���U��Fk�����I�@�	:�����<o����y��TK}hn�Q�l���l"���]�8ģ��ob���t��{�|k��'�-��o��%�vW�{�kzw�f�z�.{;ԥ��z[7��>^f�|Xt��T%C+���z��˪?P��A�,�3�,�}��E�~��l���z��`��)?�5��������V��0���:��a��gC|ʷ�x[j�"4?��[J�r/>N�	�A�G#/�|Hzr���鰕��>w�u��	aD,����q���gC{R������Toz������Oj��w��T�54��7i6oߵ]e���p*X����T�V�1��s��/J��c@�����`��;<��\��4��u����a�َ�a~�2T|`�Ѫ3�+pE�F'�(��p�j���PuZ�Tv����3o#����=��`��Vb�r�W���·?�����7�y��υ�	�R"[V��y��y��+G^A��$��n��d�_���)8kt[���ئ��v��!��0g�"�2/jJ1l���}��=߾��B��z�����v}+�w��j��tc:�/' ���W��=o�����K�ŗ�!JY�vhSs�قB;��'c�z�c�^<(���3D�l?��?�|o�?֕j�s��gEN�nL�w=��d��������8<�SZ�Q������>��@�[ ��C����hމs������o����}��sh{) h���3��þ��jug�>>�����P*��W+�#�_����Y�F�۶�vy,���8�[l7�7:��9��z�i,"g����2Ro!�����x)��`�E�ً��g��ӺtP�s��Zϸ}Զ��mI6�/^��;��l;��e,�J)c<O��ٰՕ�ޡk���O��>^��N��a�7�,���������@� ��n��8�����[\��k���wW�}�+����=��^i)��ڟ�9Ǭ��»74�1���3O�������{+ӄ�o�������p;���޾�Q�uy���,�bd��W/r�P�N���)]��2Bt�'�ŀ��'jy���4��?deF�&�w���{"�Yx�x�*��B��/��nda��~��c������!�4��e��HmΎ{7=)Þ=P���<�f2O�񆶣y����O�96�q����N_�`pV}��ޔ9B�'\��ȹ������ ��qC��6���}+�إ��E�p7�;2`�V�z$�z�a.��[�d�Jt&
#/F|5�X��Dx8�B��͐��QY&�p$Z�~���g:�ܧ{?����^�>�������v�(	�C�a�JN�p]��E�ޅ�`τJv�%�}<�Н������,�Q֗Q}6"�+nxZ�f�>��|{�yw��{���E{񾜲�{w��A� �g2���|�Lp+�({�\uÓ�!6,k[%񂝬G���[��^��L��]ʸN�ʈ��%׺���3MC���w� 8u,̕���3�>���J��Y�_���xՄ^H6j焷"z!/=���\�q+6�Q��o2nb�v<��S>:��]o��\�1�n����JI1��Ф9�$?��㕴ʗ�z7��������a��:=ppB�����M�v����@�/� ci}��9�v��@�S�����l����ϗ�2����M�����K��9y҉�d9�DL���Mw0Z0���RG�ҡ�9�c$N��z*�'|}�NJJPAmixt;SC�d�߾`&DC������ǃxUSi��������%D ے
�Í��ԫ�4�`2`�\���s8����-r\*lO�:��-F�CNiE���;C�:,�5�d+5�b>�Y'��=9�z��_���ܞg�k�ٯ=%֓����f�3��惺�=o��3 1=Jg�1S�khTRO�n��W=��k�;G%����d4;;���+xo�	�}�>�Z����	�����ܗ�[���Ap-������p�����f����b�k
ञ�{�߈{��"�I���#:몰�јj�`�1 �͢G�N�B���`ܾ�ĺCS|. ��߿^Е(�����5*3���3)" C��z��r ̦���7��n��qNPԔ��|*�Ĳۤ�C�w0\�@W'��Un �I�NE���!�G�����Z�#�V
аs��6������z�J��5�clP�0�݃k�xm�T,�i�4�YE�d8���Â˗�X8��{^�O$+��s:����pi��/���Y� � 9���'�M ��I_%��p� ��k�pNzy�E/W7��9���0C���E?�.�9ԾĽ��I0�}��sF?�Qu�º1�R�!ZN�ʮK���yR�[+���>4^�/dp���￴W�x��M�Z
�\����5	�`µrN6�;�2	��
l�d�l�*�{�#�Y��d�Gl ��K8�J4(q�(������ؘ�G0Gpq�;�.Ʒi�{��ܥs�K�S�e��#j�����R�l��;�f>�d�J��?��㝔G���`�:���f�?�Xk�φza�IsMOwcr��9E�v��{>�~)��Z�g�~�W�*�q��S(�nS)�Z�U�+�aAh��K�b�uNA(�B�	�X��am���1��d��Tƅ*�ɂ�ō�j>,�㙊�}%GVڢ�z�7xẑ:pY7 Z�d]���p�`��N���~�uO�v�+��&������Nϝ0��
b�GRg5�����,�8�(� 1{�G[.��6���Ƥ���4)�_�7él"��5�+?wt܍�}����v�D[��?-F���;q��fD%�Bw�9#��%@�/��J��'ě�$���x��\�E�;���i ����P5���C2#�)�����wp-���t+��\��rX���c^�Q���ݟ�F����
`R� /k5��4���/����k� �O�,Q��pg�Ė�ib@��Ԑiə��'��˦jwXic��o��ܤt���[��P�7c�_H�];���w՛7����O�j2���KA��Bڬ@KCe<T����^�-l��H� �@���f�Åd#��v[��{o��{�$y����^������i���L��Q�~�]��i9���,g�.�Ȑ�2��3�oΰ�ȼ ����$T�����T}�|&�G��Wϙ;� ��� ���L"T�!3� `u����y#,\�dA���{d'��m�w;����0vpn����C�1�=��9��D�Z3��B���0;���|۟o�{�o�>������P�!ʎ���:��%zĆ�e�{��`����x����&�>4�Eպ?��)c��^Ֆ���^��&q��S,�N�����m��W?m��Z�//ۋ��6d�"<�ҽ����T08hr���&�����H��9�b���ꂣ�I}쏣q�X� �vڔB����=���������}�Mt8m�t';�$�8�-��j?Y$述:84 ��p�cw[K�{���3�d�/:N�G�9B��4�|��F��n��Dʐ������XL��#-]��Oqo�+�S���p��;�4^�:｟��i
nUl����gZ�9�#��;bC�Q9����QD��8��9�
�|�.i�\���n6�T��H�%�����,�	Ĺ��R�D��R���'wd��bV[칌�}{�u��0��6���Pr'8��! 3�j�~9����_�Cm�u�cs*]��p0lt�1	����������)|Fp=�����
���o������&�f�<ۙ�T׻�_>�(�;�� 8���T�ʷ�H��J�n�c'8�R��5a۾�id�_�m�+�
��E���y��55�Z���p���>2F`P�d���;�_�Z����އAA�߬`3\�1yW}�`)R=����B������r��*��*��N��䴣�jY��l�|;U[��Vr�i|��P��х��-:����?Kv�0J4����u�T�	����d�B�6�r��"��h/�/ȁ.�
�K�ѐu��~������l<\�u��2eR��LF�N�V�:�9�5z�yEXkQ�L�ou��Ku��>��1,�\
�����42�{N빽�)��b�`XڣLg�$j�K��9�H�
�pV�z�,���������՝j������a)�Vt��x!3ah�����]��Ws���I���<����]���e��gSY�|7^�9���R�y}��*[��?�������fX��.��a��2��"B����x3mӏ��JZ�?GH�є"ߠQF-��=w|� Ъ/�6;��5��|?z���r+�y$���e����S��.O�������!y(t�"`�N�[��*f�C=���-�j)�|VҠ��m�`������eҳu��q���2���g�-�������f~�/��; �~��yc̿u\ǃ#ۥ����7~��(�jӐSX��]�!�JQꌰ[i��x����-���j\%|�<'3f��0iRia
���F�g��!�rм��ņ��'�2Mp�[fa������xb��L(X�N�s��Ym-�|j�z��'bn.��Zw�U�dqe�����0�����v�b��F�-���V}VU�-^�U�EnN��km�E�ۋO7�g�l���~Y����>�K��^�v{E}t�"fŃw�� WП�y �U/X(�2*~e�U|�.0��Z�����F�����YO=63;'
:���!���k�=pǝ�~.�۴�g�mv�/��h#ҷ��K�n��d�Gp>a�X�.��\���q�)�:��i뫥.�9fpZ8���:�ʦ���l0qsU N����@����65�?컈�3ޛ\�Mq_֪ҭ��K���UFRo�.Hs�L�~�A���N�R
xV�I�mF�L���f$����XF��'a��Ǧ����)Y��]��Q��h"�_��-�Z̿1�ؘw��xyNk�_ؒ%[m���]tS&��D"�M*uW�]�E�p�v��1�`��!c��bRe�N�@�0���\�8���Ie!�0up_#��wnӜ۝ׄQn:�����Íb<|��8�/�����g��K�
V�2��m.���d/lfɼ@�G&��<m�E.(�K�C��f#�1�J4D�?b����$����3E���Cg>��:�L�������`�ϥ���ksC�"ёi_�&�䅻��/�@D��d������3R��X�N��̀:�����T�c?�i�x�e<�K�T�ݸR�w��8� ,h��u�3�~^�v���N��FHP\�.٢��?(��$�V��>p^�t�}��;���9����{~sS�?�Ὧ<��q>�3�oH�����'ܬ��sګ�JB��g	�F��f�T�"���L�Z�LO:�2j] �Kt���e��/�g��!S��Kau��#Qc��I��r?J �ai�q��o�Q����Q���c�|��e��y@��h�%� �%�Cy��ĳ+�t��T5�z�/#E�u�����SܧL;�tmobP���M|�7zW����B�Y��+X݆��L�ޖMƩ$�	z�2�L�q٩U�]�\���a��lǣ�l^���fv�!�?���L:�6�RA���腓���ْ�ď[�`Լ�m�싚��|�3�y��*�I��E�W^��En��գ��r�%ot|�X�pk��j.���usC@��A��4[���hJ��h��Vů㭗N�c�����O����6^��!������^HW�|�r�"!�3K����;��@mN���ihL�GW�Mpy��A��J�g5�)�TR󞩱�����@���vR���?-�ݗ��7F��ޞ�Ɍ �`<�gvD�*�\��៻����&��6�g�Á�L�zռ��M*]Oi:$�H��2�@`���V�Q:�z�O&�mz��Ň�珍HCn~ �M���~�����`v-�����Hr�uG�m�J<�b�!f��4���E5�R��7\L�Z�������$���^���p8|FC�b�����g� ����^�_80���	�G�-���HFa����*��y�ĳ-oR�ӛ�&�!��2P�S�Rrv9�����c1�8pz��>�Κ��<t*=ӁG/�Up#�����R�^R��<:{X��*:���T�n9]e;Z�=_����.3��T�Lz�(Q�e �q
��ɩ`f
�s�2JT��_�?���>�cs���0<�{<�|&�fo�ܓ��m$���5��xjw�n�5_q[U�F�A�a�`�hsSv5#�	A�Hş�C�{��,	�YI�"��U��YY��|�BgmK������y��9})�z�_|��?������_;��s��M���/�g�EQc�.�_=���!�mj�ɸ\bD!�;b�9a���xw�������c���YJ�h�#̆��� �ݎ6�� ��Ya�|��`�n��3��'���y��7����+�4:��eFK�r�}�iw4�$�0#N�N��U&>�[��m��S�
6]�26�A�W��[���H���e�T	#�og0���������P0

--- File: .git/objects/55/a1cbc146410e4ded134a70caf1b814276c3be3 ---
x��Ij1 s�+�n0ZZj	L���|BQ����Ț��>�7�Xu(�l��&XO/s�@�\r��#�'b�DS�Ÿr���zu�C�$Gd�Q2B��3c
![�i���SMu��>����?�!���K�<�y^��%Ko�5��\��LHFc$भ����$�{o��2�;�^��[�<�e�_�Q�

--- File: .git/objects/78/d64083d469249a1d4a85edbef0e5c93a8541a0 ---
x�SKo1�_1Z�r q(��V�V�r�D�c��v�clo��g�MJ\z���=fƪ%g���L *';��P)29�)��Й�#��4Wl1DK.-ĩ8��֧Cf���f���j�aCR�𞁿;��To�;����6
�"�i1��+�.adF�S02I%#�&�P�\>���+��c��	�B~0�3>Q�Ҏ�mPN��p-�rUd�*-����Q'm1i��=+������x���,P77��(,��D��n,��
NN �6�����2ˀ��M�G��/�m*��ч6Sp�e�������M���n~y�w6���2�Q��p�Q0Y��_E��SC!���Z������0�T_?�{��Ds#�埔�:��.LO�zP��b���ݢӖ���t|Y����+=�_�6�]/��k�8&p�Pɜ�Ņxu��Fr;T����;>����\M4l�Vpk�8������

--- File: .git/objects/cf/d47797da57a7ce1a1c4a4f9e10f0678e9d085a ---
x=�A�0�=�WD���cz��MQ���Ơ45�"l�w�Mv	/y�K���l��j2��XF� ��c��/�8�曇�~���"[��떩�	
�[�O��#��4ͣ�U��[����S\��¬�F�#jM	܉u�௯ɮ;ף���#kx�4*M�,��od��˘δ@��6Ch�rN���P>

--- File: .git/objects/cf/dca8a458d4577dd687e079fc13f6af8c44d425 ---
x+)JMU0�4g040031Q�K�,�L��/Je8�{�D!���gO���j�W��*�����U/7�A������?�a���'�l�**HL�NLO���O���*��c�>I! rw�?����f���U1D]�5��+�*�d�Z������U�����Ԣ��"�2��Wʧ�
_~NJ��������Q q,O�

--- File: .git/objects/pack/pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.idx ---
�tOc                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        �n1(K�C�V;WX%�L��G7q�yw@]Ԗj ���<7gܛ�B]cs���s�9��ƻ��8�i��Q-��<S�}W$�M�[�	E��Q�@�       
  ]*I��c�ؒM�=�p��ll?��r9�NȄz��%*�ȵ��Ƌ}

--- File: .git/objects/pack/pack-2a4980846396d8924dcd3dd270dcec6c6c3fb8e6.pack ---
PACK      �(x�u��r�@ E�|EשּM��*�J���(Q⎗�Ay���3I�3wwn�]�۷q0�B!���9ȿF�~�t����}ڴ��Q�`�Y��oz)�	�H*?+_¦�X,��'D�`9��m��}�%�C �ꦍo���d}:��%�����+���{`*&pTeO��-�`�؉�H�(Qj��VLl%[�I��jՑR�*���~fNӞ���@���f ��u���k�iu�7e�[����U2L�)��CvWص�����f���0���:2�s�KkyΟJ�չ���<�VOU�=��x�R�4��Ó�-�����F���=�Tf@��S]�r������b<�jy�R<9��'-q�F�i�4e��Z.rMP����.����sQДR�嗢�S�r)���9[<v������۽MIl����ڀ�wF�(o��BGH���n��g�i�a��H��H˛��*7oꖅ�i tQJ��n�ǎ�q&���6ƨu�g~	~��k4̱�x�340031Q�K�,�L��/Je8�{�D!���gO���j�W���*�����U/7�A������?�a���'�l� ����x��U[o�4~ϯ�ԇ�����-��b�,�E+!�FN|&�Ա-_�~=�q�tڂx�L��s���ⳛbc�q�ᯱ~nyb�9�`����l(Xy��+ͅ��r�.&=�@ޅ�7�)��}�[��;�^z�/��}��eS�?�m?�u����,���6附�I6^+NxF"��g|X�	4&Nb��6��g���0z�b"KA�8��!��q����G~m j�dS�P����s&��	��C6�j�ɮ�i�b�Y����sb�O�!�Da&���p�N7'ƀ����H&m�֛<!�F��d|h��P�l����v��"OV�Og�l��t���My���w�Œj�>�=R�{=ep�Q��w�Ǡ}ZȚ=܃m%�K����^X�k/Y�ߒ!��mĚb�6v�Si��!�y��� � �;�Y�?�
���#�Fa��������x��L�����1�W�H#0��*�� ����EZ�sTL'C��M�a�cpC���

>�ߕ�B�U؍��RA��<�����~�,�u�90�Q�[U�-m+�^��ę�wL��7����!~F'OA'L����Jѫ�a�%�G����d��ZH��/(������q�A�o�,j��s�To�<ε�+<zF2�B\��ښa9���٩�֏6��S�B�D��B۸e���sD�-�g0 ��e�%z�f\+X��P��H����`���Uz/N.���6�Fq�$�¬�5P��&��߀�]��C���b��Z����Rf��z���י��~Mh��wOXz�/!��>YY�Iwc�2�+�?z�ѕ��ʘS�65��|;�6X���=��i�=��=����������&ټ��-���ӝ`>j/cG۶��1�)���[C��ۨyݕ��/�Q�� ���å�����#ҖY�k��=[����E.hq�$�N��Z��1U�Y�[��j��/�P�x�-��nA��<�%�����?��>Af&���l��"޾��7��g{����C�|c)�h��Ķ�^��f���[��A�CZj<j\p��x��$�����U��FQU|�BA���U����M3�w��ga����7�Eo�2�][�Go��$�8��Ҕ�΁)��������L�*I��c�ؒM�=�p��ll?��

--- File: .git/packed-refs ---
# pack-refs with: peeled fully-peeled sorted 
473771e3791e77405dd4966a20b1f08f3c1f1f37 refs/remotes/origin/main


--- File: .git/refs/heads/main ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .git/refs/remotes/origin/HEAD ---
ref: refs/remotes/origin/main


--- File: .git/refs/remotes/origin/main ---
55a1cbc146410e4ded134a70caf1b814276c3be3


--- File: .gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


--- File: README.md ---
# bodyone-backend-node
Server-side logic for the BodyOne app, built with Node.js. Handles API integrations, database connections, and processes requests from the frontend. Follows Airbnb's JavaScript Style Guide.


--- File: package-lock.json ---
{
  "name": "bodyone-backend-node",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "bodyone-backend-node",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@types/supertest": "^2.0.12",
        "axios": "^1.4.0",
        "bcrypt": "^5.1.0",
        "bcryptjs": "^2.4.3",
        "bull": "^4.10.4",
        "cors": "^2.8.5",
        "express": "^4.18.2",
        "express-session": "~1.17.0",
        "helmet": "^7.0.0",
        "ioredis": "^5.3.2",
        "jest-mock-extended": "^3.0.4",
        "joi": "^17.9.2",
        "jsonwebtoken": "^9.0.0",
        "lodash": "^4.17.21",
        "midjourney": "^2.2.31",
        "mongodb": "^5.5.0",
        "mongoose": "^7.1.1",
        "node-fetch": "^2.6.11",
        "openai": "^3.3.0",
        "passport": "^0.6.0",
        "passport-jwt": "^4.0.1",
        "passport-local": "^1.0.0",
        "redis": "^4.6.6",
        "ts-node": "^10.9.1",
        "typescript": "^5.0.4"
      },
      "devDependencies": {
        "@types/bcrypt": "^5.0.0",
        "@types/bcryptjs": "^2.4.2",
        "@types/cors": "^2.8.13",
        "@types/express-session": "~1.17.0",
        "@types/jest": "^29.5.1",
        "@types/jsonwebtoken": "^9.0.2",
        "@types/mocha": "^10.0.1",
        "@types/mongoose": "^5.11.97",
        "@types/node": "^20.1.7",
        "@types/node-fetch": "^2.6.4",
        "@types/passport": "^1.0.12",
        "@types/passport-jwt": "^3.0.8",
        "@types/passport-local": "^1.0.35",
        "dotenv": "^16.0.3",
        "nodemon": "^2.0.22",
        "supertest": "^6.3.3",
        "ts-jest": "^29.1.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz",
      "integrity": "sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==",
      "peer": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.22.5.tgz",
      "integrity": "sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==",
      "dependencies": {
        "@babel/highlight": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.22.9.tgz",
      "integrity": "sha512-5UamI7xkUcJ3i9qVDS+KFDEK8/7oJ55/sJMB1Ge7IEapr7KfdfV/HErR+koZwOfd+SgtFKOKRhRakdg++DcJpQ==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.22.9.tgz",
      "integrity": "sha512-G2EgeufBcYw27U4hhoIwFcgc1XU7TlXJ3mv04oOv1WCuo900U/anZSPzEqNjwdjgffkk2Gs0AN0dW1CKVLcG7w==",
      "peer": true,
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.9",
        "@babel/helper-compilation-targets": "^7.22.9",
        "@babel/helper-module-transforms": "^7.22.9",
        "@babel/helpers": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.8",
        "@babel/types": "^7.22.5",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.2",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "peer": true
    },
    "node_modules/@babel/core/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/core/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.22.9.tgz",
      "integrity": "sha512-KtLMbmicyuK2Ak/FTCJVbDnkN1SlT8/kceFTiuDiiRUUSMnHMidxSCdG4ndkTOHHpoomWe/4xkvHkEOncwjYIw==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5",
        "@jridgewell/gen-mapping": "^0.3.2",
        "@jridgewell/trace-mapping": "^0.3.17",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.9.tgz",
      "integrity": "sha512-7qYrNM6HjpnPHJbopxmb8hSPoZ0gsX8IvUS32JGVoy+pU9e5N0nLr1VjJoR6kA4d9dmGLxNYOjeB8sUDal2WMw==",
      "peer": true,
      "dependencies": {
        "@babel/compat-data": "^7.22.9",
        "@babel/helper-validator-option": "^7.22.5",
        "browserslist": "^4.21.9",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "peer": true,
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "peer": true
    },
    "node_modules/@babel/helper-environment-visitor": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz",
      "integrity": "sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-function-name": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz",
      "integrity": "sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.22.5",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-hoist-variables": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz",
      "integrity": "sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz",
      "integrity": "sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.22.9.tgz",
      "integrity": "sha512-t+WA2Xn5K+rTeGtC8jCsdAH52bjggG5TKRuRrAGNM/mjIbO4GxvlLMFOEz9wXY5I2XQ60PMFsAG2WIcG82dQMQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-module-imports": "^7.22.5",
        "@babel/helper-simple-access": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/helper-validator-identifier": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz",
      "integrity": "sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz",
      "integrity": "sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-split-export-declaration": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz",
      "integrity": "sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz",
      "integrity": "sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz",
      "integrity": "sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz",
      "integrity": "sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.22.6.tgz",
      "integrity": "sha512-YjDs6y/fVOYFV8hAf1rxd1QvR9wJe1pDBZ2AREKq/SDayfPzgk0PBnVuTCE5X1acEpMMNOVUqoe+OwiZGJ+OaA==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.6",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.22.5.tgz",
      "integrity": "sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.22.5",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "node_modules/@babel/highlight/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.22.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.22.7.tgz",
      "integrity": "sha512-7NF8pOkHP5o2vpmGgNGcfAeCvOYhGLyA3Z4eBQkT1RJlWu47n63bCs93QfJ2hIAFCil7L5P2IWhs1oToVgrL0Q==",
      "peer": true,
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.22.5.tgz",
      "integrity": "sha512-gvyP4hZrgrs/wWMaocvxZ44Hw0b3W8Pe+cMxc8V1ULQ07oh8VNbIRaoD1LRZVTvD+0nieDKjfgKg89sD7rrKrg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.22.5.tgz",
      "integrity": "sha512-1mS2o03i7t1c6VzH6fdQ3OA8tcEIxwG18zIPRp+UY1Ihv6W+XZzBCVxExF9upussPXJ0xE9XRHwMoNs1ep/nRQ==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.5.tgz",
      "integrity": "sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.22.5",
        "@babel/parser": "^7.22.5",
        "@babel/types": "^7.22.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.22.8",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.22.8.tgz",
      "integrity": "sha512-y6LPR+wpM2I3qJrsheCTwhIinzkETbplIgPBbwvqPKc+uljeA5gP+3nP8irdYt1mjQaDnlIcG+dw8OjAco4GXw==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.7",
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-function-name": "^7.22.5",
        "@babel/helper-hoist-variables": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/types": "^7.22.5",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/traverse/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/@babel/types": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.22.5.tgz",
      "integrity": "sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-string-parser": "^7.22.5",
        "@babel/helper-validator-identifier": "^7.22.5",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "peer": true
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "node_modules/@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@huggingface/inference": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@huggingface/inference/-/inference-2.6.1.tgz",
      "integrity": "sha512-qFYchgOCPeEkZJKiSr7Kz62QwukJtgkeQCT7Q0SSKUcvHpTQVNJp6i/JrJMR4dBdzQysJ1SZDC0pLBBnnskTag==",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@ioredis/commands": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.2.0.tgz",
      "integrity": "sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg=="
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "peer": true,
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.6.2.tgz",
      "integrity": "sha512-0N0yZof5hi44HAR2pPS+ikJ3nzKNoZdVu8FffRf3wy47I7Dm7etk/3KetMdRUqzVd16V4O2m2ISpNTbnIuqy1w==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.6.2.tgz",
      "integrity": "sha512-Oj+5B+sDMiMWLhPFF+4/DvHOf+U10rgvCLGPHP8Xlsy/7QxS51aU/eBngudHlJXnaWD5EohAgJ4js+T6pa+zOg==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/reporters": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.5.0",
        "jest-config": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-resolve-dependencies": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/environment": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.6.2.tgz",
      "integrity": "sha512-AEcW43C7huGd/vogTddNNTDRpO6vQ2zaQNrttvWV18ArBx9Z56h7BIsXkNFJVOO4/kblWEQz30ckw0+L3izc+Q==",
      "peer": true,
      "dependencies": {
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-m6DrEJxVKjkELTVAztTLyS/7C92Y2b0VYqmDROYKLLALHn8T/04yPs70NADUYPrV3ruI+H3J0iUIuhkjp7vkfg==",
      "peer": true,
      "dependencies": {
        "expect": "^29.6.2",
        "jest-snapshot": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.6.2.tgz",
      "integrity": "sha512-6zIhM8go3RV2IG4aIZaZbxwpOzz3ZiM23oxAlkquOIole+G6TrbeXnykxWYlqF7kz2HlBjdKtca20x9atkEQYg==",
      "dependencies": {
        "jest-get-type": "^29.4.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.6.2.tgz",
      "integrity": "sha512-euZDmIlWjm1Z0lJ1D0f7a0/y5Kh/koLFMUBE5SUYWrmy8oNhJpbTBDAP6CxKnadcMLDoDf4waRYCe35cH6G6PA==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.6.2.tgz",
      "integrity": "sha512-cjuJmNDjs6aMijCmSa1g2TNG4Lby/AeU7/02VtpW+SLcZXzOLK2GpN2nLqcFjmhy3B3AoPeQVx7BnyOf681bAw==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/types": "^29.6.1",
        "jest-mock": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.6.2.tgz",
      "integrity": "sha512-sWtijrvIav8LgfJZlrGCdN0nP2EWbakglJY49J1Y5QihcQLfy7ovyxxjJBRXMNltgt4uPtEcFmIMbVshEDfFWw==",
      "peer": true,
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/schemas": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.0.tgz",
      "integrity": "sha512-rxLjXyJBTL4LQeJW3aKo0M/+GkCOXsO+8i9Iu7eDb6KwtP65ayoDsitrdPBtujxQ88k4wI2FNYfa6TOGwSn6cQ==",
      "dependencies": {
        "@sinclair/typebox": "^0.27.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.0.tgz",
      "integrity": "sha512-oA+I2SHHQGxDCZpbrsCQSoMLb3Bz547JnM+jUr9qEbuw0vQlWZfpPS7CO9J7XiwKicEz9OFn/IYoLkkiUD7bzA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.6.2.tgz",
      "integrity": "sha512-3VKFXzcV42EYhMCsJQURptSqnyjqCGbtLuX5Xxb6Pm6gUf1wIRIl+mandIRGJyWKgNKYF9cnstti6Ls5ekduqw==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.6.2.tgz",
      "integrity": "sha512-GVYi6PfPwVejO7slw6IDO0qKVum5jtrJ3KoLGbgBWyr2qr4GaxFV6su+ZAjdTX75Sr1DkMFRk09r2ZVa+wtCGw==",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.6.2.tgz",
      "integrity": "sha512-ZqCqEISr58Ce3U+buNFJYUktLJZOggfyvR+bZMaiV1e8B1SIvJbwZMrYz3gx/KAPn9EXmOmN+uB08yLCjWkQQg==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "29.6.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.1.tgz",
      "integrity": "sha512-tPKQNMPuXgvdOn2/Lg9HNfUvjYVGolt04Hp03f5hAk878uwOLikN+JzeLY0HcVgKgFl9Hs3EIqpu3WX27XNhnw==",
      "dependencies": {
        "@jest/schemas": "^29.6.0",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
      "peer": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "peer": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.18",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz",
      "integrity": "sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      }
    },
    "node_modules/@jridgewell/trace-mapping/node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.14",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
      "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
      "peer": true
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.2.tgz",
      "integrity": "sha512-9bfjwDxIDWmmOKusUcqdS4Rw+SETlp9Dy39Xui9BEGEk19dDwH0jhipwFzEff/pFg95NKymc6TOTbRKcWeRqyQ==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.2.tgz",
      "integrity": "sha512-lwriRAHm1Yg4iDf23Oxm9n/t5Zpw1lVnxYU3HnJPTi2lJRkKTrps1KVgvL6m7WvmhYVt/FIsssWay+k45QHeuw==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.2.tgz",
      "integrity": "sha512-MOI9Dlfrpi2Cuc7i5dXdxPbFIgbDBGgKR5F2yWEa6FVEtSWncfVNKW5AKjImAQ6CZlBK9tympdsZJ2xThBiWWA==",
      "cpu": [
        "arm"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.2.tgz",
      "integrity": "sha512-FU20Bo66/f7He9Fp9sP2zaJ1Q8L9uLPZQDub/WlUip78JlPeMbVL8546HbZfcW9LNciEXc8d+tThSJjSC+tmsg==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-linux-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.2.tgz",
      "integrity": "sha512-gsWNDCklNy7Ajk0vBBf9jEx04RUxuDQfBse918Ww+Qb9HCPoGzS+XJTLe96iN3BVK7grnLiYghP/M4L8VsaHeA==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@msgpackr-extract/msgpackr-extract-win32-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.2.tgz",
      "integrity": "sha512-O+6Gs8UeDbyFpbSh2CPEz/UOrrdWPTBYNblZK5CxxLisYt4kGX3Sc+czffFonyjiGSq3jWLwJS/CCJc7tBr4sQ==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@redis/bloom": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/client": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.5.8.tgz",
      "integrity": "sha512-xzElwHIO6rBAqzPeVnCzgvrnBEcFL1P0w8P65VNLRkdVW8rOE58f52hdj0BDgmsdOm4f1EoXPZtH4Fh7M/qUpw==",
      "dependencies": {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        "yallist": "4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@redis/graph": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.0.tgz",
      "integrity": "sha512-16yZWngxyXPd+MJxeSr0dqh2AIOi8j9yXKcKCwVaKDbH3HTuETpDVPcLujhFYVPtYrngSco31BUcSa9TH31Gqg==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/json": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.4.tgz",
      "integrity": "sha512-LUZE2Gdrhg0Rx7AN+cZkb1e6HjoSKaeeW8rYnt89Tly13GBI5eP4CwDVr+MY8BAYfCg4/N15OUrtLoona9uSgw==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/search": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.1.3.tgz",
      "integrity": "sha512-4Dg1JjvCevdiCBTZqjhKkGoC5/BcB7k9j99kdMnaXFXg8x4eyOIVg9487CMv7/BUVkFLZCaIh8ead9mU15DNng==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/time-series": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.0.4.tgz",
      "integrity": "sha512-ThUIgo2U/g7cCuZavucQTQzA9g9JbDDY2f64u3AbAoz/8vE2lt2U37LamDUVChhaDA3IRT9R6VvJwqnUfTJzng==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@sideway/address": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.4.tgz",
      "integrity": "sha512-7vwq+rOHVWjyXxVlR76Agnvhy8I9rpzjosTESvmhNeXOXdZZB15Fl+TI9x1SiHZH5Jv2wTGduSxFDIaq0m3DUw==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "node_modules/@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA=="
    },
    "node_modules/@sinonjs/commons": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.0.tgz",
      "integrity": "sha512-jXBtWAF4vmdNmZgD5FoKsVLv3rPgDnLgPbU84LIJ3otV44vJlDRokVng5v8NFJdCf/da9legHcKaRuZs4L7faA==",
      "peer": true,
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "peer": true,
      "dependencies": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA=="
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag=="
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow=="
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA=="
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.1.tgz",
      "integrity": "sha512-aACu/U/omhdk15O4Nfb+fHgH/z3QsfQzpnvRZhYhThms83ZnAOZz7zZAWO7mn2yyNQaA4xTO8GLK3uqFU4bYYw==",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.4",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.4.tgz",
      "integrity": "sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.1.tgz",
      "integrity": "sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.1.tgz",
      "integrity": "sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/bcrypt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.0.tgz",
      "integrity": "sha512-agtcFKaruL8TmcvqbndlqHPSJgsolhf/qPWchFlgnW1gECTN/nKbFcoFnvKAQRFfKbh+BO6A3SWdJu9t+xF3Lw==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/bcryptjs": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@types/bcryptjs/-/bcryptjs-2.4.2.tgz",
      "integrity": "sha512-LiMQ6EOPob/4yUL66SZzu6Yh77cbzJFYll+ZfaPiPPFswtIlA/Fs1MzdKYA7JApHU49zQTbJGX3PDmCpIdDBRQ==",
      "dev": true
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dev": true,
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cookiejar": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.2.tgz",
      "integrity": "sha512-t73xJJrvdTjXrn4jLS9VSGRbz0nUY3cl2DMGDU48lKl+HR9dbbjW2A9r3g40VA++mQpy6uuHg33gy7du2BKpog=="
    },
    "node_modules/@types/cors": {
      "version": "2.8.13",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.13.tgz",
      "integrity": "sha512-RG8AStHlUiV5ysZQKq97copd2UmVYw3/pRMLefISZ3S1hK104Cwm7iLQ3fTKx+lsUH2CE8FlLaYeEA2LSeqYUA==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/express": {
      "version": "4.17.17",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.17.tgz",
      "integrity": "sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==",
      "dev": true,
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.17.35",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz",
      "integrity": "sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/express-session": {
      "version": "1.17.7",
      "resolved": "https://registry.npmjs.org/@types/express-session/-/express-session-1.17.7.tgz",
      "integrity": "sha512-L25080PBYoRLu472HY/HNCxaXY8AaGgqGC8/p/8+BYMhG0RDOLQ1wpXOpAzr4Gi5TGozTKyJv5BVODM5UNyVMw==",
      "dev": true,
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.6.tgz",
      "integrity": "sha512-Sig0SNORX9fdW+bQuTEovKj3uHcUL6LQKbCrrqb1X7J6/ReAbhCXRAhc+SMejhLELFj2QcyuxmUooZ4bt5ReSw==",
      "peer": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.1.tgz",
      "integrity": "sha512-/K3ds8TRAfBvi5vfjuz8y6+GiAYBZ0x4tXv1Av6CWBWn0IlADc+ZX9pMq7oU0fNQPnBwIZl3rmeLp6SBApbxSQ==",
      "dev": true
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz",
      "integrity": "sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g=="
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
      "integrity": "sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz",
      "integrity": "sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/jest": {
      "version": "29.5.3",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-29.5.3.tgz",
      "integrity": "sha512-1Nq7YrO/vJE/FYnqYyw0FS8LdrjExSgIiHyKg7xPpn+yi8Q4huZryKnkJatN1ZRH89Kw2v33/8ZMB7DuZeSLlA==",
      "dev": true,
      "dependencies": {
        "expect": "^29.0.0",
        "pretty-format": "^29.0.0"
      }
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-drE6uz7QBKq1fYqqoFKTDRdFCPHd5TCub75BM+D+cMx7NU9hUz7SESLfC2fSCXVFMO5Yj8sOWHuGqPgjc+fz0Q==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==",
      "dev": true
    },
    "node_modules/@types/mocha": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/@types/mocha/-/mocha-10.0.1.tgz",
      "integrity": "sha512-/fvYntiO1GeICvqbQ3doGDIP97vWmvFt83GKguJ6prmQM2iXZfFcq6YE8KteFyRtX2/h5Hf91BYvPodJKFYv5Q==",
      "dev": true
    },
    "node_modules/@types/mongoose": {
      "version": "5.11.97",
      "resolved": "https://registry.npmjs.org/@types/mongoose/-/mongoose-5.11.97.tgz",
      "integrity": "sha512-cqwOVYT3qXyLiGw7ueU2kX9noE8DPGRY6z8eUxudhXY8NZ7DMKYAxyZkLSevGfhCX3dO/AoX5/SO9lAzfjon0Q==",
      "deprecated": "Mongoose publishes its own types, so you do not need to install this package.",
      "dev": true,
      "dependencies": {
        "mongoose": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "20.4.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.4.6.tgz",
      "integrity": "sha512-q0RkvNgMweWWIvSMDiXhflGUKMdIxBo2M2tYM/0kEGDueQByFzK4KZAgu5YHGFNxziTlppNpTIBcqHQAxlfHdA=="
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.4",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.4.tgz",
      "integrity": "sha512-1ZX9fcN4Rvkvgv4E6PAY5WXUFWFcRWxZa3EW83UjycOB9ljJCedb2CupIP4RZMEwF/M3eTcCihbBRgwtGbg5Rg==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "node_modules/@types/passport": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/@types/passport/-/passport-1.0.12.tgz",
      "integrity": "sha512-QFdJ2TiAEoXfEQSNDISJR1Tm51I78CymqcBa8imbjo6dNNu+l2huDxxbDEIoFIwOSKMkOfHEikyDuZ38WwWsmw==",
      "dev": true,
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/passport-jwt": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/@types/passport-jwt/-/passport-jwt-3.0.9.tgz",
      "integrity": "sha512-5XJt+79emfgpuBvBQusUPylFIVtW1QVAAkTRwCbRJAmxUjmLtIqUU6V1ovpnHPu6Qut3mR5Juc+s7kd06roNTg==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/jsonwebtoken": "*",
        "@types/passport-strategy": "*"
      }
    },
    "node_modules/@types/passport-local": {
      "version": "1.0.35",
      "resolved": "https://registry.npmjs.org/@types/passport-local/-/passport-local-1.0.35.tgz",
      "integrity": "sha512-K4eLTJ8R0yYW8TvCqkjB0pTKoqfUSdl5PfZdidTjV2ETV3604fQxtY6BHKjQWAx50WUS0lqzBvKv3LoI1ZBPeA==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/passport": "*",
        "@types/passport-strategy": "*"
      }
    },
    "node_modules/@types/passport-strategy": {
      "version": "0.2.35",
      "resolved": "https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.35.tgz",
      "integrity": "sha512-o5D19Jy2XPFoX2rKApykY15et3Apgax00RRLf0RUotPDUsYrQa7x4howLYr9El2mlUApHmCMv5CZ1IXqKFQ2+g==",
      "dev": true,
      "dependencies": {
        "@types/express": "*",
        "@types/passport": "*"
      }
    },
    "node_modules/@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==",
      "dev": true
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==",
      "dev": true
    },
    "node_modules/@types/send": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.1.tgz",
      "integrity": "sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==",
      "dev": true,
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.2.tgz",
      "integrity": "sha512-J2LqtvFYCzaj8pVYKw8klQXrLLk7TBZmQ4ShlcdkELFKGwGMfevMLneMMRkMgZxotOD9wg497LpC7O8PcvAmfw==",
      "dev": true,
      "dependencies": {
        "@types/http-errors": "*",
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.1.tgz",
      "integrity": "sha512-Hl219/BT5fLAaz6NDkSuhzasy49dwQS/DSdu4MdggFB8zcXv7vflBI3xp7FEmkmdDkBUI2bPUNeMttp2knYdxw=="
    },
    "node_modules/@types/superagent": {
      "version": "4.1.18",
      "resolved": "https://registry.npmjs.org/@types/superagent/-/superagent-4.1.18.tgz",
      "integrity": "sha512-LOWgpacIV8GHhrsQU+QMZuomfqXiqzz3ILLkCtKx3Us6AmomFViuzKT9D693QTKgyut2oCytMG8/efOop+DB+w==",
      "dependencies": {
        "@types/cookiejar": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/supertest": {
      "version": "2.0.12",
      "resolved": "https://registry.npmjs.org/@types/supertest/-/supertest-2.0.12.tgz",
      "integrity": "sha512-X3HPWTwXRerBZS7Mo1k6vMVR1Z6zmJcDVn5O/31whe0tnjE4te6ZJSJGq1RiqHPjzPdMTfjCFogDJmwng9xHaQ==",
      "dependencies": {
        "@types/superagent": "*"
      }
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "dependencies": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "17.0.24",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.24.tgz",
      "integrity": "sha512-6i0aC7jV6QzQB8ne1joVZ0eSFIstHsCrobmOtghM11yGlH0j43FKL2UhWdELkyps0zuf7qVTUVCCR+tgSlyLLw==",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.0",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.0.tgz",
      "integrity": "sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA=="
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.10.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.10.0.tgz",
      "integrity": "sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw==",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agent-base/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/agent-base/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "peer": true,
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
    },
    "node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "peer": true,
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "node_modules/axios": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.4.0.tgz",
      "integrity": "sha512-S4XCWMEmzvo64T9GfvQDOXgYRDJ/wsSZc7Jvdgx5u1sd0JwsuPLqb3SYmusag+edF6ziyMensPVqLTSc1PiSEA==",
      "dependencies": {
        "follow-redirects": "^1.15.0",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/axios/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/babel-jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.6.2.tgz",
      "integrity": "sha512-BYCzImLos6J3BH/+HvUCHG1dTf2MzmAB4jaVxHV+29RZLjR29XuYTmsf2sdDwkrb+FczkGo3kOhE7ga6sI0P4A==",
      "peer": true,
      "dependencies": {
        "@jest/transform": "^29.6.2",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.5.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.5.0.tgz",
      "integrity": "sha512-zSuuuAlTMT4mzLj2nPnUm6fsE6270vdOfnpbJ+RmruU75UhLFvL0N2NgI7xpeS7NaB6hGqmd5pVpGTDYvi4Q3w==",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz",
      "integrity": "sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==",
      "peer": true,
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.5.0.tgz",
      "integrity": "sha512-JOMloxOqdiBSxMAzjRaH023/vvcaSaec49zvg+2LmNsktC7ei39LTJGw02J+9uUtTZUq6xbLyJ4dxe9sSmIuAg==",
      "peer": true,
      "dependencies": {
        "babel-plugin-jest-hoist": "^29.5.0",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/bcrypt": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.0.tgz",
      "integrity": "sha512-RHBS7HI5N5tEnGTmtR/pppX0mmDSBpQ4aCBsj7CEQfYXDcO74A8sIBYcJMuCsis2E81zDxeENYhv66oZwLiA+Q==",
      "hasInstallScript": true,
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.10",
        "node-addon-api": "^5.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.21.10",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.10.tgz",
      "integrity": "sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true,
      "dependencies": {
        "caniuse-lite": "^1.0.30001517",
        "electron-to-chromium": "^1.4.477",
        "node-releases": "^2.0.13",
        "update-browserslist-db": "^1.0.11"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bs-logger": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
      "dev": true,
      "dependencies": {
        "fast-json-stable-stringify": "2.x"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "peer": true,
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/bson": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-5.4.0.tgz",
      "integrity": "sha512-WRZ5SQI5GfUuKnPTNmAYPiKIof3ORXAF4IRU5UcgmivNIon01rWQlw5RUH954dpu8yGL8T59YShVddIPaU/gFA==",
      "engines": {
        "node": ">=14.20.1"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "peer": true
    },
    "node_modules/bull": {
      "version": "4.10.4",
      "resolved": "https://registry.npmjs.org/bull/-/bull-4.10.4.tgz",
      "integrity": "sha512-o9m/7HjS/Or3vqRd59evBlWCXd9Lp+ALppKseoSKHaykK46SmRjAilX98PgmOz1yeVaurt8D5UtvEt4bUjM3eA==",
      "dependencies": {
        "cron-parser": "^4.2.1",
        "debuglog": "^1.0.0",
        "get-port": "^5.1.1",
        "ioredis": "^5.0.0",
        "lodash": "^4.17.21",
        "msgpackr": "^1.5.2",
        "semver": "^7.3.2",
        "uuid": "^8.3.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001519",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001519.tgz",
      "integrity": "sha512-0QHgqR+Jv4bxHMp8kZ1Kn8CH55OikjKJ6JmKkZYP1F3D7w+lnFXF70nG5eNfsZS89jadi5Ywy5UCSKLAglIRkg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ci-info": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.8.0.tgz",
      "integrity": "sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
      "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==",
      "peer": true
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "peer": true,
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "peer": true,
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "peer": true
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==",
      "dev": true
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ=="
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "peer": true
    },
    "node_modules/cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "node_modules/cron-parser": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.8.1.tgz",
      "integrity": "sha512-jbokKWGcyU4gl6jAfX97E1gDpY12DJ1cLJZmoDzaAln/shZ+S3KBFBuA2Q6WeUN4gJf/8klnV1EfvhA2lK5IRQ==",
      "dependencies": {
        "luxon": "^3.2.1"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "peer": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/debuglog": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
      "integrity": "sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw==",
      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/dedent": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.1.tgz",
      "integrity": "sha512-+LxW+KLWxu3HW3M2w2ympwtqPrqYRzU8fqi6Fhd18fBALe15blJPI/I4+UHveMVG6lJqB4JNd4UG0S5cnVHwIg==",
      "peer": true,
      "peerDependencies": {
        "babel-plugin-macros": "^3.1.0"
      },
      "peerDependenciesMeta": {
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ=="
    },
    "node_modules/denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "dependencies": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/diff-sequences": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.4.3.tgz",
      "integrity": "sha512-ofrBgwpPhCD85kMKtE9RYFFq6OC1A89oW2vvgWZNCwxrUpRUILopY7lsYyMDSjc8g6U6aiO0Qubg6r4Wgt5ZnA==",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/motdotla/dotenv?sponsor=1"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/electron-to-chromium": {
      "version": "1.4.482",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.482.tgz",
      "integrity": "sha512-h+UqpfmEr1Qkk0zp7ej/jid7CXoq4m4QzW6wNTb0ELJ/BZCpA4wgUylBIMGCe621tnr4l5VmoHjdoSx2lbnNJA==",
      "peer": true
    },
    "node_modules/emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "peer": true,
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "peer": true,
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "peer": true,
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "peer": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-iAErsLxJ8C+S02QbLAwgSGSezLQK+XXRDt8IuFXFpwCNw2ECmzZSmjKcCaFVp5VRMk+WAvz6h6jokzEzBFZEuA==",
      "dependencies": {
        "@jest/expect-utils": "^29.6.2",
        "@types/node": "*",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express-session": {
      "version": "1.17.3",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.3.tgz",
      "integrity": "sha512-4+otWXlShYlG1Ma+2Jnn+xgKUZTMJ5QD3YvfilX3AcocOAbIkVylSWEklzALe/+Pu4qV6TYBj5GwOBFfdKqLBw==",
      "dependencies": {
        "cookie": "0.4.2",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "node_modules/fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "peer": true,
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "peer": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "dev": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/formidable": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.1.2.tgz",
      "integrity": "sha512-CM3GuJ57US06mlpQ47YcunuUZ9jpm8Vx+P2CGt2j7HpgkKZO/DJYQ0Bobim8G6PFQmK5lOqOOdUXboU+h73A4g==",
      "dev": true,
      "dependencies": {
        "dezalgo": "^1.0.4",
        "hexoid": "^1.0.0",
        "once": "^1.4.0",
        "qs": "^6.11.0"
      },
      "funding": {
        "url": "https://ko-fi.com/tunnckoCore/commissions"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "node_modules/gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/generic-pool": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "peer": true,
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "peer": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-port": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/get-port/-/get-port-5.1.1.tgz",
      "integrity": "sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
    },
    "node_modules/helmet": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.0.0.tgz",
      "integrity": "sha512-MsIgYmdBh460ZZ8cJC81q4XJknjG567wzEmv46WOBblDb6TUd3z8/GhgmsM9pn8g2B80tAJ4m5/d3Bi1KrSUBQ==",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/hexoid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "peer": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "peer": true,
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "node_modules/import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "peer": true,
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "peer": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ioredis": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.3.2.tgz",
      "integrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA==",
      "dependencies": {
        "@ioredis/commands": "^1.1.1",
        "cluster-key-slot": "^1.1.0",
        "debug": "^4.3.4",
        "denque": "^2.1.0",
        "lodash.defaults": "^4.2.0",
        "lodash.isarguments": "^3.1.0",
        "redis-errors": "^1.2.0",
        "redis-parser": "^3.0.0",
        "standard-as-callback": "^2.1.0"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/ioredis"
      }
    },
    "node_modules/ioredis/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/ioredis/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "peer": true
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.12.1.tgz",
      "integrity": "sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==",
      "peer": true,
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "peer": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "peer": true
    },
    "node_modules/isomorphic-ws": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-5.0.0.tgz",
      "integrity": "sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz",
      "integrity": "sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "peer": true,
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "peer": true,
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "peer": true,
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "peer": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "peer": true
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
      "peer": true,
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.6.2.tgz",
      "integrity": "sha512-8eQg2mqFbaP7CwfsTpCxQ+sHzw1WuNWL5UUvjnWP4hx2riGz9fPSzYOaU5q8/GqWn1TfgZIVTqYJygbGbWAANg==",
      "peer": true,
      "dependencies": {
        "@jest/core": "^29.6.2",
        "@jest/types": "^29.6.1",
        "import-local": "^3.0.2",
        "jest-cli": "^29.6.2"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.5.0.tgz",
      "integrity": "sha512-IFG34IUMUaNBIxjQXF/iu7g6EcdMrGRRxaUSw92I/2g2YC6vCdTltl4nHvt7Ci5nSJwXIkCu8Ka1DKF+X7Z1Ag==",
      "peer": true,
      "dependencies": {
        "execa": "^5.0.0",
        "p-limit": "^3.1.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.6.2.tgz",
      "integrity": "sha512-G9mN+KOYIUe2sB9kpJkO9Bk18J4dTDArNFPwoZ7WKHKel55eKIS/u2bLthxgojwlf9NLCVQfgzM/WsOVvoC6Fw==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.6.2",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.6.2",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-cli": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.6.2.tgz",
      "integrity": "sha512-TT6O247v6dCEX2UGHGyflMpxhnrL0DNqP2fRTKYm3nJJpCTfXX3GCMQPGFjXDoj0i5/Blp3jriKXFgdfmbYB6Q==",
      "peer": true,
      "dependencies": {
        "@jest/core": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "prompts": "^2.0.1",
        "yargs": "^17.3.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.6.2.tgz",
      "integrity": "sha512-VxwFOC8gkiJbuodG9CPtMRjBUNZEHxwfQXmIudSTzFWxaci3Qub1ddTRbFNQlD/zUeaifLndh/eDccFX4wCMQw==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-jest": "^29.6.2",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.6.2",
        "jest-environment-node": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@types/node": "*",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-diff": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.6.2.tgz",
      "integrity": "sha512-t+ST7CB9GX5F2xKwhwCf0TAR17uNDiaPTZnVymP9lw0lssa9vG+AFyDZoeIHStU3WowFFwT+ky+er0WVl2yGhA==",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.4.3",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.4.3.tgz",
      "integrity": "sha512-fzdTftThczeSD9nZ3fzA/4KkHtnmllawWrXO69vtI+L9WjEIuXWs4AmyME7lN5hU7dB0sHhuPfcKofRsUb/2Fg==",
      "peer": true,
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.6.2.tgz",
      "integrity": "sha512-MsrsqA0Ia99cIpABBc3izS1ZYoYfhIy0NNWqPSE0YXbQjwchyt6B1HD2khzyPe1WiJA7hbxXy77ZoUQxn8UlSw==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "jest-util": "^29.6.2",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.6.2.tgz",
      "integrity": "sha512-YGdFeZ3T9a+/612c5mTQIllvWkddPbYcN2v95ZH24oWMbGA4GGS2XdIF92QMhUhvrjjuQWYgUGW2zawOyH63MQ==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.4.3.tgz",
      "integrity": "sha512-J5Xez4nRRMjk8emnTpWrlkyb9pfRQQanDrvWHhsR1+VUfbwxi30eVcZFlcdGInRibU4G5LwHXpI7IRHU0CY+gg==",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.6.2.tgz",
      "integrity": "sha512-+51XleTDAAysvU8rT6AnS1ZJ+WHVNqhj1k6nTvN2PYP+HjU3kqlaKQ1Lnw3NYW3bm2r8vq82X0Z1nDDHZMzHVA==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.6.2.tgz",
      "integrity": "sha512-aNqYhfp5uYEO3tdWMb2bfWv6f0b4I0LOxVRpnRLAeque2uqOVVMLh6khnTcE2qJ5wAKop0HcreM1btoysD6bPQ==",
      "peer": true,
      "dependencies": {
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.6.2.tgz",
      "integrity": "sha512-4LiAk3hSSobtomeIAzFTe+N8kL6z0JtF3n6I4fg29iIW7tt99R7ZcIFW34QkX+DuVrf+CUe6wuVOpm7ZKFJzZQ==",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.6.2.tgz",
      "integrity": "sha512-vnIGYEjoPSuRqV8W9t+Wow95SDp6KPX2Uf7EoeG9G99J2OVh7OSwpS4B6J0NfpEIpfkBNHlBZpA2rblEuEFhZQ==",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.6.2.tgz",
      "integrity": "sha512-hoSv3lb3byzdKfwqCuT6uTscan471GUECqgNYykg6ob0yiAw3zYc7OrPnI9Qv8Wwoa4lC7AZ9hyS4AiIx5U2zg==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-util": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock-extended": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-3.0.5.tgz",
      "integrity": "sha512-/eHdaNPUAXe7f65gHH5urc8SbRVWjYxBqmCgax2uqOBJy8UUcCBMN1upj1eZ8y/i+IqpyEm4Kq0VKss/GCCTdw==",
      "dependencies": {
        "ts-essentials": "^7.0.3"
      },
      "peerDependencies": {
        "jest": "^24.0.0 || ^25.0.0 || ^26.0.0 || ^27.0.0 || ^28.0.0 || ^29.0.0",
        "typescript": "^3.0.0 || ^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "peer": true,
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.4.3.tgz",
      "integrity": "sha512-O4FglZaMmWXbGHSQInfXewIsd1LMn9p3ZXB/6r4FOkyhX2/iP/soMG98jGvk/A3HAN78+5VWcBGO0BJAPRh4kg==",
      "peer": true,
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.6.2.tgz",
      "integrity": "sha512-G/iQUvZWI5e3SMFssc4ug4dH0aZiZpsDq9o1PtXTV1210Ztyb2+w+ZgQkB3iOiC5SmAEzJBOHWz6Hvrd+QnNPw==",
      "peer": true,
      "dependencies": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.6.2.tgz",
      "integrity": "sha512-LGqjDWxg2fuQQm7ypDxduLu/m4+4Lb4gczc13v51VMZbVP5tSBILqVx8qfWcsdP8f0G7aIqByIALDB0R93yL+w==",
      "peer": true,
      "dependencies": {
        "jest-regex-util": "^29.4.3",
        "jest-snapshot": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.6.2.tgz",
      "integrity": "sha512-wXOT/a0EspYgfMiYHxwGLPCZfC0c38MivAlb2lMEAlwHINKemrttu1uSbcGbfDV31sFaPWnWJPmb2qXM8pqZ4w==",
      "peer": true,
      "dependencies": {
        "@jest/console": "^29.6.2",
        "@jest/environment": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.4.3",
        "jest-environment-node": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-leak-detector": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-resolve": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "jest-worker": "^29.6.2",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.6.2.tgz",
      "integrity": "sha512-2X9dqK768KufGJyIeLmIzToDmsN0m7Iek8QNxRSI/2+iPFYHF0jTwlO3ftn7gdKd98G/VQw9XJCk77rbTGZnJg==",
      "peer": true,
      "dependencies": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/globals": "^29.6.2",
        "@jest/source-map": "^29.6.0",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.6.2.tgz",
      "integrity": "sha512-1OdjqvqmRdGNvWXr/YZHuyhh5DeaLp1p/F8Tht/MrMw4Kr1Uu/j4lRG+iKl1DAqUJDWxtQBMk41Lnf/JETYBRA==",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.6.2",
        "semver": "^7.5.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.6.2.tgz",
      "integrity": "sha512-3eX1qb6L88lJNCFlEADKOkjpXJQyZRiavX1INZ4tRnrBVr2COd3RgcTLyUiEXMNBlDU/cgYq6taUS0fExrWW4w==",
      "dependencies": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.6.2.tgz",
      "integrity": "sha512-vGz0yMN5fUFRRbpJDPwxMpgSXW1LDKROHfBopAvDcmD6s+B/s8WJrwi+4bfH4SdInBA5C3P3BI19dBtKzx1Arg==",
      "peer": true,
      "dependencies": {
        "@jest/types": "^29.6.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.6.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watcher": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.6.2.tgz",
      "integrity": "sha512-GZitlqkMkhkefjfN/p3SJjrDaxPflqxEAv3/ik10OirZqJGYH5rPiIsgVcfof0Tdqg3shQGdEIxDBx+B4tuLzA==",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.6.2",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.6.2.tgz",
      "integrity": "sha512-l3ccBOabTdkng8I/ORCkADz4eSMKejTYv1vB/Z83UiubqhC1oQ5Li6dWCyqOIvSifGjUBxuvxvlm6KGK2DtuAQ==",
      "peer": true,
      "dependencies": {
        "@types/node": "*",
        "jest-util": "^29.6.2",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "peer": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/joi": {
      "version": "17.9.2",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.9.2.tgz",
      "integrity": "sha512-Itk/r+V4Dx0V3c7RLFdRh12IOjySm2/WGPMubBT92cQvRfYZhPM2W0hZlctjj72iES8jsRCwp7S/cRmWBnJ4nw==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0",
        "@hapi/topo": "^5.0.0",
        "@sideway/address": "^4.1.3",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "peer": true,
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "peer": true,
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "peer": true
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.1.tgz",
      "integrity": "sha512-K8wx7eJ5TPvEjuiVSkv167EVboBDv9PZdDoF7BgeQnBLVvZWW9clr2PsQHVJDTKaEIH5JBIwHujGcHp7GgI2eg==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash": "^4.17.21",
        "ms": "^2.1.1",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA==",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "peer": true
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "peer": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ=="
    },
    "node_modules/lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg=="
    },
    "node_modules/lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "dev": true
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/luxon": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
      "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "peer": true,
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "peer": true
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "dependencies": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/midjourney": {
      "version": "2.7.79",
      "resolved": "https://registry.npmjs.org/midjourney/-/midjourney-2.7.79.tgz",
      "integrity": "sha512-klnOas1htHIIDlw+SyX6/kaT3wNNbbtxJaFpEqnJnw5w++a1WfbjFhgiD4QWggbSvsACbJukV6LWsvgyvf7WOQ==",
      "dependencies": {
        "@huggingface/inference": "^2.5.0",
        "isomorphic-ws": "^5.0.0",
        "mime": "^3.0.0",
        "p-queue": "^6.6.2",
        "snowyflake": "^2.0.0",
        "throat": "^6.0.2",
        "tslib": "^2.5.0",
        "websocket-ts": "^1.1.1",
        "ws": "^8.13.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/midjourney/node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/mongodb": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.7.0.tgz",
      "integrity": "sha512-zm82Bq33QbqtxDf58fLWBwTjARK3NSvKYjyz997KSy6hpat0prjeX/kxjbPVyZY60XYPDNETaHkHJI2UCzSLuw==",
      "dependencies": {
        "bson": "^5.4.0",
        "mongodb-connection-string-url": "^2.6.0",
        "socks": "^2.7.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "optionalDependencies": {
        "saslprep": "^1.0.3"
      },
      "peerDependencies": {
        "@aws-sdk/credential-providers": "^3.201.0",
        "@mongodb-js/zstd": "^1.1.0",
        "kerberos": "^2.0.1",
        "mongodb-client-encryption": ">=2.3.0 <3",
        "snappy": "^7.2.2"
      },
      "peerDependenciesMeta": {
        "@aws-sdk/credential-providers": {
          "optional": true
        },
        "@mongodb-js/zstd": {
          "optional": true
        },
        "kerberos": {
          "optional": true
        },
        "mongodb-client-encryption": {
          "optional": true
        },
        "snappy": {
          "optional": true
        }
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "dependencies": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/tr46": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
      "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongodb-connection-string-url/node_modules/whatwg-url": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
      "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
      "dependencies": {
        "tr46": "^3.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/mongoose": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-7.4.1.tgz",
      "integrity": "sha512-o3E5KHHiHdaiwCJG3+9r70sncRKki71Ktf/TfXdW6myu+53rtZ56uLl5ylkQiCf60V3COJuOeekcxXVsjQ7cBA==",
      "dependencies": {
        "bson": "^5.4.0",
        "kareem": "2.5.1",
        "mongodb": "5.7.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mongoose"
      }
    },
    "node_modules/mongoose/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "dependencies": {
        "debug": "4.x"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/mquery/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/mquery/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/msgpackr": {
      "version": "1.9.6",
      "resolved": "https://registry.npmjs.org/msgpackr/-/msgpackr-1.9.6.tgz",
      "integrity": "sha512-50rmb6+ZWvEm0vJn8R8CwI1Eavss3h5rgtKrcdUal3EkZcpqw82+xsmc7RoHb8fYB5V4EOU2NDaOitDAdO0t+w==",
      "optionalDependencies": {
        "msgpackr-extract": "^3.0.2"
      }
    },
    "node_modules/msgpackr-extract": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/msgpackr-extract/-/msgpackr-extract-3.0.2.tgz",
      "integrity": "sha512-SdzXp4kD/Qf8agZ9+iTu6eql0m3kWm1A2y1hkpTeVNENutaB0BwHlSvAIaMxwntmRUAUjon2V4L8Z/njd0Ct8A==",
      "hasInstallScript": true,
      "optional": true,
      "dependencies": {
        "node-gyp-build-optional-packages": "5.0.7"
      },
      "bin": {
        "download-msgpackr-prebuilds": "bin/download-prebuilds.js"
      },
      "optionalDependencies": {
        "@msgpackr-extract/msgpackr-extract-darwin-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-darwin-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-win32-x64": "3.0.2"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "peer": true
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA=="
    },
    "node_modules/node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-C/fGU2E8ToujUivIO0H+tpQ6HWo4eEmchoPIoXtxCrVghxdKq+QOHqEZW7tuP3KlV3bC8FRMO5nMCC7Zm1VP6g==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-gyp-build-optional-packages": {
      "version": "5.0.7",
      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.0.7.tgz",
      "integrity": "sha512-YlCCc6Wffkx0kHkmam79GKvDQ6x+QZkMjFGrIMxgFNILFvGSbCp2fCBC55pGTT9gVaz8Na5CLmxt/urtzRv36w==",
      "optional": true,
      "bin": {
        "node-gyp-build-optional-packages": "bin.js",
        "node-gyp-build-optional-packages-optional": "optional.js",
        "node-gyp-build-optional-packages-test": "build-test.js"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "peer": true
    },
    "node_modules/node-releases": {
      "version": "2.0.13",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.13.tgz",
      "integrity": "sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==",
      "peer": true
    },
    "node_modules/nodemon": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz",
      "integrity": "sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==",
      "dev": true,
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/nodemon/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/nodemon/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/nodemon/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "peer": true,
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "peer": true,
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/openai": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-3.3.0.tgz",
      "integrity": "sha512-uqxI/Au+aPRnsaQRe8CojU0eCR7I0mBiKjD3sNMzY6DaC1ZVrc85u98mtJW6voDug8fgGN+DIZmTDxTthxb7dQ==",
      "dependencies": {
        "axios": "^0.26.0",
        "form-data": "^4.0.0"
      }
    },
    "node_modules/openai/node_modules/axios": {
      "version": "0.26.1",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.26.1.tgz",
      "integrity": "sha512-fPwcX4EvnSHuInCMItEhAGnaSEXRBjtzh9fOtsE6E1G6p7vl7edEeZe11QHf18+6+9gR5PbKV/sGKNaD8YaMeA==",
      "dependencies": {
        "follow-redirects": "^1.14.8"
      }
    },
    "node_modules/openai/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "peer": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "peer": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-locate/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "peer": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-queue": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/p-queue/-/p-queue-6.6.2.tgz",
      "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
      "dependencies": {
        "eventemitter3": "^4.0.4",
        "p-timeout": "^3.2.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "dependencies": {
        "p-finally": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/passport": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
      "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
      "dependencies": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1",
        "utils-merge": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/jaredhanson"
      }
    },
    "node_modules/passport-jwt": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.1.tgz",
      "integrity": "sha512-UCKMDYhNuGOBE9/9Ycuoyh7vP6jpeTp/+sfMJl7nLff/t6dps+iaeE0hhNkKN8/HZHcJ7lCdOyDxHdDoxoSvdQ==",
      "dependencies": {
        "jsonwebtoken": "^9.0.0",
        "passport-strategy": "^1.0.0"
      }
    },
    "node_modules/passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha512-9wCE6qKznvf9mQYYbgJ3sVOHmCWoUNMVFoZzNoznmISbhnNNPhN9xfY3sLmScHMetEJeoY7CXwfhCe7argfQow==",
      "dependencies": {
        "passport-strategy": "1.x.x"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha512-CB97UUvDKJde2V0KDWWB3lyf6PC3FaZP7YxZ2G8OAtn9p4HI9j9JLP9qjOGZFvyl8uwNT8qM+hGnz/n16NI7oA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "peer": true
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "node_modules/pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha512-KG8UEiEVkR3wGEb4m5yZkVCzigAD+cVEJck2CzYZO37ZGJfctvVptVO192MwrtPhzONn6go8ylnOdMhKqi4nfg=="
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "peer": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "peer": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "peer": true,
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pretty-format": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.6.2.tgz",
      "integrity": "sha512-1q0oC8eRveTg5nnBEWMXAU2qpv65Gnuf2eCQzSjxpWFkPaPARwqZZDGuNE0zPAZfTCHzIk3A8dIjwlQKKLphyg==",
      "dependencies": {
        "@jest/schemas": "^29.6.0",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "peer": true,
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "node_modules/punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pure-rand": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.0.2.tgz",
      "integrity": "sha512-6Yg0ekpKICSjPswYOuC5sku/TSWaRYlA0qsXqJgM/d/4pLPHPuTxK7Nbf7jFKzAeedUhR8C7K9Uv63FBsSo8xQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/dubzzz"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fast-check"
        }
      ],
      "peer": true
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react-is": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/redis": {
      "version": "4.6.7",
      "resolved": "https://registry.npmjs.org/redis/-/redis-4.6.7.tgz",
      "integrity": "sha512-KrkuNJNpCwRm5vFJh0tteMxW8SaUzkm5fBH7eL5hd/D0fAkzvapxbfGPP/r+4JAXdQuX7nebsBkBqA2RHB7Usw==",
      "dependencies": {
        "@redis/bloom": "1.2.0",
        "@redis/client": "1.5.8",
        "@redis/graph": "1.1.0",
        "@redis/json": "1.0.4",
        "@redis/search": "1.1.3",
        "@redis/time-series": "1.0.4"
      }
    },
    "node_modules/redis-errors": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/redis-parser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
      "dependencies": {
        "redis-errors": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.2",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.2.tgz",
      "integrity": "sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==",
      "peer": true,
      "dependencies": {
        "is-core-module": "^2.11.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "peer": true,
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve.exports": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
      "integrity": "sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "peer": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "node_modules/simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "dependencies": {
        "semver": "~7.0.0"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/simple-update-notifier/node_modules/semver": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
      "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "peer": true
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/snowyflake": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/snowyflake/-/snowyflake-2.0.0.tgz",
      "integrity": "sha512-BxeqV0KJxJASu6EBJGUkX194Zhh37AEa0ow/JRK39icWbLTG9Wl/7LAL6a/ZMSjNm4O9pZk6QoLcWP7f/YKmtA==",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "dependencies": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.13.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "peer": true,
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "peer": true
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/standard-as-callback": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A=="
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "peer": true,
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "peer": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/superagent": {
      "version": "8.0.9",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.0.9.tgz",
      "integrity": "sha512-4C7Bh5pyHTvU33KpZgwrNKh/VQnvgtCSqPRfJAUdmrtSYePVzVg4E4OzsrbkhJj9O7SO6Bnv75K/F8XVZT8YHA==",
      "dev": true,
      "dependencies": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^2.1.2",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=6.4.0 <13 || >=14"
      }
    },
    "node_modules/superagent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dev": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/superagent/node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dev": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/superagent/node_modules/mime": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
      "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
      "dev": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/superagent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "dev": true
    },
    "node_modules/supertest": {
      "version": "6.3.3",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-6.3.3.tgz",
      "integrity": "sha512-EMCG6G8gDu5qEqRQ3JjjPs6+FYT1a7Hv5ApHvtSghmOFJYtsU5S+pSb6Y2EUeCEY3CmEL3mmQ8YWlPOzQomabA==",
      "dev": true,
      "dependencies": {
        "methods": "^1.1.2",
        "superagent": "^8.0.5"
      },
      "engines": {
        "node": ">=6.4.0"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "peer": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tar": {
      "version": "6.1.15",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.15.tgz",
      "integrity": "sha512-/zKt9UyngnxIT/EAGYuxaMYgOIJiP81ab9ZfkILq4oNLPFX50qyYmu7jRj9qeXoxmJHjGlbH0+cm2uy1WCs10A==",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "peer": true,
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ=="
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "peer": true
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "dependencies": {
        "nopt": "~1.0.10"
      },
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/touch/node_modules/nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
      "dev": true,
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/ts-essentials": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/ts-essentials/-/ts-essentials-7.0.3.tgz",
      "integrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ==",
      "peerDependencies": {
        "typescript": ">=3.7.0"
      }
    },
    "node_modules/ts-jest": {
      "version": "29.1.1",
      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.1.1.tgz",
      "integrity": "sha512-D6xjnnbP17cC85nliwGiL+tpoKN0StpgE0TeOjXQTU6MVCfsB4v7aW05CgQ/1OywGb0x/oy9hHFnN+sczTiRaA==",
      "dev": true,
      "dependencies": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^29.0.0",
        "json5": "^2.2.3",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "^7.5.3",
        "yargs-parser": "^21.0.1"
      },
      "bin": {
        "ts-jest": "cli.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": ">=7.0.0-beta.0 <8",
        "@jest/types": "^29.0.0",
        "babel-jest": "^29.0.0",
        "jest": "^29.0.0",
        "typescript": ">=4.3 <6"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "@jest/types": {
          "optional": true
        },
        "babel-jest": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        }
      }
    },
    "node_modules/ts-node": {
      "version": "10.9.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
      "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/tslib": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.1.tgz",
      "integrity": "sha512-t0hLfiEKfMUoqhG+U1oid7Pva4bbDPHYfJNiB7BiIjRkj1pyC++4N3huJfqY6aRH6VTB0rvtzQwjM4K6qpfOig=="
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typescript": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.1.6.tgz",
      "integrity": "sha512-zaWCozRZ6DLEWAWFrVDz1H6FVXzUSfTy5FUMWsQlU8Ym5JP9eO4xkTIROFCQvhQf61z6O/G6ugw3SgAnvvm+HA==",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz",
      "integrity": "sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "peer": true,
      "dependencies": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg=="
    },
    "node_modules/v8-to-istanbul": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.1.0.tgz",
      "integrity": "sha512-6z3GW9x8G1gd+JIIgQQQxXuiJtCXeAjp6RaPEPLv62mH3iPHPxV6W3robxtCzNErRo6ZwTmzWhsbNvjyEBKzKA==",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/v8-to-istanbul/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "peer": true
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "peer": true,
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/websocket-ts": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/websocket-ts/-/websocket-ts-1.1.1.tgz",
      "integrity": "sha512-rm+S60J74Ckw5iizzgID12ju+OfaHAa6dhXhULIOrXkl0e05RzxfY42/vMStpz5jWL3iz9mkyjPcFUY1IgI0fw=="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "peer": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "peer": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "peer": true,
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/ws": {
      "version": "8.13.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.13.0.tgz",
      "integrity": "sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "peer": true,
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  },
  "dependencies": {
    "@ampproject/remapping": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz",
      "integrity": "sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==",
      "peer": true,
      "requires": {
        "@jridgewell/gen-mapping": "^0.3.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@babel/code-frame": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.22.5.tgz",
      "integrity": "sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==",
      "requires": {
        "@babel/highlight": "^7.22.5"
      }
    },
    "@babel/compat-data": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.22.9.tgz",
      "integrity": "sha512-5UamI7xkUcJ3i9qVDS+KFDEK8/7oJ55/sJMB1Ge7IEapr7KfdfV/HErR+koZwOfd+SgtFKOKRhRakdg++DcJpQ==",
      "peer": true
    },
    "@babel/core": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.22.9.tgz",
      "integrity": "sha512-G2EgeufBcYw27U4hhoIwFcgc1XU7TlXJ3mv04oOv1WCuo900U/anZSPzEqNjwdjgffkk2Gs0AN0dW1CKVLcG7w==",
      "peer": true,
      "requires": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.9",
        "@babel/helper-compilation-targets": "^7.22.9",
        "@babel/helper-module-transforms": "^7.22.9",
        "@babel/helpers": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.8",
        "@babel/types": "^7.22.5",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.2",
        "semver": "^6.3.1"
      },
      "dependencies": {
        "convert-source-map": {
          "version": "1.9.0",
          "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
          "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
          "peer": true
        },
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        },
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        }
      }
    },
    "@babel/generator": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.22.9.tgz",
      "integrity": "sha512-KtLMbmicyuK2Ak/FTCJVbDnkN1SlT8/kceFTiuDiiRUUSMnHMidxSCdG4ndkTOHHpoomWe/4xkvHkEOncwjYIw==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5",
        "@jridgewell/gen-mapping": "^0.3.2",
        "@jridgewell/trace-mapping": "^0.3.17",
        "jsesc": "^2.5.1"
      }
    },
    "@babel/helper-compilation-targets": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.9.tgz",
      "integrity": "sha512-7qYrNM6HjpnPHJbopxmb8hSPoZ0gsX8IvUS32JGVoy+pU9e5N0nLr1VjJoR6kA4d9dmGLxNYOjeB8sUDal2WMw==",
      "peer": true,
      "requires": {
        "@babel/compat-data": "^7.22.9",
        "@babel/helper-validator-option": "^7.22.5",
        "browserslist": "^4.21.9",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "dependencies": {
        "lru-cache": {
          "version": "5.1.1",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
          "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
          "peer": true,
          "requires": {
            "yallist": "^3.0.2"
          }
        },
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        },
        "yallist": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
          "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
          "peer": true
        }
      }
    },
    "@babel/helper-environment-visitor": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz",
      "integrity": "sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==",
      "peer": true
    },
    "@babel/helper-function-name": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz",
      "integrity": "sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.22.5",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-hoist-variables": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz",
      "integrity": "sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-module-imports": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz",
      "integrity": "sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-module-transforms": {
      "version": "7.22.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.22.9.tgz",
      "integrity": "sha512-t+WA2Xn5K+rTeGtC8jCsdAH52bjggG5TKRuRrAGNM/mjIbO4GxvlLMFOEz9wXY5I2XQ60PMFsAG2WIcG82dQMQ==",
      "peer": true,
      "requires": {
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-module-imports": "^7.22.5",
        "@babel/helper-simple-access": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/helper-validator-identifier": "^7.22.5"
      }
    },
    "@babel/helper-plugin-utils": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz",
      "integrity": "sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==",
      "peer": true
    },
    "@babel/helper-simple-access": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz",
      "integrity": "sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-split-export-declaration": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz",
      "integrity": "sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/helper-string-parser": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz",
      "integrity": "sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==",
      "peer": true
    },
    "@babel/helper-validator-identifier": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz",
      "integrity": "sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ=="
    },
    "@babel/helper-validator-option": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz",
      "integrity": "sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==",
      "peer": true
    },
    "@babel/helpers": {
      "version": "7.22.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.22.6.tgz",
      "integrity": "sha512-YjDs6y/fVOYFV8hAf1rxd1QvR9wJe1pDBZ2AREKq/SDayfPzgk0PBnVuTCE5X1acEpMMNOVUqoe+OwiZGJ+OaA==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.22.5",
        "@babel/traverse": "^7.22.6",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/highlight": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.22.5.tgz",
      "integrity": "sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==",
      "requires": {
        "@babel/helper-validator-identifier": "^7.22.5",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "3.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
          "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
          "requires": {
            "color-convert": "^1.9.0"
          }
        },
        "chalk": {
          "version": "2.4.2",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
          "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
          "requires": {
            "ansi-styles": "^3.2.1",
            "escape-string-regexp": "^1.0.5",
            "supports-color": "^5.3.0"
          }
        },
        "color-convert": {
          "version": "1.9.3",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
          "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
          "requires": {
            "color-name": "1.1.3"
          }
        },
        "color-name": {
          "version": "1.1.3",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
          "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
        },
        "escape-string-regexp": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
          "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg=="
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw=="
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "@babel/parser": {
      "version": "7.22.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.22.7.tgz",
      "integrity": "sha512-7NF8pOkHP5o2vpmGgNGcfAeCvOYhGLyA3Z4eBQkT1RJlWu47n63bCs93QfJ2hIAFCil7L5P2IWhs1oToVgrL0Q==",
      "peer": true
    },
    "@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.12.13"
      }
    },
    "@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-jsx": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.22.5.tgz",
      "integrity": "sha512-gvyP4hZrgrs/wWMaocvxZ44Hw0b3W8Pe+cMxc8V1ULQ07oh8VNbIRaoD1LRZVTvD+0nieDKjfgKg89sD7rrKrg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.22.5"
      }
    },
    "@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.14.5"
      }
    },
    "@babel/plugin-syntax-typescript": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.22.5.tgz",
      "integrity": "sha512-1mS2o03i7t1c6VzH6fdQ3OA8tcEIxwG18zIPRp+UY1Ihv6W+XZzBCVxExF9upussPXJ0xE9XRHwMoNs1ep/nRQ==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.22.5"
      }
    },
    "@babel/template": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.5.tgz",
      "integrity": "sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.22.5",
        "@babel/parser": "^7.22.5",
        "@babel/types": "^7.22.5"
      }
    },
    "@babel/traverse": {
      "version": "7.22.8",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.22.8.tgz",
      "integrity": "sha512-y6LPR+wpM2I3qJrsheCTwhIinzkETbplIgPBbwvqPKc+uljeA5gP+3nP8irdYt1mjQaDnlIcG+dw8OjAco4GXw==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.22.5",
        "@babel/generator": "^7.22.7",
        "@babel/helper-environment-visitor": "^7.22.5",
        "@babel/helper-function-name": "^7.22.5",
        "@babel/helper-hoist-variables": "^7.22.5",
        "@babel/helper-split-export-declaration": "^7.22.6",
        "@babel/parser": "^7.22.7",
        "@babel/types": "^7.22.5",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        }
      }
    },
    "@babel/types": {
      "version": "7.22.5",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.22.5.tgz",
      "integrity": "sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==",
      "peer": true,
      "requires": {
        "@babel/helper-string-parser": "^7.22.5",
        "@babel/helper-validator-identifier": "^7.22.5",
        "to-fast-properties": "^2.0.0"
      }
    },
    "@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "peer": true
    },
    "@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "requires": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "dependencies": {
        "@jridgewell/trace-mapping": {
          "version": "0.3.9",
          "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
          "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
          "requires": {
            "@jridgewell/resolve-uri": "^3.0.3",
            "@jridgewell/sourcemap-codec": "^1.4.10"
          }
        }
      }
    },
    "@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@huggingface/inference": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/@huggingface/inference/-/inference-2.6.1.tgz",
      "integrity": "sha512-qFYchgOCPeEkZJKiSr7Kz62QwukJtgkeQCT7Q0SSKUcvHpTQVNJp6i/JrJMR4dBdzQysJ1SZDC0pLBBnnskTag=="
    },
    "@ioredis/commands": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.2.0.tgz",
      "integrity": "sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg=="
    },
    "@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "peer": true,
      "requires": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      }
    },
    "@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "peer": true
    },
    "@jest/console": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.6.2.tgz",
      "integrity": "sha512-0N0yZof5hi44HAR2pPS+ikJ3nzKNoZdVu8FffRf3wy47I7Dm7etk/3KetMdRUqzVd16V4O2m2ISpNTbnIuqy1w==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0"
      }
    },
    "@jest/core": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.6.2.tgz",
      "integrity": "sha512-Oj+5B+sDMiMWLhPFF+4/DvHOf+U10rgvCLGPHP8Xlsy/7QxS51aU/eBngudHlJXnaWD5EohAgJ4js+T6pa+zOg==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/reporters": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.5.0",
        "jest-config": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-resolve-dependencies": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "@jest/environment": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.6.2.tgz",
      "integrity": "sha512-AEcW43C7huGd/vogTddNNTDRpO6vQ2zaQNrttvWV18ArBx9Z56h7BIsXkNFJVOO4/kblWEQz30ckw0+L3izc+Q==",
      "peer": true,
      "requires": {
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2"
      }
    },
    "@jest/expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-m6DrEJxVKjkELTVAztTLyS/7C92Y2b0VYqmDROYKLLALHn8T/04yPs70NADUYPrV3ruI+H3J0iUIuhkjp7vkfg==",
      "peer": true,
      "requires": {
        "expect": "^29.6.2",
        "jest-snapshot": "^29.6.2"
      }
    },
    "@jest/expect-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.6.2.tgz",
      "integrity": "sha512-6zIhM8go3RV2IG4aIZaZbxwpOzz3ZiM23oxAlkquOIole+G6TrbeXnykxWYlqF7kz2HlBjdKtca20x9atkEQYg==",
      "requires": {
        "jest-get-type": "^29.4.3"
      }
    },
    "@jest/fake-timers": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.6.2.tgz",
      "integrity": "sha512-euZDmIlWjm1Z0lJ1D0f7a0/y5Kh/koLFMUBE5SUYWrmy8oNhJpbTBDAP6CxKnadcMLDoDf4waRYCe35cH6G6PA==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "@jest/globals": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.6.2.tgz",
      "integrity": "sha512-cjuJmNDjs6aMijCmSa1g2TNG4Lby/AeU7/02VtpW+SLcZXzOLK2GpN2nLqcFjmhy3B3AoPeQVx7BnyOf681bAw==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/types": "^29.6.1",
        "jest-mock": "^29.6.2"
      }
    },
    "@jest/reporters": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.6.2.tgz",
      "integrity": "sha512-sWtijrvIav8LgfJZlrGCdN0nP2EWbakglJY49J1Y5QihcQLfy7ovyxxjJBRXMNltgt4uPtEcFmIMbVshEDfFWw==",
      "peer": true,
      "requires": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      }
    },
    "@jest/schemas": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.0.tgz",
      "integrity": "sha512-rxLjXyJBTL4LQeJW3aKo0M/+GkCOXsO+8i9Iu7eDb6KwtP65ayoDsitrdPBtujxQ88k4wI2FNYfa6TOGwSn6cQ==",
      "requires": {
        "@sinclair/typebox": "^0.27.8"
      }
    },
    "@jest/source-map": {
      "version": "29.6.0",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.0.tgz",
      "integrity": "sha512-oA+I2SHHQGxDCZpbrsCQSoMLb3Bz547JnM+jUr9qEbuw0vQlWZfpPS7CO9J7XiwKicEz9OFn/IYoLkkiUD7bzA==",
      "peer": true,
      "requires": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      }
    },
    "@jest/test-result": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.6.2.tgz",
      "integrity": "sha512-3VKFXzcV42EYhMCsJQURptSqnyjqCGbtLuX5Xxb6Pm6gUf1wIRIl+mandIRGJyWKgNKYF9cnstti6Ls5ekduqw==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      }
    },
    "@jest/test-sequencer": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.6.2.tgz",
      "integrity": "sha512-GVYi6PfPwVejO7slw6IDO0qKVum5jtrJ3KoLGbgBWyr2qr4GaxFV6su+ZAjdTX75Sr1DkMFRk09r2ZVa+wtCGw==",
      "peer": true,
      "requires": {
        "@jest/test-result": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "slash": "^3.0.0"
      }
    },
    "@jest/transform": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.6.2.tgz",
      "integrity": "sha512-ZqCqEISr58Ce3U+buNFJYUktLJZOggfyvR+bZMaiV1e8B1SIvJbwZMrYz3gx/KAPn9EXmOmN+uB08yLCjWkQQg==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.1",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      }
    },
    "@jest/types": {
      "version": "29.6.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.1.tgz",
      "integrity": "sha512-tPKQNMPuXgvdOn2/Lg9HNfUvjYVGolt04Hp03f5hAk878uwOLikN+JzeLY0HcVgKgFl9Hs3EIqpu3WX27XNhnw==",
      "requires": {
        "@jest/schemas": "^29.6.0",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      }
    },
    "@jridgewell/gen-mapping": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
      "peer": true,
      "requires": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w=="
    },
    "@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "peer": true
    },
    "@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "@jridgewell/trace-mapping": {
      "version": "0.3.18",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz",
      "integrity": "sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==",
      "peer": true,
      "requires": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      },
      "dependencies": {
        "@jridgewell/sourcemap-codec": {
          "version": "1.4.14",
          "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
          "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
          "peer": true
        }
      }
    },
    "@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "requires": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      }
    },
    "@msgpackr-extract/msgpackr-extract-darwin-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.2.tgz",
      "integrity": "sha512-9bfjwDxIDWmmOKusUcqdS4Rw+SETlp9Dy39Xui9BEGEk19dDwH0jhipwFzEff/pFg95NKymc6TOTbRKcWeRqyQ==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-darwin-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.2.tgz",
      "integrity": "sha512-lwriRAHm1Yg4iDf23Oxm9n/t5Zpw1lVnxYU3HnJPTi2lJRkKTrps1KVgvL6m7WvmhYVt/FIsssWay+k45QHeuw==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-arm": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.2.tgz",
      "integrity": "sha512-MOI9Dlfrpi2Cuc7i5dXdxPbFIgbDBGgKR5F2yWEa6FVEtSWncfVNKW5AKjImAQ6CZlBK9tympdsZJ2xThBiWWA==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-arm64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.2.tgz",
      "integrity": "sha512-FU20Bo66/f7He9Fp9sP2zaJ1Q8L9uLPZQDub/WlUip78JlPeMbVL8546HbZfcW9LNciEXc8d+tThSJjSC+tmsg==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-linux-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.2.tgz",
      "integrity": "sha512-gsWNDCklNy7Ajk0vBBf9jEx04RUxuDQfBse918Ww+Qb9HCPoGzS+XJTLe96iN3BVK7grnLiYghP/M4L8VsaHeA==",
      "optional": true
    },
    "@msgpackr-extract/msgpackr-extract-win32-x64": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.2.tgz",
      "integrity": "sha512-O+6Gs8UeDbyFpbSh2CPEz/UOrrdWPTBYNblZK5CxxLisYt4kGX3Sc+czffFonyjiGSq3jWLwJS/CCJc7tBr4sQ==",
      "optional": true
    },
    "@redis/bloom": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
      "requires": {}
    },
    "@redis/client": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.5.8.tgz",
      "integrity": "sha512-xzElwHIO6rBAqzPeVnCzgvrnBEcFL1P0w8P65VNLRkdVW8rOE58f52hdj0BDgmsdOm4f1EoXPZtH4Fh7M/qUpw==",
      "requires": {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        "yallist": "4.0.0"
      }
    },
    "@redis/graph": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.0.tgz",
      "integrity": "sha512-16yZWngxyXPd+MJxeSr0dqh2AIOi8j9yXKcKCwVaKDbH3HTuETpDVPcLujhFYVPtYrngSco31BUcSa9TH31Gqg==",
      "requires": {}
    },
    "@redis/json": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.4.tgz",
      "integrity": "sha512-LUZE2Gdrhg0Rx7AN+cZkb1e6HjoSKaeeW8rYnt89Tly13GBI5eP4CwDVr+MY8BAYfCg4/N15OUrtLoona9uSgw==",
      "requires": {}
    },
    "@redis/search": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.1.3.tgz",
      "integrity": "sha512-4Dg1JjvCevdiCBTZqjhKkGoC5/BcB7k9j99kdMnaXFXg8x4eyOIVg9487CMv7/BUVkFLZCaIh8ead9mU15DNng==",
      "requires": {}
    },
    "@redis/time-series": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.0.4.tgz",
      "integrity": "sha512-ThUIgo2U/g7cCuZavucQTQzA9g9JbDDY2f64u3AbAoz/8vE2lt2U37LamDUVChhaDA3IRT9R6VvJwqnUfTJzng==",
      "requires": {}
    },
    "@sideway/address": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.4.tgz",
      "integrity": "sha512-7vwq+rOHVWjyXxVlR76Agnvhy8I9rpzjosTESvmhNeXOXdZZB15Fl+TI9x1SiHZH5Jv2wTGduSxFDIaq0m3DUw==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA=="
    },
    "@sinonjs/commons": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.0.tgz",
      "integrity": "sha512-jXBtWAF4vmdNmZgD5FoKsVLv3rPgDnLgPbU84LIJ3otV44vJlDRokVng5v8NFJdCf/da9legHcKaRuZs4L7faA==",
      "peer": true,
      "requires": {
        "type-detect": "4.0.8"
      }
    },
    "@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "peer": true,
      "requires": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "@tsconfig/node10": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA=="
    },
    "@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag=="
    },
    "@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow=="
    },
    "@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA=="
    },
    "@types/babel__core": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.1.tgz",
      "integrity": "sha512-aACu/U/omhdk15O4Nfb+fHgH/z3QsfQzpnvRZhYhThms83ZnAOZz7zZAWO7mn2yyNQaA4xTO8GLK3uqFU4bYYw==",
      "peer": true,
      "requires": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "@types/babel__generator": {
      "version": "7.6.4",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.4.tgz",
      "integrity": "sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__template": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.1.tgz",
      "integrity": "sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==",
      "peer": true,
      "requires": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__traverse": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.1.tgz",
      "integrity": "sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==",
      "peer": true,
      "requires": {
        "@babel/types": "^7.20.7"
      }
    },
    "@types/bcrypt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.0.tgz",
      "integrity": "sha512-agtcFKaruL8TmcvqbndlqHPSJgsolhf/qPWchFlgnW1gECTN/nKbFcoFnvKAQRFfKbh+BO6A3SWdJu9t+xF3Lw==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/bcryptjs": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@types/bcryptjs/-/bcryptjs-2.4.2.tgz",
      "integrity": "sha512-LiMQ6EOPob/4yUL66SZzu6Yh77cbzJFYll+ZfaPiPPFswtIlA/Fs1MzdKYA7JApHU49zQTbJGX3PDmCpIdDBRQ==",
      "dev": true
    },
    "@types/body-parser": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.2.tgz",
      "integrity": "sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==",
      "dev": true,
      "requires": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "@types/connect": {
      "version": "3.4.35",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.35.tgz",
      "integrity": "sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/cookiejar": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.2.tgz",
      "integrity": "sha512-t73xJJrvdTjXrn4jLS9VSGRbz0nUY3cl2DMGDU48lKl+HR9dbbjW2A9r3g40VA++mQpy6uuHg33gy7du2BKpog=="
    },
    "@types/cors": {
      "version": "2.8.13",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.13.tgz",
      "integrity": "sha512-RG8AStHlUiV5ysZQKq97copd2UmVYw3/pRMLefISZ3S1hK104Cwm7iLQ3fTKx+lsUH2CE8FlLaYeEA2LSeqYUA==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/express": {
      "version": "4.17.17",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.17.tgz",
      "integrity": "sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==",
      "dev": true,
      "requires": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "@types/express-serve-static-core": {
      "version": "4.17.35",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz",
      "integrity": "sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "@types/express-session": {
      "version": "1.17.7",
      "resolved": "https://registry.npmjs.org/@types/express-session/-/express-session-1.17.7.tgz",
      "integrity": "sha512-L25080PBYoRLu472HY/HNCxaXY8AaGgqGC8/p/8+BYMhG0RDOLQ1wpXOpAzr4Gi5TGozTKyJv5BVODM5UNyVMw==",
      "dev": true,
      "requires": {
        "@types/express": "*"
      }
    },
    "@types/graceful-fs": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.6.tgz",
      "integrity": "sha512-Sig0SNORX9fdW+bQuTEovKj3uHcUL6LQKbCrrqb1X7J6/ReAbhCXRAhc+SMejhLELFj2QcyuxmUooZ4bt5ReSw==",
      "peer": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/http-errors": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.1.tgz",
      "integrity": "sha512-/K3ds8TRAfBvi5vfjuz8y6+GiAYBZ0x4tXv1Av6CWBWn0IlADc+ZX9pMq7oU0fNQPnBwIZl3rmeLp6SBApbxSQ==",
      "dev": true
    },
    "@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz",
      "integrity": "sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g=="
    },
    "@types/istanbul-lib-report": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
      "integrity": "sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==",
      "requires": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "@types/istanbul-reports": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz",
      "integrity": "sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==",
      "requires": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "@types/jest": {
      "version": "29.5.3",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-29.5.3.tgz",
      "integrity": "sha512-1Nq7YrO/vJE/FYnqYyw0FS8LdrjExSgIiHyKg7xPpn+yi8Q4huZryKnkJatN1ZRH89Kw2v33/8ZMB7DuZeSLlA==",
      "dev": true,
      "requires": {
        "expect": "^29.0.0",
        "pretty-format": "^29.0.0"
      }
    },
    "@types/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-drE6uz7QBKq1fYqqoFKTDRdFCPHd5TCub75BM+D+cMx7NU9hUz7SESLfC2fSCXVFMO5Yj8sOWHuGqPgjc+fz0Q==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/mime": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.2.tgz",
      "integrity": "sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==",
      "dev": true
    },
    "@types/mocha": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/@types/mocha/-/mocha-10.0.1.tgz",
      "integrity": "sha512-/fvYntiO1GeICvqbQ3doGDIP97vWmvFt83GKguJ6prmQM2iXZfFcq6YE8KteFyRtX2/h5Hf91BYvPodJKFYv5Q==",
      "dev": true
    },
    "@types/mongoose": {
      "version": "5.11.97",
      "resolved": "https://registry.npmjs.org/@types/mongoose/-/mongoose-5.11.97.tgz",
      "integrity": "sha512-cqwOVYT3qXyLiGw7ueU2kX9noE8DPGRY6z8eUxudhXY8NZ7DMKYAxyZkLSevGfhCX3dO/AoX5/SO9lAzfjon0Q==",
      "dev": true,
      "requires": {
        "mongoose": "*"
      }
    },
    "@types/node": {
      "version": "20.4.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.4.6.tgz",
      "integrity": "sha512-q0RkvNgMweWWIvSMDiXhflGUKMdIxBo2M2tYM/0kEGDueQByFzK4KZAgu5YHGFNxziTlppNpTIBcqHQAxlfHdA=="
    },
    "@types/node-fetch": {
      "version": "2.6.4",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.4.tgz",
      "integrity": "sha512-1ZX9fcN4Rvkvgv4E6PAY5WXUFWFcRWxZa3EW83UjycOB9ljJCedb2CupIP4RZMEwF/M3eTcCihbBRgwtGbg5Rg==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "@types/passport": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/@types/passport/-/passport-1.0.12.tgz",
      "integrity": "sha512-QFdJ2TiAEoXfEQSNDISJR1Tm51I78CymqcBa8imbjo6dNNu+l2huDxxbDEIoFIwOSKMkOfHEikyDuZ38WwWsmw==",
      "dev": true,
      "requires": {
        "@types/express": "*"
      }
    },
    "@types/passport-jwt": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/@types/passport-jwt/-/passport-jwt-3.0.9.tgz",
      "integrity": "sha512-5XJt+79emfgpuBvBQusUPylFIVtW1QVAAkTRwCbRJAmxUjmLtIqUU6V1ovpnHPu6Qut3mR5Juc+s7kd06roNTg==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/jsonwebtoken": "*",
        "@types/passport-strategy": "*"
      }
    },
    "@types/passport-local": {
      "version": "1.0.35",
      "resolved": "https://registry.npmjs.org/@types/passport-local/-/passport-local-1.0.35.tgz",
      "integrity": "sha512-K4eLTJ8R0yYW8TvCqkjB0pTKoqfUSdl5PfZdidTjV2ETV3604fQxtY6BHKjQWAx50WUS0lqzBvKv3LoI1ZBPeA==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/passport": "*",
        "@types/passport-strategy": "*"
      }
    },
    "@types/passport-strategy": {
      "version": "0.2.35",
      "resolved": "https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.35.tgz",
      "integrity": "sha512-o5D19Jy2XPFoX2rKApykY15et3Apgax00RRLf0RUotPDUsYrQa7x4howLYr9El2mlUApHmCMv5CZ1IXqKFQ2+g==",
      "dev": true,
      "requires": {
        "@types/express": "*",
        "@types/passport": "*"
      }
    },
    "@types/qs": {
      "version": "6.9.7",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.7.tgz",
      "integrity": "sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==",
      "dev": true
    },
    "@types/range-parser": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.4.tgz",
      "integrity": "sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==",
      "dev": true
    },
    "@types/send": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.1.tgz",
      "integrity": "sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==",
      "dev": true,
      "requires": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "@types/serve-static": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.2.tgz",
      "integrity": "sha512-J2LqtvFYCzaj8pVYKw8klQXrLLk7TBZmQ4ShlcdkELFKGwGMfevMLneMMRkMgZxotOD9wg497LpC7O8PcvAmfw==",
      "dev": true,
      "requires": {
        "@types/http-errors": "*",
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "@types/stack-utils": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.1.tgz",
      "integrity": "sha512-Hl219/BT5fLAaz6NDkSuhzasy49dwQS/DSdu4MdggFB8zcXv7vflBI3xp7FEmkmdDkBUI2bPUNeMttp2knYdxw=="
    },
    "@types/superagent": {
      "version": "4.1.18",
      "resolved": "https://registry.npmjs.org/@types/superagent/-/superagent-4.1.18.tgz",
      "integrity": "sha512-LOWgpacIV8GHhrsQU+QMZuomfqXiqzz3ILLkCtKx3Us6AmomFViuzKT9D693QTKgyut2oCytMG8/efOop+DB+w==",
      "requires": {
        "@types/cookiejar": "*",
        "@types/node": "*"
      }
    },
    "@types/supertest": {
      "version": "2.0.12",
      "resolved": "https://registry.npmjs.org/@types/supertest/-/supertest-2.0.12.tgz",
      "integrity": "sha512-X3HPWTwXRerBZS7Mo1k6vMVR1Z6zmJcDVn5O/31whe0tnjE4te6ZJSJGq1RiqHPjzPdMTfjCFogDJmwng9xHaQ==",
      "requires": {
        "@types/superagent": "*"
      }
    },
    "@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "requires": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "@types/yargs": {
      "version": "17.0.24",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.24.tgz",
      "integrity": "sha512-6i0aC7jV6QzQB8ne1joVZ0eSFIstHsCrobmOtghM11yGlH0j43FKL2UhWdELkyps0zuf7qVTUVCCR+tgSlyLLw==",
      "requires": {
        "@types/yargs-parser": "*"
      }
    },
    "@types/yargs-parser": {
      "version": "21.0.0",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.0.tgz",
      "integrity": "sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA=="
    },
    "abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "requires": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      }
    },
    "acorn": {
      "version": "8.10.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.10.0.tgz",
      "integrity": "sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw=="
    },
    "acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA=="
    },
    "agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "requires": {
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "peer": true,
      "requires": {
        "type-fest": "^0.21.3"
      }
    },
    "ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
    },
    "ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "requires": {
        "color-convert": "^2.0.1"
      }
    },
    "anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
    },
    "are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "requires": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      }
    },
    "arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "peer": true,
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "axios": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.4.0.tgz",
      "integrity": "sha512-S4XCWMEmzvo64T9GfvQDOXgYRDJ/wsSZc7Jvdgx5u1sd0JwsuPLqb3SYmusag+edF6ziyMensPVqLTSc1PiSEA==",
      "requires": {
        "follow-redirects": "^1.15.0",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      },
      "dependencies": {
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "babel-jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.6.2.tgz",
      "integrity": "sha512-BYCzImLos6J3BH/+HvUCHG1dTf2MzmAB4jaVxHV+29RZLjR29XuYTmsf2sdDwkrb+FczkGo3kOhE7ga6sI0P4A==",
      "peer": true,
      "requires": {
        "@jest/transform": "^29.6.2",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.5.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      }
    },
    "babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      }
    },
    "babel-plugin-jest-hoist": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.5.0.tgz",
      "integrity": "sha512-zSuuuAlTMT4mzLj2nPnUm6fsE6270vdOfnpbJ+RmruU75UhLFvL0N2NgI7xpeS7NaB6hGqmd5pVpGTDYvi4Q3w==",
      "peer": true,
      "requires": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      }
    },
    "babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz",
      "integrity": "sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==",
      "peer": true,
      "requires": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      }
    },
    "babel-preset-jest": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.5.0.tgz",
      "integrity": "sha512-JOMloxOqdiBSxMAzjRaH023/vvcaSaec49zvg+2LmNsktC7ei39LTJGw02J+9uUtTZUq6xbLyJ4dxe9sSmIuAg==",
      "peer": true,
      "requires": {
        "babel-plugin-jest-hoist": "^29.5.0",
        "babel-preset-current-node-syntax": "^1.0.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "bcrypt": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.0.tgz",
      "integrity": "sha512-RHBS7HI5N5tEnGTmtR/pppX0mmDSBpQ4aCBsj7CEQfYXDcO74A8sIBYcJMuCsis2E81zDxeENYhv66oZwLiA+Q==",
      "requires": {
        "@mapbox/node-pre-gyp": "^1.0.10",
        "node-addon-api": "^5.0.0"
      }
    },
    "bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true
    },
    "body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "requires": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "browserslist": {
      "version": "4.21.10",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.10.tgz",
      "integrity": "sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==",
      "peer": true,
      "requires": {
        "caniuse-lite": "^1.0.30001517",
        "electron-to-chromium": "^1.4.477",
        "node-releases": "^2.0.13",
        "update-browserslist-db": "^1.0.11"
      }
    },
    "bs-logger": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
      "dev": true,
      "requires": {
        "fast-json-stable-stringify": "2.x"
      }
    },
    "bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "peer": true,
      "requires": {
        "node-int64": "^0.4.0"
      }
    },
    "bson": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-5.4.0.tgz",
      "integrity": "sha512-WRZ5SQI5GfUuKnPTNmAYPiKIof3ORXAF4IRU5UcgmivNIon01rWQlw5RUH954dpu8yGL8T59YShVddIPaU/gFA=="
    },
    "buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "peer": true
    },
    "bull": {
      "version": "4.10.4",
      "resolved": "https://registry.npmjs.org/bull/-/bull-4.10.4.tgz",
      "integrity": "sha512-o9m/7HjS/Or3vqRd59evBlWCXd9Lp+ALppKseoSKHaykK46SmRjAilX98PgmOz1yeVaurt8D5UtvEt4bUjM3eA==",
      "requires": {
        "cron-parser": "^4.2.1",
        "debuglog": "^1.0.0",
        "get-port": "^5.1.1",
        "ioredis": "^5.0.0",
        "lodash": "^4.17.21",
        "msgpackr": "^1.5.2",
        "semver": "^7.3.2",
        "uuid": "^8.3.0"
      }
    },
    "bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
    },
    "call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "requires": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      }
    },
    "callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "peer": true
    },
    "camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "peer": true
    },
    "caniuse-lite": {
      "version": "1.0.30001519",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001519.tgz",
      "integrity": "sha512-0QHgqR+Jv4bxHMp8kZ1Kn8CH55OikjKJ6JmKkZYP1F3D7w+lnFXF70nG5eNfsZS89jadi5Ywy5UCSKLAglIRkg==",
      "peer": true
    },
    "chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "requires": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      }
    },
    "char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "peer": true
    },
    "chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      }
    },
    "chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ=="
    },
    "ci-info": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.8.0.tgz",
      "integrity": "sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw=="
    },
    "cjs-module-lexer": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
      "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==",
      "peer": true
    },
    "cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "peer": true,
      "requires": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      }
    },
    "cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA=="
    },
    "co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "peer": true
    },
    "collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "peer": true
    },
    "color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "requires": {
        "color-name": "~1.1.4"
      }
    },
    "color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg=="
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==",
      "dev": true
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ=="
    },
    "content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "requires": {
        "safe-buffer": "5.2.1"
      }
    },
    "content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA=="
    },
    "convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "peer": true
    },
    "cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw=="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true
    },
    "cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "requires": {
        "object-assign": "^4",
        "vary": "^1"
      }
    },
    "create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="
    },
    "cron-parser": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.8.1.tgz",
      "integrity": "sha512-jbokKWGcyU4gl6jAfX97E1gDpY12DJ1cLJZmoDzaAln/shZ+S3KBFBuA2Q6WeUN4gJf/8klnV1EfvhA2lK5IRQ==",
      "requires": {
        "luxon": "^3.2.1"
      }
    },
    "cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "peer": true,
      "requires": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      }
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "debuglog": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
      "integrity": "sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw=="
    },
    "dedent": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.1.tgz",
      "integrity": "sha512-+LxW+KLWxu3HW3M2w2ympwtqPrqYRzU8fqi6Fhd18fBALe15blJPI/I4+UHveMVG6lJqB4JNd4UG0S5cnVHwIg==",
      "peer": true,
      "requires": {}
    },
    "deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "peer": true
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="
    },
    "delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ=="
    },
    "denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg=="
    },
    "detect-libc": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw=="
    },
    "detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "peer": true
    },
    "dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "requires": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A=="
    },
    "diff-sequences": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.4.3.tgz",
      "integrity": "sha512-ofrBgwpPhCD85kMKtE9RYFFq6OC1A89oW2vvgWZNCwxrUpRUILopY7lsYyMDSjc8g6U6aiO0Qubg6r4Wgt5ZnA=="
    },
    "dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "dev": true
    },
    "ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "electron-to-chromium": {
      "version": "1.4.482",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.482.tgz",
      "integrity": "sha512-h+UqpfmEr1Qkk0zp7ej/jid7CXoq4m4QzW6wNTb0ELJ/BZCpA4wgUylBIMGCe621tnr4l5VmoHjdoSx2lbnNJA==",
      "peer": true
    },
    "emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "peer": true
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w=="
    },
    "error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "peer": true,
      "requires": {
        "is-arrayish": "^0.2.1"
      }
    },
    "escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "peer": true
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w=="
    },
    "esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "peer": true
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg=="
    },
    "eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
    },
    "execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "peer": true,
      "requires": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      }
    },
    "exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "peer": true
    },
    "expect": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.6.2.tgz",
      "integrity": "sha512-iAErsLxJ8C+S02QbLAwgSGSezLQK+XXRDt8IuFXFpwCNw2ECmzZSmjKcCaFVp5VRMk+WAvz6h6jokzEzBFZEuA==",
      "requires": {
        "@jest/expect-utils": "^29.6.2",
        "@types/node": "*",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "requires": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      }
    },
    "express-session": {
      "version": "1.17.3",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.3.tgz",
      "integrity": "sha512-4+otWXlShYlG1Ma+2Jnn+xgKUZTMJ5QD3YvfilX3AcocOAbIkVylSWEklzALe/+Pu4qV6TYBj5GwOBFfdKqLBw==",
      "requires": {
        "cookie": "0.4.2",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "dependencies": {
        "cookie": {
          "version": "0.4.2",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
          "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA=="
        }
      }
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true
    },
    "fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "peer": true,
      "requires": {
        "bser": "2.1.1"
      }
    },
    "fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      }
    },
    "find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "peer": true,
      "requires": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      }
    },
    "follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA=="
    },
    "form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "dev": true,
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      }
    },
    "formidable": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.1.2.tgz",
      "integrity": "sha512-CM3GuJ57US06mlpQ47YcunuUZ9jpm8Vx+P2CGt2j7HpgkKZO/DJYQ0Bobim8G6PFQmK5lOqOOdUXboU+h73A4g==",
      "dev": true,
      "requires": {
        "dezalgo": "^1.0.4",
        "hexoid": "^1.0.0",
        "once": "^1.4.0",
        "qs": "^6.11.0"
      }
    },
    "forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow=="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q=="
    },
    "fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "requires": {
        "minipass": "^3.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        }
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "optional": true
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "requires": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      }
    },
    "generic-pool": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g=="
    },
    "gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "peer": true
    },
    "get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "peer": true
    },
    "get-intrinsic": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
      "requires": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3"
      }
    },
    "get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "peer": true
    },
    "get-port": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/get-port/-/get-port-5.1.1.tgz",
      "integrity": "sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ=="
    },
    "get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "peer": true
    },
    "glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "peer": true
    },
    "graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="
    },
    "has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg=="
    },
    "has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A=="
    },
    "has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
    },
    "helmet": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.0.0.tgz",
      "integrity": "sha512-MsIgYmdBh460ZZ8cJC81q4XJknjG567wzEmv46WOBblDb6TUd3z8/GhgmsM9pn8g2B80tAJ4m5/d3Bi1KrSUBQ=="
    },
    "hexoid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
      "dev": true
    },
    "html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "peer": true
    },
    "http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "requires": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      }
    },
    "https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "requires": {
        "agent-base": "6",
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "peer": true
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "peer": true,
      "requires": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      }
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "peer": true
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ioredis": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.3.2.tgz",
      "integrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA==",
      "requires": {
        "@ioredis/commands": "^1.1.1",
        "cluster-key-slot": "^1.1.0",
        "debug": "^4.3.4",
        "denque": "^2.1.0",
        "lodash.defaults": "^4.2.0",
        "lodash.isarguments": "^3.1.0",
        "redis-errors": "^1.2.0",
        "redis-parser": "^3.0.0",
        "standard-as-callback": "^2.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
    },
    "is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "peer": true
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-core-module": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.12.1.tgz",
      "integrity": "sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==",
      "peer": true,
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
    },
    "is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "peer": true
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="
    },
    "is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "peer": true
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "peer": true
    },
    "isomorphic-ws": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-5.0.0.tgz",
      "integrity": "sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==",
      "requires": {}
    },
    "istanbul-lib-coverage": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz",
      "integrity": "sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==",
      "peer": true
    },
    "istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "peer": true
        }
      }
    },
    "istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "peer": true,
      "requires": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "dependencies": {
        "make-dir": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
          "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
          "peer": true,
          "requires": {
            "semver": "^7.5.3"
          }
        }
      }
    },
    "istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "peer": true,
      "requires": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "peer": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "peer": true
        }
      }
    },
    "istanbul-reports": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
      "peer": true,
      "requires": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      }
    },
    "jest": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.6.2.tgz",
      "integrity": "sha512-8eQg2mqFbaP7CwfsTpCxQ+sHzw1WuNWL5UUvjnWP4hx2riGz9fPSzYOaU5q8/GqWn1TfgZIVTqYJygbGbWAANg==",
      "peer": true,
      "requires": {
        "@jest/core": "^29.6.2",
        "@jest/types": "^29.6.1",
        "import-local": "^3.0.2",
        "jest-cli": "^29.6.2"
      }
    },
    "jest-changed-files": {
      "version": "29.5.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.5.0.tgz",
      "integrity": "sha512-IFG34IUMUaNBIxjQXF/iu7g6EcdMrGRRxaUSw92I/2g2YC6vCdTltl4nHvt7Ci5nSJwXIkCu8Ka1DKF+X7Z1Ag==",
      "peer": true,
      "requires": {
        "execa": "^5.0.0",
        "p-limit": "^3.1.0"
      }
    },
    "jest-circus": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.6.2.tgz",
      "integrity": "sha512-G9mN+KOYIUe2sB9kpJkO9Bk18J4dTDArNFPwoZ7WKHKel55eKIS/u2bLthxgojwlf9NLCVQfgzM/WsOVvoC6Fw==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/expect": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.6.2",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.6.2",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      }
    },
    "jest-cli": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.6.2.tgz",
      "integrity": "sha512-TT6O247v6dCEX2UGHGyflMpxhnrL0DNqP2fRTKYm3nJJpCTfXX3GCMQPGFjXDoj0i5/Blp3jriKXFgdfmbYB6Q==",
      "peer": true,
      "requires": {
        "@jest/core": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "prompts": "^2.0.1",
        "yargs": "^17.3.1"
      }
    },
    "jest-config": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.6.2.tgz",
      "integrity": "sha512-VxwFOC8gkiJbuodG9CPtMRjBUNZEHxwfQXmIudSTzFWxaci3Qub1ddTRbFNQlD/zUeaifLndh/eDccFX4wCMQw==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-jest": "^29.6.2",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.6.2",
        "jest-environment-node": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-runner": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      }
    },
    "jest-diff": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.6.2.tgz",
      "integrity": "sha512-t+ST7CB9GX5F2xKwhwCf0TAR17uNDiaPTZnVymP9lw0lssa9vG+AFyDZoeIHStU3WowFFwT+ky+er0WVl2yGhA==",
      "requires": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.4.3",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-docblock": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.4.3.tgz",
      "integrity": "sha512-fzdTftThczeSD9nZ3fzA/4KkHtnmllawWrXO69vtI+L9WjEIuXWs4AmyME7lN5hU7dB0sHhuPfcKofRsUb/2Fg==",
      "peer": true,
      "requires": {
        "detect-newline": "^3.0.0"
      }
    },
    "jest-each": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.6.2.tgz",
      "integrity": "sha512-MsrsqA0Ia99cIpABBc3izS1ZYoYfhIy0NNWqPSE0YXbQjwchyt6B1HD2khzyPe1WiJA7hbxXy77ZoUQxn8UlSw==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "jest-util": "^29.6.2",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-environment-node": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.6.2.tgz",
      "integrity": "sha512-YGdFeZ3T9a+/612c5mTQIllvWkddPbYcN2v95ZH24oWMbGA4GGS2XdIF92QMhUhvrjjuQWYgUGW2zawOyH63MQ==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-mock": "^29.6.2",
        "jest-util": "^29.6.2"
      }
    },
    "jest-get-type": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.4.3.tgz",
      "integrity": "sha512-J5Xez4nRRMjk8emnTpWrlkyb9pfRQQanDrvWHhsR1+VUfbwxi30eVcZFlcdGInRibU4G5LwHXpI7IRHU0CY+gg=="
    },
    "jest-haste-map": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.6.2.tgz",
      "integrity": "sha512-+51XleTDAAysvU8rT6AnS1ZJ+WHVNqhj1k6nTvN2PYP+HjU3kqlaKQ1Lnw3NYW3bm2r8vq82X0Z1nDDHZMzHVA==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "fsevents": "^2.3.2",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.4.3",
        "jest-util": "^29.6.2",
        "jest-worker": "^29.6.2",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      }
    },
    "jest-leak-detector": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.6.2.tgz",
      "integrity": "sha512-aNqYhfp5uYEO3tdWMb2bfWv6f0b4I0LOxVRpnRLAeque2uqOVVMLh6khnTcE2qJ5wAKop0HcreM1btoysD6bPQ==",
      "peer": true,
      "requires": {
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-matcher-utils": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.6.2.tgz",
      "integrity": "sha512-4LiAk3hSSobtomeIAzFTe+N8kL6z0JtF3n6I4fg29iIW7tt99R7ZcIFW34QkX+DuVrf+CUe6wuVOpm7ZKFJzZQ==",
      "requires": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "pretty-format": "^29.6.2"
      }
    },
    "jest-message-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.6.2.tgz",
      "integrity": "sha512-vnIGYEjoPSuRqV8W9t+Wow95SDp6KPX2Uf7EoeG9G99J2OVh7OSwpS4B6J0NfpEIpfkBNHlBZpA2rblEuEFhZQ==",
      "requires": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.6.2",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      }
    },
    "jest-mock": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.6.2.tgz",
      "integrity": "sha512-hoSv3lb3byzdKfwqCuT6uTscan471GUECqgNYykg6ob0yiAw3zYc7OrPnI9Qv8Wwoa4lC7AZ9hyS4AiIx5U2zg==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "jest-util": "^29.6.2"
      }
    },
    "jest-mock-extended": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-3.0.5.tgz",
      "integrity": "sha512-/eHdaNPUAXe7f65gHH5urc8SbRVWjYxBqmCgax2uqOBJy8UUcCBMN1upj1eZ8y/i+IqpyEm4Kq0VKss/GCCTdw==",
      "requires": {
        "ts-essentials": "^7.0.3"
      }
    },
    "jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "peer": true,
      "requires": {}
    },
    "jest-regex-util": {
      "version": "29.4.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.4.3.tgz",
      "integrity": "sha512-O4FglZaMmWXbGHSQInfXewIsd1LMn9p3ZXB/6r4FOkyhX2/iP/soMG98jGvk/A3HAN78+5VWcBGO0BJAPRh4kg==",
      "peer": true
    },
    "jest-resolve": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.6.2.tgz",
      "integrity": "sha512-G/iQUvZWI5e3SMFssc4ug4dH0aZiZpsDq9o1PtXTV1210Ztyb2+w+ZgQkB3iOiC5SmAEzJBOHWz6Hvrd+QnNPw==",
      "peer": true,
      "requires": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.6.2",
        "jest-validate": "^29.6.2",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      }
    },
    "jest-resolve-dependencies": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.6.2.tgz",
      "integrity": "sha512-LGqjDWxg2fuQQm7ypDxduLu/m4+4Lb4gczc13v51VMZbVP5tSBILqVx8qfWcsdP8f0G7aIqByIALDB0R93yL+w==",
      "peer": true,
      "requires": {
        "jest-regex-util": "^29.4.3",
        "jest-snapshot": "^29.6.2"
      }
    },
    "jest-runner": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.6.2.tgz",
      "integrity": "sha512-wXOT/a0EspYgfMiYHxwGLPCZfC0c38MivAlb2lMEAlwHINKemrttu1uSbcGbfDV31sFaPWnWJPmb2qXM8pqZ4w==",
      "peer": true,
      "requires": {
        "@jest/console": "^29.6.2",
        "@jest/environment": "^29.6.2",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.4.3",
        "jest-environment-node": "^29.6.2",
        "jest-haste-map": "^29.6.2",
        "jest-leak-detector": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-resolve": "^29.6.2",
        "jest-runtime": "^29.6.2",
        "jest-util": "^29.6.2",
        "jest-watcher": "^29.6.2",
        "jest-worker": "^29.6.2",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      }
    },
    "jest-runtime": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.6.2.tgz",
      "integrity": "sha512-2X9dqK768KufGJyIeLmIzToDmsN0m7Iek8QNxRSI/2+iPFYHF0jTwlO3ftn7gdKd98G/VQw9XJCk77rbTGZnJg==",
      "peer": true,
      "requires": {
        "@jest/environment": "^29.6.2",
        "@jest/fake-timers": "^29.6.2",
        "@jest/globals": "^29.6.2",
        "@jest/source-map": "^29.6.0",
        "@jest/test-result": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-mock": "^29.6.2",
        "jest-regex-util": "^29.4.3",
        "jest-resolve": "^29.6.2",
        "jest-snapshot": "^29.6.2",
        "jest-util": "^29.6.2",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      }
    },
    "jest-snapshot": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.6.2.tgz",
      "integrity": "sha512-1OdjqvqmRdGNvWXr/YZHuyhh5DeaLp1p/F8Tht/MrMw4Kr1Uu/j4lRG+iKl1DAqUJDWxtQBMk41Lnf/JETYBRA==",
      "peer": true,
      "requires": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.6.2",
        "@jest/transform": "^29.6.2",
        "@jest/types": "^29.6.1",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.6.2",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.6.2",
        "jest-get-type": "^29.4.3",
        "jest-matcher-utils": "^29.6.2",
        "jest-message-util": "^29.6.2",
        "jest-util": "^29.6.2",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.6.2",
        "semver": "^7.5.3"
      }
    },
    "jest-util": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.6.2.tgz",
      "integrity": "sha512-3eX1qb6L88lJNCFlEADKOkjpXJQyZRiavX1INZ4tRnrBVr2COd3RgcTLyUiEXMNBlDU/cgYq6taUS0fExrWW4w==",
      "requires": {
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      }
    },
    "jest-validate": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.6.2.tgz",
      "integrity": "sha512-vGz0yMN5fUFRRbpJDPwxMpgSXW1LDKROHfBopAvDcmD6s+B/s8WJrwi+4bfH4SdInBA5C3P3BI19dBtKzx1Arg==",
      "peer": true,
      "requires": {
        "@jest/types": "^29.6.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.4.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.6.2"
      },
      "dependencies": {
        "camelcase": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
          "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
          "peer": true
        }
      }
    },
    "jest-watcher": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.6.2.tgz",
      "integrity": "sha512-GZitlqkMkhkefjfN/p3SJjrDaxPflqxEAv3/ik10OirZqJGYH5rPiIsgVcfof0Tdqg3shQGdEIxDBx+B4tuLzA==",
      "peer": true,
      "requires": {
        "@jest/test-result": "^29.6.2",
        "@jest/types": "^29.6.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.6.2",
        "string-length": "^4.0.1"
      }
    },
    "jest-worker": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.6.2.tgz",
      "integrity": "sha512-l3ccBOabTdkng8I/ORCkADz4eSMKejTYv1vB/Z83UiubqhC1oQ5Li6dWCyqOIvSifGjUBxuvxvlm6KGK2DtuAQ==",
      "peer": true,
      "requires": {
        "@types/node": "*",
        "jest-util": "^29.6.2",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "dependencies": {
        "supports-color": {
          "version": "8.1.1",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
          "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
          "peer": true,
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "joi": {
      "version": "17.9.2",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.9.2.tgz",
      "integrity": "sha512-Itk/r+V4Dx0V3c7RLFdRh12IOjySm2/WGPMubBT92cQvRfYZhPM2W0hZlctjj72iES8jsRCwp7S/cRmWBnJ4nw==",
      "requires": {
        "@hapi/hoek": "^9.0.0",
        "@hapi/topo": "^5.0.0",
        "@sideway/address": "^4.1.3",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "peer": true,
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      }
    },
    "jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "peer": true
    },
    "json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "peer": true
    },
    "json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg=="
    },
    "jsonwebtoken": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.1.tgz",
      "integrity": "sha512-K8wx7eJ5TPvEjuiVSkv167EVboBDv9PZdDoF7BgeQnBLVvZWW9clr2PsQHVJDTKaEIH5JBIwHujGcHp7GgI2eg==",
      "requires": {
        "jws": "^3.2.2",
        "lodash": "^4.17.21",
        "ms": "^2.1.1",
        "semver": "^7.3.8"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "requires": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "requires": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA=="
    },
    "kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "peer": true
    },
    "leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "peer": true
    },
    "lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "peer": true
    },
    "locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "peer": true,
      "requires": {
        "p-locate": "^4.1.0"
      }
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ=="
    },
    "lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg=="
    },
    "lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "dev": true
    },
    "lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "luxon": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
      "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg=="
    },
    "make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "requires": {
        "semver": "^6.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA=="
        }
      }
    },
    "make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "peer": true,
      "requires": {
        "tmpl": "1.0.5"
      }
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ=="
    },
    "memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "peer": true
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w=="
    },
    "micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "requires": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      }
    },
    "midjourney": {
      "version": "2.7.79",
      "resolved": "https://registry.npmjs.org/midjourney/-/midjourney-2.7.79.tgz",
      "integrity": "sha512-klnOas1htHIIDlw+SyX6/kaT3wNNbbtxJaFpEqnJnw5w++a1WfbjFhgiD4QWggbSvsACbJukV6LWsvgyvf7WOQ==",
      "requires": {
        "@huggingface/inference": "^2.5.0",
        "isomorphic-ws": "^5.0.0",
        "mime": "^3.0.0",
        "p-queue": "^6.6.2",
        "snowyflake": "^2.0.0",
        "throat": "^6.0.2",
        "tslib": "^2.5.0",
        "websocket-ts": "^1.1.1",
        "ws": "^8.13.0"
      },
      "dependencies": {
        "mime": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
          "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A=="
        }
      }
    },
    "mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
    },
    "mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
    },
    "mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "requires": {
        "mime-db": "1.52.0"
      }
    },
    "mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "peer": true
    },
    "minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ=="
    },
    "minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "requires": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        }
      }
    },
    "mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw=="
    },
    "mongodb": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.7.0.tgz",
      "integrity": "sha512-zm82Bq33QbqtxDf58fLWBwTjARK3NSvKYjyz997KSy6hpat0prjeX/kxjbPVyZY60XYPDNETaHkHJI2UCzSLuw==",
      "requires": {
        "bson": "^5.4.0",
        "mongodb-connection-string-url": "^2.6.0",
        "saslprep": "^1.0.3",
        "socks": "^2.7.1"
      }
    },
    "mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "requires": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      },
      "dependencies": {
        "tr46": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
          "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
          "requires": {
            "punycode": "^2.1.1"
          }
        },
        "webidl-conversions": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
          "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g=="
        },
        "whatwg-url": {
          "version": "11.0.0",
          "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
          "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
          "requires": {
            "tr46": "^3.0.0",
            "webidl-conversions": "^7.0.0"
          }
        }
      }
    },
    "mongoose": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-7.4.1.tgz",
      "integrity": "sha512-o3E5KHHiHdaiwCJG3+9r70sncRKki71Ktf/TfXdW6myu+53rtZ56uLl5ylkQiCf60V3COJuOeekcxXVsjQ7cBA==",
      "requires": {
        "bson": "^5.4.0",
        "kareem": "2.5.1",
        "mongodb": "5.7.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew=="
    },
    "mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "requires": {
        "debug": "4.x"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "msgpackr": {
      "version": "1.9.6",
      "resolved": "https://registry.npmjs.org/msgpackr/-/msgpackr-1.9.6.tgz",
      "integrity": "sha512-50rmb6+ZWvEm0vJn8R8CwI1Eavss3h5rgtKrcdUal3EkZcpqw82+xsmc7RoHb8fYB5V4EOU2NDaOitDAdO0t+w==",
      "requires": {
        "msgpackr-extract": "^3.0.2"
      }
    },
    "msgpackr-extract": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/msgpackr-extract/-/msgpackr-extract-3.0.2.tgz",
      "integrity": "sha512-SdzXp4kD/Qf8agZ9+iTu6eql0m3kWm1A2y1hkpTeVNENutaB0BwHlSvAIaMxwntmRUAUjon2V4L8Z/njd0Ct8A==",
      "optional": true,
      "requires": {
        "@msgpackr-extract/msgpackr-extract-darwin-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-darwin-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-arm64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-linux-x64": "3.0.2",
        "@msgpackr-extract/msgpackr-extract-win32-x64": "3.0.2",
        "node-gyp-build-optional-packages": "5.0.7"
      }
    },
    "natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "peer": true
    },
    "negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
    },
    "node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA=="
    },
    "node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-C/fGU2E8ToujUivIO0H+tpQ6HWo4eEmchoPIoXtxCrVghxdKq+QOHqEZW7tuP3KlV3bC8FRMO5nMCC7Zm1VP6g==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "node-gyp-build-optional-packages": {
      "version": "5.0.7",
      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.0.7.tgz",
      "integrity": "sha512-YlCCc6Wffkx0kHkmam79GKvDQ6x+QZkMjFGrIMxgFNILFvGSbCp2fCBC55pGTT9gVaz8Na5CLmxt/urtzRv36w==",
      "optional": true
    },
    "node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "peer": true
    },
    "node-releases": {
      "version": "2.0.13",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.13.tgz",
      "integrity": "sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==",
      "peer": true
    },
    "nodemon": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz",
      "integrity": "sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==",
      "dev": true,
      "requires": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.7",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
          "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
          "dev": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
          "dev": true
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
          "dev": true
        },
        "semver": {
          "version": "5.7.2",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
          "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
          "dev": true
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "dev": true,
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "requires": {
        "abbrev": "1"
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="
    },
    "npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "peer": true,
      "requires": {
        "path-key": "^3.0.0"
      }
    },
    "npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "requires": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg=="
    },
    "object-inspect": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g=="
    },
    "on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA=="
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "requires": {
        "wrappy": "1"
      }
    },
    "onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "peer": true,
      "requires": {
        "mimic-fn": "^2.1.0"
      }
    },
    "openai": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-3.3.0.tgz",
      "integrity": "sha512-uqxI/Au+aPRnsaQRe8CojU0eCR7I0mBiKjD3sNMzY6DaC1ZVrc85u98mtJW6voDug8fgGN+DIZmTDxTthxb7dQ==",
      "requires": {
        "axios": "^0.26.0",
        "form-data": "^4.0.0"
      },
      "dependencies": {
        "axios": {
          "version": "0.26.1",
          "resolved": "https://registry.npmjs.org/axios/-/axios-0.26.1.tgz",
          "integrity": "sha512-fPwcX4EvnSHuInCMItEhAGnaSEXRBjtzh9fOtsE6E1G6p7vl7edEeZe11QHf18+6+9gR5PbKV/sGKNaD8YaMeA==",
          "requires": {
            "follow-redirects": "^1.14.8"
          }
        },
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow=="
    },
    "p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "peer": true,
      "requires": {
        "yocto-queue": "^0.1.0"
      }
    },
    "p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "peer": true,
      "requires": {
        "p-limit": "^2.2.0"
      },
      "dependencies": {
        "p-limit": {
          "version": "2.3.0",
          "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
          "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
          "peer": true,
          "requires": {
            "p-try": "^2.0.0"
          }
        }
      }
    },
    "p-queue": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/p-queue/-/p-queue-6.6.2.tgz",
      "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
      "requires": {
        "eventemitter3": "^4.0.4",
        "p-timeout": "^3.2.0"
      }
    },
    "p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "requires": {
        "p-finally": "^1.0.0"
      }
    },
    "p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "peer": true
    },
    "parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "peer": true,
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      }
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "passport": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
      "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
      "requires": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1",
        "utils-merge": "^1.0.1"
      }
    },
    "passport-jwt": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.1.tgz",
      "integrity": "sha512-UCKMDYhNuGOBE9/9Ycuoyh7vP6jpeTp/+sfMJl7nLff/t6dps+iaeE0hhNkKN8/HZHcJ7lCdOyDxHdDoxoSvdQ==",
      "requires": {
        "jsonwebtoken": "^9.0.0",
        "passport-strategy": "^1.0.0"
      }
    },
    "passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha512-9wCE6qKznvf9mQYYbgJ3sVOHmCWoUNMVFoZzNoznmISbhnNNPhN9xfY3sLmScHMetEJeoY7CXwfhCe7argfQow==",
      "requires": {
        "passport-strategy": "1.x.x"
      }
    },
    "passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha512-CB97UUvDKJde2V0KDWWB3lyf6PC3FaZP7YxZ2G8OAtn9p4HI9j9JLP9qjOGZFvyl8uwNT8qM+hGnz/n16NI7oA=="
    },
    "path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "peer": true
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg=="
    },
    "path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "peer": true
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "peer": true
    },
    "path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha512-KG8UEiEVkR3wGEb4m5yZkVCzigAD+cVEJck2CzYZO37ZGJfctvVptVO192MwrtPhzONn6go8ylnOdMhKqi4nfg=="
    },
    "picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "peer": true
    },
    "picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA=="
    },
    "pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "peer": true
    },
    "pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "peer": true,
      "requires": {
        "find-up": "^4.0.0"
      }
    },
    "pretty-format": {
      "version": "29.6.2",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.6.2.tgz",
      "integrity": "sha512-1q0oC8eRveTg5nnBEWMXAU2qpv65Gnuf2eCQzSjxpWFkPaPARwqZZDGuNE0zPAZfTCHzIk3A8dIjwlQKKLphyg==",
      "requires": {
        "@jest/schemas": "^29.6.0",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
          "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA=="
        }
      }
    },
    "prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "peer": true,
      "requires": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      }
    },
    "proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "requires": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      }
    },
    "proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA=="
    },
    "pure-rand": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.0.2.tgz",
      "integrity": "sha512-6Yg0ekpKICSjPswYOuC5sku/TSWaRYlA0qsXqJgM/d/4pLPHPuTxK7Nbf7jFKzAeedUhR8C7K9Uv63FBsSo8xQ==",
      "peer": true
    },
    "qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "requires": {
        "side-channel": "^1.0.4"
      }
    },
    "random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ=="
    },
    "range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
    },
    "raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "requires": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      }
    },
    "react-is": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w=="
    },
    "readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "requires": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "redis": {
      "version": "4.6.7",
      "resolved": "https://registry.npmjs.org/redis/-/redis-4.6.7.tgz",
      "integrity": "sha512-KrkuNJNpCwRm5vFJh0tteMxW8SaUzkm5fBH7eL5hd/D0fAkzvapxbfGPP/r+4JAXdQuX7nebsBkBqA2RHB7Usw==",
      "requires": {
        "@redis/bloom": "1.2.0",
        "@redis/client": "1.5.8",
        "@redis/graph": "1.1.0",
        "@redis/json": "1.0.4",
        "@redis/search": "1.1.3",
        "@redis/time-series": "1.0.4"
      }
    },
    "redis-errors": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w=="
    },
    "redis-parser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
      "requires": {
        "redis-errors": "^1.0.0"
      }
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "peer": true
    },
    "resolve": {
      "version": "1.22.2",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.2.tgz",
      "integrity": "sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==",
      "peer": true,
      "requires": {
        "is-core-module": "^2.11.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "peer": true,
      "requires": {
        "resolve-from": "^5.0.0"
      }
    },
    "resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "peer": true
    },
    "resolve.exports": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
      "integrity": "sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==",
      "peer": true
    },
    "rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "requires": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "requires": {
        "lru-cache": "^6.0.0"
      }
    },
    "send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "requires": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "requires": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      }
    },
    "set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "peer": true,
      "requires": {
        "shebang-regex": "^3.0.0"
      }
    },
    "shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "peer": true
    },
    "side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "requires": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      }
    },
    "sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "requires": {
        "semver": "~7.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
          "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
          "dev": true
        }
      }
    },
    "sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "peer": true
    },
    "slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q=="
    },
    "smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg=="
    },
    "snowyflake": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/snowyflake/-/snowyflake-2.0.0.tgz",
      "integrity": "sha512-BxeqV0KJxJASu6EBJGUkX194Zhh37AEa0ow/JRK39icWbLTG9Wl/7LAL6a/ZMSjNm4O9pZk6QoLcWP7f/YKmtA=="
    },
    "socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "requires": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "peer": true
    },
    "source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "peer": true,
      "requires": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "requires": {
        "memory-pager": "^1.0.2"
      }
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "peer": true
    },
    "stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "requires": {
        "escape-string-regexp": "^2.0.0"
      }
    },
    "standard-as-callback": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A=="
    },
    "statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
    },
    "string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "requires": {
        "safe-buffer": "~5.2.0"
      }
    },
    "string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "peer": true,
      "requires": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      }
    },
    "string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      }
    },
    "strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "requires": {
        "ansi-regex": "^5.0.1"
      }
    },
    "strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "peer": true
    },
    "strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "peer": true
    },
    "strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "peer": true
    },
    "superagent": {
      "version": "8.0.9",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.0.9.tgz",
      "integrity": "sha512-4C7Bh5pyHTvU33KpZgwrNKh/VQnvgtCSqPRfJAUdmrtSYePVzVg4E4OzsrbkhJj9O7SO6Bnv75K/F8XVZT8YHA==",
      "dev": true,
      "requires": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^2.1.2",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0",
        "semver": "^7.3.8"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "dev": true,
          "requires": {
            "ms": "2.1.2"
          }
        },
        "form-data": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
          "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
          "dev": true,
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        },
        "mime": {
          "version": "2.6.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
          "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
          "dev": true
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "dev": true
        }
      }
    },
    "supertest": {
      "version": "6.3.3",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-6.3.3.tgz",
      "integrity": "sha512-EMCG6G8gDu5qEqRQ3JjjPs6+FYT1a7Hv5ApHvtSghmOFJYtsU5S+pSb6Y2EUeCEY3CmEL3mmQ8YWlPOzQomabA==",
      "dev": true,
      "requires": {
        "methods": "^1.1.2",
        "superagent": "^8.0.5"
      }
    },
    "supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "requires": {
        "has-flag": "^4.0.0"
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "peer": true
    },
    "tar": {
      "version": "6.1.15",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.15.tgz",
      "integrity": "sha512-/zKt9UyngnxIT/EAGYuxaMYgOIJiP81ab9ZfkILq4oNLPFX50qyYmu7jRj9qeXoxmJHjGlbH0+cm2uy1WCs10A==",
      "requires": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      }
    },
    "test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "peer": true,
      "requires": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      }
    },
    "throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ=="
    },
    "tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "peer": true
    },
    "to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "peer": true
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "requires": {
        "nopt": "~1.0.10"
      },
      "dependencies": {
        "nopt": {
          "version": "1.0.10",
          "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
          "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
          "dev": true,
          "requires": {
            "abbrev": "1"
          }
        }
      }
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "ts-essentials": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/ts-essentials/-/ts-essentials-7.0.3.tgz",
      "integrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ==",
      "requires": {}
    },
    "ts-jest": {
      "version": "29.1.1",
      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.1.1.tgz",
      "integrity": "sha512-D6xjnnbP17cC85nliwGiL+tpoKN0StpgE0TeOjXQTU6MVCfsB4v7aW05CgQ/1OywGb0x/oy9hHFnN+sczTiRaA==",
      "dev": true,
      "requires": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^29.0.0",
        "json5": "^2.2.3",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "^7.5.3",
        "yargs-parser": "^21.0.1"
      }
    },
    "ts-node": {
      "version": "10.9.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
      "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
      "requires": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      }
    },
    "tslib": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.1.tgz",
      "integrity": "sha512-t0hLfiEKfMUoqhG+U1oid7Pva4bbDPHYfJNiB7BiIjRkj1pyC++4N3huJfqY6aRH6VTB0rvtzQwjM4K6qpfOig=="
    },
    "type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "peer": true
    },
    "type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "peer": true
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "typescript": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.1.6.tgz",
      "integrity": "sha512-zaWCozRZ6DLEWAWFrVDz1H6FVXzUSfTy5FUMWsQlU8Ym5JP9eO4xkTIROFCQvhQf61z6O/G6ugw3SgAnvvm+HA=="
    },
    "uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "requires": {
        "random-bytes": "~1.0.0"
      }
    },
    "undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ=="
    },
    "update-browserslist-db": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz",
      "integrity": "sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==",
      "peer": true,
      "requires": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      }
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA=="
    },
    "uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg=="
    },
    "v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg=="
    },
    "v8-to-istanbul": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.1.0.tgz",
      "integrity": "sha512-6z3GW9x8G1gd+JIIgQQQxXuiJtCXeAjp6RaPEPLv62mH3iPHPxV6W3robxtCzNErRo6ZwTmzWhsbNvjyEBKzKA==",
      "peer": true,
      "requires": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0"
      },
      "dependencies": {
        "convert-source-map": {
          "version": "1.9.0",
          "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
          "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
          "peer": true
        }
      }
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg=="
    },
    "walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "peer": true,
      "requires": {
        "makeerror": "1.0.12"
      }
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "websocket-ts": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/websocket-ts/-/websocket-ts-1.1.1.tgz",
      "integrity": "sha512-rm+S60J74Ckw5iizzgID12ju+OfaHAa6dhXhULIOrXkl0e05RzxfY42/vMStpz5jWL3iz9mkyjPcFUY1IgI0fw=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "peer": true,
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "requires": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "peer": true,
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "peer": true,
      "requires": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      }
    },
    "ws": {
      "version": "8.13.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.13.0.tgz",
      "integrity": "sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==",
      "requires": {}
    },
    "y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "peer": true
    },
    "yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "peer": true,
      "requires": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      }
    },
    "yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw=="
    },
    "yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q=="
    },
    "yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "peer": true
    }
  }
}


--- File: package.json ---
{
  "name": "bodyone-backend-node",
  "version": "1.0.0",
  "description": "Backend for Ai Apis",
  "main": "index.js",
  "scripts": {
    "start": "npx ts-node src/app.ts",
    "test": "jest --watchAll --verbose --runInBand"
  },
  "keywords": [],
  "author": "Andy Lewis",
  "license": "ISC",
  "dependencies": {
    "@types/supertest": "^2.0.12",
    "axios": "^1.4.0",
    "bcrypt": "^5.1.0",
    "bcryptjs": "^2.4.3",
    "bull": "^4.10.4",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "express-session": "~1.17.0",
    "helmet": "^7.0.0",
    "ioredis": "^5.3.2",
    "jest-mock-extended": "^3.0.4",
    "joi": "^17.9.2",
    "jsonwebtoken": "^9.0.0",
    "lodash": "^4.17.21",
    "midjourney": "^2.2.31",
    "mongodb": "^5.5.0",
    "mongoose": "^7.1.1",
    "node-fetch": "^2.6.11",
    "openai": "^3.3.0",
    "passport": "^0.6.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "redis": "^4.6.6",
    "ts-node": "^10.9.1",
    "typescript": "^5.0.4"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.0",
    "@types/bcryptjs": "^2.4.2",
    "@types/cors": "^2.8.13",
    "@types/express-session": "~1.17.0",
    "@types/jest": "^29.5.1",
    "@types/jsonwebtoken": "^9.0.2",
    "@types/mocha": "^10.0.1",
    "@types/mongoose": "^5.11.97",
    "@types/node": "^20.1.7",
    "@types/node-fetch": "^2.6.4",
    "@types/passport": "^1.0.12",
    "@types/passport-jwt": "^3.0.8",
    "@types/passport-local": "^1.0.35",
    "dotenv": "^16.0.3",
    "nodemon": "^2.0.22",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.0"
  },
  "directories": {
    "test": "tests"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AJLewis/bodyone-backend-node.git"
  },
  "bugs": {
    "url": "https://github.com/AJLewis/bodyone-backend-node/issues"
  },
  "homepage": "https://github.com/AJLewis/bodyone-backend-node#readme"
}


--- File: src/app.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

app.use

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: src/config/db.js ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch(err => console.log(err));

--- File: src/config/passport.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUser } from '../models/User';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUser) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUser) => {
			done(err, user);
		});
	});
};


--- File: src/constants/openai-models.constant.ts ---
interface OpenAiCompletionModels {
    readonly textdavinci003 : string;
    readonly textdavinci002 : string;
    readonly textcurie001 : string;
    readonly textbabbage001 : string;
    readonly textada001 : string;
}

interface OpenAiChatModels {
    readonly gpt4 : string;
    readonly gpt40314 : string;
    readonly gpt432k : string;
    readonly gpt432k0314 : string;
    readonly gpt35turbo : string;
    readonly gpt35turbo0301 : string;
}

export const OpenAiCompletionModels: OpenAiCompletionModels = {
    textdavinci003 : 'text-davinci-003',
    textdavinci002 : 'text-davinci-002',
    textcurie001 : 'text-curie-001',
    textbabbage001 : 'text-babbage-001',
    textada001 : 'text-ada-001'
}

export const OpenAiChatModels: OpenAiChatModels = {
    gpt4 : 'gpt-4',
    gpt40314 : 'gpt-4-0314',
    gpt432k : 'gpt-4-32k',
    gpt432k0314 : 'gpt-4-32k-0314',
    gpt35turbo : 'gpt-3.5-turbo',
    gpt35turbo0301 : 'gpt-3.5-turbo-0301'
}

--- File: src/controllers/external/bard/chat.ts ---
import { Request, Response } from 'express';
import fetch from 'node-fetch';

export async function getChat(req: Request, res: Response) {
    try {
        const request = await fetch("https://api.bardapi.dev/chat", {
            headers: { Authorization: `Bearer ${process.env.BARD_API_KEY}` },
            method: "POST",
            body: JSON.stringify({ input: req.body.input }),
        });
        console.log(process.env.BARD_API_KEY)
        console.log(request)
        const response:any = await request.json();

        res.json(response.output);
    } catch (err) {
        res.status(500).json({ error: err?.toString() });
    }
}

--- File: src/controllers/external/openai/chat.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: src/controllers/external/openai/completion.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, OpenAIApi } from 'openai';
import { OpenAiCompletionModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getCompletion = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const prompt = req.body.prompt
        const model = req.body.model ? req.body.model : OpenAiCompletionModels['textbabbage001'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 1000;
        
        const gptResponse = await openai.createCompletion({
            model: model,
            prompt: prompt,
            max_tokens: maxTokens
        });
        
        const response = gptResponse ? gptResponse?.data : 'Could not find result';
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};


--- File: src/controllers/external/openai/image.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, OpenAIApi } from 'openai';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getImage = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const prompt = req.body.prompt;
        const numImages = req.body.n ? req.body.n : 1;
        const imageSize = req.body.size ? req.body.size : "1024x1024";
        
        const imageResponse = await openai.createImage({
            prompt: prompt,
            n: numImages,
            size: imageSize
        });
        
        const response = imageResponse ? imageResponse?.data : 'Could not find result';
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const getImageLocal = async (description: any) => {
    try {
        const prompt = description;
        const numImages = 1;
        const imageSize =  "1024x1024";
        
        const imageResponse = await openai.createImage({
            prompt: prompt,
            n: numImages,
            size: imageSize
        });
        
        return imageResponse ? imageResponse?.data : 'Could not find result';
        
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: src/controllers/external/stable-diffusion/fetch_from_queue.ts ---
import axios from 'axios';
import { Request, Response } from 'express';

export const fetch_from_queue = async (req: Request, res: Response): Promise<void> => {
    const { request_id } = req.body;
    const config = {headers: {'Content-Type': 'application/json'}};
  
    try {
      const response = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth/fetch', {
        key: process.env.STABLE_DIFFUSION_API_KEY,
        request_id: request_id
      }, config);
      
      res.send(response.data);
    } catch (error) {
      console.error(error);
      res.status(500).send('Server error');
    }
  }

--- File: src/controllers/external/stable-diffusion/text_to_image.ts ---
import axios, { AxiosResponse } from 'axios';
import { Request, Response } from 'express';

interface IRequestBody {
    prompt: string;
    negative_prompt?: string;
    width?: number;
    height?: number;
    samples?: number;
    num_inference_steps?: number;
    self_attention?: string;
    enhance_prompt?: string;
    upscale?: string;
    // Include other parameters as necessary
  }
  
export const text_to_image = async (req: Request, res: Response): Promise<void> => {
  
  const { prompt, negative_prompt, width, height, samples, num_inference_steps, self_attention = 'yes', enhance_prompt = 'yes', upscale = 'yes' } = req.body as IRequestBody;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response: AxiosResponse = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      model_id: "midjourney",
      prompt,
      negative_prompt,
      width,
      height,
      samples,
      num_inference_steps,
      self_attention,
      enhance_prompt,
      upscale
    }, config);

    res.send(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}

export const get_queued_image = async (req: Request, res: Response): Promise<void> => {
  const { request_id } = req.body;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth/fetch', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      request_id: request_id
    }, config);
    
    res.send(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}

--- File: src/controllers/external/stable-diffusion/text_to_video.ts ---
import axios, { AxiosResponse } from 'axios';
import { Request, Response } from 'express';

interface IRequestBody {
    prompt: string;
    negative_prompt?: string;
    scheduler?: number;
    seconds?: number;
    // Include other parameters as necessary
  }
  
export const text_to_video = async (req: Request, res: Response): Promise<void> => {
  
  const { prompt, negative_prompt, scheduler, seconds } = req.body as IRequestBody;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response: AxiosResponse = await axios.post('https://stablediffusionapi.com/api/v5/text2video', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      prompt,
      negative_prompt,
      scheduler,
      seconds
    }, config);

    res.send(response.data);

  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}



--- File: src/controllers/internal/auth/authentication.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET || 'OpenAIBackendSecretKey';

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};


export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: src/models/MealPlan.model.ts ---
import mongoose, { Document, Schema, Types } from 'mongoose';

export type WeekDays = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
export type IMealPlan = Record<WeekDays, Types.ObjectId[]>;

export interface IMealPlanDocument extends IMealPlan, Document {}

const MealPlanSchema = new Schema<IMealPlanDocument>({
  monday: { type: [Schema.Types.ObjectId], required: false },
  tuesday: { type: [Schema.Types.ObjectId], required: false },
  wednesday: { type: [Schema.Types.ObjectId], required: false },
  thursday: { type: [Schema.Types.ObjectId], required: false },
  friday: { type: [Schema.Types.ObjectId], required: false },
  saturday: { type: [Schema.Types.ObjectId], required: false },
  sunday: { type: [Schema.Types.ObjectId], required: false },
});

export const MealPlanModel = mongoose.model<IMealPlanDocument>('MealPlan', MealPlanSchema);

--- File: src/models/ProductImage.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IProductImage } from '../interfaces/IProductImage';

export interface IProductImageDocument extends Document, IProductImage {}

const ProductImageSchema = new Schema<IProductImage>({
    uri: { type: String, required: true },
    hash: { type: String, required: true },
    content: { type: String, required: true },
    progress: { type: String, required: false },
    inUse: { type: Boolean, required: false },
  });
  
  export const ProductImageModel = mongoose.model<IProductImage & Document>('ProductImage', ProductImageSchema);

--- File: src/models/Recipe.model.ts ---
import { ObjectId } from 'mongodb';
import mongoose, { Document, Schema } from 'mongoose';
import { IIngredient } from '../interfaces/IIngredient';
import { IRecipe } from '../interfaces/IRecipe';
import { IReview } from '../interfaces/IReview';

export interface IRecipeDocument extends Document, IRecipe {}

const IngredientSchema = new Schema<IIngredient>({
  name: { type: String, required: true },
  quantity: { type: String, required: false },
  unit: { type: String, required: false },
});

const ReviewSchema = new Schema<IReview>({
  username: { type: String, required: true },
  rating: { type: Number, required: true },
  text: { type: String, required: true },
});

const RecipeSchema = new Schema<IRecipeDocument>({
  _id: { type: ObjectId, required: false },
  title: { type: String, required: true },
  prepTime: { type: String, required: true },
  mealType: { type: String, required: false },
  calories: { type: String || Number, required: true },
  description: { type: String, required: true },
  ingredients: { type: [IngredientSchema], required: true },
  instructions: { type: [String], required: true },
  productImage: { type: ObjectId, ref: 'ProductImage', required: false },
  include: { type: [String], required: true },
  exclude: { type: [String], required: true },
  midjourney: { type: String, required: true },
  tags: { type: [String], required: false },
  shoppingList: { type: [], required: false },
  user: { type: ObjectId, ref: 'User', required: false },
  reviews: { type: [ReviewSchema], required: true },
});

export const RecipeModel = mongoose.model<IRecipeDocument>('Recipe', RecipeSchema);

--- File: src/models/User.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUser>('User', userSchema);

export default User;

--- File: tsconfig.json ---
{
  "compilerOptions": {
      "target": "es6",
      "module": "commonjs",
      "outDir": "./dist",
      "strict": true,
      "esModuleInterop": true,
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}


--- File: src/app.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: src/config/db.js ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
mongoose.connect(
    process.env.MONGODB_URI, {
    dbName: process.env.MONGODB_DB_NAME,
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('Database connected!'))
.catch(err => console.log(err));

--- File: src/config/passport.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword });
	
				const savedUser = await newUser.save();
	
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: src/constants/openai-models.constant.ts ---
interface OpenAiCompletionModels {
    readonly textdavinci003 : string;
    readonly textdavinci002 : string;
    readonly textcurie001 : string;
    readonly textbabbage001 : string;
    readonly textada001 : string;
}

interface OpenAiChatModels {
    readonly gpt4 : string;
    readonly gpt40314 : string;
    readonly gpt432k : string;
    readonly gpt432k0314 : string;
    readonly gpt35turbo : string;
    readonly gpt35turbo0301 : string;
}

export const OpenAiCompletionModels: OpenAiCompletionModels = {
    textdavinci003 : 'text-davinci-003',
    textdavinci002 : 'text-davinci-002',
    textcurie001 : 'text-curie-001',
    textbabbage001 : 'text-babbage-001',
    textada001 : 'text-ada-001'
}

export const OpenAiChatModels: OpenAiChatModels = {
    gpt4 : 'gpt-4',
    gpt40314 : 'gpt-4-0314',
    gpt432k : 'gpt-4-32k',
    gpt432k0314 : 'gpt-4-32k-0314',
    gpt35turbo : 'gpt-3.5-turbo',
    gpt35turbo0301 : 'gpt-3.5-turbo-0301'
}

--- File: src/controllers/external/bard/chat.ts ---
import { Request, Response } from 'express';
import fetch from 'node-fetch';

export async function getChat(req: Request, res: Response) {
    try {
        const request = await fetch("https://api.bardapi.dev/chat", {
            headers: { Authorization: `Bearer ${process.env.BARD_API_KEY}` },
            method: "POST",
            body: JSON.stringify({ input: req.body.input }),
        });
        console.log(process.env.BARD_API_KEY)
        console.log(request)
        const response:any = await request.json();

        res.json(response.output);
    } catch (err) {
        res.status(500).json({ error: err?.toString() });
    }
}

--- File: src/controllers/external/openai/chat.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: src/controllers/external/openai/completion.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, OpenAIApi } from 'openai';
import { OpenAiCompletionModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getCompletion = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const prompt = req.body.prompt
        const model = req.body.model ? req.body.model : OpenAiCompletionModels['textbabbage001'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 1000;
        
        const gptResponse = await openai.createCompletion({
            model: model,
            prompt: prompt,
            max_tokens: maxTokens
        });
        
        const response = gptResponse ? gptResponse?.data : 'Could not find result';
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};


--- File: src/controllers/external/openai/image.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, OpenAIApi } from 'openai';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getImage = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const prompt = req.body.prompt;
        const numImages = req.body.n ? req.body.n : 1;
        const imageSize = req.body.size ? req.body.size : "1024x1024";
        
        const imageResponse = await openai.createImage({
            prompt: prompt,
            n: numImages,
            size: imageSize
        });
        
        const response = imageResponse ? imageResponse?.data : 'Could not find result';
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const getImageLocal = async (description: any) => {
    try {
        const prompt = description;
        const numImages = 1;
        const imageSize =  "1024x1024";
        
        const imageResponse = await openai.createImage({
            prompt: prompt,
            n: numImages,
            size: imageSize
        });
        
        return imageResponse ? imageResponse?.data : 'Could not find result';
        
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: src/controllers/external/stable-diffusion/fetch_from_queue.ts ---
import axios from 'axios';
import { Request, Response } from 'express';

export const fetch_from_queue = async (req: Request, res: Response): Promise<void> => {
    const { request_id } = req.body;
    const config = {headers: {'Content-Type': 'application/json'}};
  
    try {
      const response = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth/fetch', {
        key: process.env.STABLE_DIFFUSION_API_KEY,
        request_id: request_id
      }, config);
      
      res.send(response.data);
    } catch (error) {
      console.error(error);
      res.status(500).send('Server error');
    }
  }

--- File: src/controllers/external/stable-diffusion/text_to_image.ts ---
import axios, { AxiosResponse } from 'axios';
import { Request, Response } from 'express';

interface IRequestBody {
    prompt: string;
    negative_prompt?: string;
    width?: number;
    height?: number;
    samples?: number;
    num_inference_steps?: number;
    self_attention?: string;
    enhance_prompt?: string;
    upscale?: string;
    // Include other parameters as necessary
  }
  
export const text_to_image = async (req: Request, res: Response): Promise<void> => {
  
  const { prompt, negative_prompt, width, height, samples, num_inference_steps, self_attention = 'yes', enhance_prompt = 'yes', upscale = 'yes' } = req.body as IRequestBody;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response: AxiosResponse = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      model_id: "midjourney",
      prompt,
      negative_prompt,
      width,
      height,
      samples,
      num_inference_steps,
      self_attention,
      enhance_prompt,
      upscale
    }, config);

    res.send(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}

export const get_queued_image = async (req: Request, res: Response): Promise<void> => {
  const { request_id } = req.body;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth/fetch', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      request_id: request_id
    }, config);
    
    res.send(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}

--- File: src/controllers/external/stable-diffusion/text_to_video.ts ---
import axios, { AxiosResponse } from 'axios';
import { Request, Response } from 'express';

interface IRequestBody {
    prompt: string;
    negative_prompt?: string;
    scheduler?: number;
    seconds?: number;
    // Include other parameters as necessary
  }
  
export const text_to_video = async (req: Request, res: Response): Promise<void> => {
  
  const { prompt, negative_prompt, scheduler, seconds } = req.body as IRequestBody;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response: AxiosResponse = await axios.post('https://stablediffusionapi.com/api/v5/text2video', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      prompt,
      negative_prompt,
      scheduler,
      seconds
    }, config);

    res.send(response.data);

  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}



--- File: src/controllers/internal/auth/authentication.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET || 'OpenAIBackendSecretKey';

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }
        // User registered successfully, log in the user
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};


export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: src/models/Exercise.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}


export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[]; // Optional: Equipment required for the exercise
  targetMuscleGroups: IMuscleGroup[]; // Optional: Muscle groups targeted by the exercise
  videoSearchTerm: string; // Optional: A search term to display a list of videos showing how to effectively perform this exercise
  safetyInstructions: string; // Optional: Instructions on how to perform the exercise safely
  tips: string[]; // Optional: Tips or cues for correct form and technique
  benefits: string[]; // Optional: List of benefits associated with the exercise
  variations: string[]; // Optional: Different variations of the same exercise
  warmUp: string; // Optional: Recommended warm-up routine before performing the exercise
  cooldown: string; // Optional: Recommended cooldown routine after performing the exercise
  prerequisites: string[]; // Optional: Prerequisites or fitness level required to perform the exercise
  commonMistakes: string[]; // Optional: Common mistakes to avoid while performing the exercise
  progression: string; // Optional: How to progress or make the exercise more challenging over time
  // Add more attributes as needed
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  tags: { type: [String], required: false },
  equipment: { type: [String], required: false },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: false },
  videoSearchTerm: { type: String, required: false },
  safetyInstructions: { type: String, required: false },
  tips: { type: [String], required: false },
  benefits: { type: [String], required: false },
  variations: { type: [String], required: false },
  warmUp: { type: String, required: false },
  cooldown: { type: String, required: false },
  prerequisites: { type: [String], required: false },
  commonMistakes: { type: [String], required: false },
  progression: { type: String, required: false },
  // Add more fields based on the exercise types and other requirements
});

const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);

export default ExerciseModel;




--- File: src/models/Ingredient.model.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  quantity: number;
  unit: string;
  caloriesPerUnit: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  unit: { type: String, required: true },
  caloriesPerUnit: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>('Ingredient', ingredientSchema);

export default Ingredient;

--- File: src/models/Meal.model.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export default Meal;

--- File: src/models/MealPlan.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  startDate: Date;
  endDate: Date;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: src/models/Pts.model.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPtsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PTSSchema = new Schema<IPtsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PTSModel = mongoose.model<IPtsDocument>('PTS', PTSSchema);

export default PTSModel;

--- File: src/models/Recipe.model.ts ---
import mongoose, { Schema } from "mongoose";
import { IIngredient } from "./Ingredient.model";

export interface IRecipe extends Document {
  name: string;
  ingredients: IIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [{ type: Schema.Types.ObjectId, ref: 'Ingredient' }],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export default Recipe;

--- File: src/models/User.model.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

export interface IUserDocument extends Document {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    xpPoints: number;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    xpPoints: { type: Number, default: 0 },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
        },
        startDate: { type: Date, required: true },
        endDate: { type: Date, required: true },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = function(candidatePassword: any, cb: any) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User;

--- File: src/models/UserMealPlan.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

export default UserMealPlanModel

--- File: src/models/UserMetrics.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

export default UserMetrics;

--- File: tsconfig.json ---
{
  "compilerOptions": {
      "target": "es6",
      "module": "commonjs",
      "outDir": "./dist",
      "strict": true,
      "esModuleInterop": true,
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}


--- File: src/app.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();
app.use(express.json());

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: src/config/db.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

mongoose.connect(process.env.MONGODB_URI as string, { 
    dbName: process.env.MONGODB_DB_NAME as string, 
    useNewUrlParser: true, 
    useUnifiedTopology: true, 
  })
  .then(() => console.log('Database connected!'))
  .catch((err: any) => console.log(err));

--- File: src/config/passport.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email, subscription } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: src/constants/openai-models.constant.ts ---
interface OpenAiCompletionModels {
    readonly textdavinci003 : string;
    readonly textdavinci002 : string;
    readonly textcurie001 : string;
    readonly textbabbage001 : string;
    readonly textada001 : string;
}

interface OpenAiChatModels {
    readonly gpt4 : string;
    readonly gpt40314 : string;
    readonly gpt432k : string;
    readonly gpt432k0314 : string;
    readonly gpt35turbo : string;
    readonly gpt35turbo0301 : string;
}

export const OpenAiCompletionModels: OpenAiCompletionModels = {
    textdavinci003 : 'text-davinci-003',
    textdavinci002 : 'text-davinci-002',
    textcurie001 : 'text-curie-001',
    textbabbage001 : 'text-babbage-001',
    textada001 : 'text-ada-001'
}

export const OpenAiChatModels: OpenAiChatModels = {
    gpt4 : 'gpt-4',
    gpt40314 : 'gpt-4-0314',
    gpt432k : 'gpt-4-32k',
    gpt432k0314 : 'gpt-4-32k-0314',
    gpt35turbo : 'gpt-3.5-turbo',
    gpt35turbo0301 : 'gpt-3.5-turbo-0301'
}

--- File: src/controllers/external/bard/chat.ts ---
import { Request, Response } from 'express';
import fetch from 'node-fetch';

export async function getChat(req: Request, res: Response) {
    try {
        const request = await fetch("https://api.bardapi.dev/chat", {
            headers: { Authorization: `Bearer ${process.env.BARD_API_KEY}` },
            method: "POST",
            body: JSON.stringify({ input: req.body.input }),
        });
        console.log(process.env.BARD_API_KEY)
        console.log(request)
        const response:any = await request.json();

        res.json(response.output);
    } catch (err) {
        res.status(500).json({ error: err?.toString() });
    }
}

--- File: src/controllers/external/openai/chat.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        console.log(messages);
        console.log(model);
        console.log(maxTokens);
        const sleep = () => new Promise(r => setTimeout(r, 1000));
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: src/controllers/external/openai/completion.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, OpenAIApi } from 'openai';
import { OpenAiCompletionModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getCompletion = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const prompt = req.body.prompt
        const model = req.body.model ? req.body.model : OpenAiCompletionModels['textbabbage001'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 1000;
        
        const gptResponse = await openai.createCompletion({
            model: model,
            prompt: prompt,
            max_tokens: maxTokens
        });
        
        const response = gptResponse ? gptResponse?.data : 'Could not find result';
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};


--- File: src/controllers/external/openai/image.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, OpenAIApi } from 'openai';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getImage = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const prompt = req.body.prompt;
        const numImages = req.body.n ? req.body.n : 1;
        const imageSize = req.body.size ? req.body.size : "1024x1024";
        
        const imageResponse = await openai.createImage({
            prompt: prompt,
            n: numImages,
            size: imageSize
        });
        
        const response = imageResponse ? imageResponse?.data : 'Could not find result';
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const getImageLocal = async (description: any) => {
    try {
        const prompt = description;
        const numImages = 1;
        const imageSize =  "1024x1024";
        
        const imageResponse = await openai.createImage({
            prompt: prompt,
            n: numImages,
            size: imageSize
        });
        
        return imageResponse ? imageResponse?.data : 'Could not find result';
        
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: src/controllers/external/stable-diffusion/fetch_from_queue.ts ---
import axios from 'axios';
import { Request, Response } from 'express';

export const fetch_from_queue = async (req: Request, res: Response): Promise<void> => {
    const { request_id } = req.body;
    const config = {headers: {'Content-Type': 'application/json'}};
  
    try {
      const response = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth/fetch', {
        key: process.env.STABLE_DIFFUSION_API_KEY,
        request_id: request_id
      }, config);
      
      res.send(response.data);
    } catch (error) {
      console.error(error);
      res.status(500).send('Server error');
    }
  }

--- File: src/controllers/external/stable-diffusion/text_to_image.ts ---
import axios, { AxiosResponse } from 'axios';
import { Request, Response } from 'express';

interface IRequestBody {
    prompt: string;
    negative_prompt?: string;
    width?: number;
    height?: number;
    samples?: number;
    num_inference_steps?: number;
    self_attention?: string;
    enhance_prompt?: string;
    upscale?: string;
    // Include other parameters as necessary
  }
  
export const text_to_image = async (req: Request, res: Response): Promise<void> => {
  
  const { prompt, negative_prompt, width, height, samples, num_inference_steps, self_attention = 'yes', enhance_prompt = 'yes', upscale = 'yes' } = req.body as IRequestBody;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response: AxiosResponse = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      model_id: "midjourney",
      prompt,
      negative_prompt,
      width,
      height,
      samples,
      num_inference_steps,
      self_attention,
      enhance_prompt,
      upscale
    }, config);

    res.send(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}

export const get_queued_image = async (req: Request, res: Response): Promise<void> => {
  const { request_id } = req.body;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth/fetch', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      request_id: request_id
    }, config);
    
    res.send(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}

--- File: src/controllers/external/stable-diffusion/text_to_video.ts ---
import axios, { AxiosResponse } from 'axios';
import { Request, Response } from 'express';

interface IRequestBody {
    prompt: string;
    negative_prompt?: string;
    scheduler?: number;
    seconds?: number;
    // Include other parameters as necessary
  }
  
export const text_to_video = async (req: Request, res: Response): Promise<void> => {
  
  const { prompt, negative_prompt, scheduler, seconds } = req.body as IRequestBody;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response: AxiosResponse = await axios.post('https://stablediffusionapi.com/api/v5/text2video', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      prompt,
      negative_prompt,
      scheduler,
      seconds
    }, config);

    res.send(response.data);

  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}



--- File: src/controllers/internal/ai-coach.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, {
      headers: {
        Authorization: `Bearer ${process.env.SHARED_SECRET}`
      }
    });

    console.log(aiResponse)

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: src/controllers/internal/authentication.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            console.log(user)
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}

      // Check if the token is the shared secret
    if (token === process.env.SHARED_SECRET) {
        // If it is, call next() to proceed to the next middleware function or route handler
        return next();
    }
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: src/controllers/internal/exercise.ts ---
import express, { NextFunction, Request, Response } from 'express';
import ExerciseModel from '../../models/Exercise.model';

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, } = req.body;
    const exercise = new ExerciseModel({ title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, });
    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllExercises = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await ExerciseModel.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const exercise = await ExerciseModel.findById(req.params.id);
      if (!exercise) {
          return res.status(404).send();
      }
      res.send(exercise);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const exercise = await ExerciseModel.findByIdAndDelete(req.params.id);
    if (!exercise) {
        return res.status(404).send();
    }
    res.send(exercise);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/ingredients.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const results = [];

    for (const ingredientData of ingredientsData) {
      // First, try to find an existing ingredient with the same name
      let ingredient = await IngredientModel.findOne({ name: ingredientData.name });

      // If the ingredient doesn't exist, create a new one
      if (!ingredient) {
        const result = await IngredientModel.updateOne(
          { name: ingredientData.name },
          { $setOnInsert: ingredientData },
          { upsert: true }
        );

        // If an upsert took place, fetch the new ingredient
        if (result.upsertedCount > 0 && result.upsertedId) {
          ingredient = await IngredientModel.findById(result.upsertedId._id);
        }
      }

      // Add the ingredient (either existing or new) to the results array
      if (ingredient) {
        results.push(ingredient._id);
      }
    }

    res.status(201).json({
      message: 'Ingredients processed successfully',
      ingredients: results,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/meal-plan.ts ---
import { NextFunction, Request, Response } from "express";
import MealPlanModel from "../../models/MealPlan.model";

export const createMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlanData = req.body;
    const mealPlan = new MealPlanModel(mealPlanData);
    await mealPlan.save();

    res.status(201).json({
      message: 'MealPlan created successfully',
      mealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlan = await MealPlanModel.findById(req.params.id).populate('meals');
    if (!mealPlan) {
      return res.status(404).send();
    }
    res.send(mealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getAllMealPlans = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlans = await MealPlanModel.find({}).populate('meals');
    res.send(mealPlans);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};


export const updateMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['startDate', 'endDate', 'meals'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).send({ error: 'Invalid updates!' });
    }

    const mealPlan = await MealPlanModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!mealPlan) {
      return res.status(404).send();
    }

    res.send(mealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlan = await MealPlanModel.findByIdAndDelete(req.params.id);
    if (!mealPlan) {
      return res.status(404).send();
    }
    res.send(mealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/meal.ts ---
import express, { NextFunction, Request, Response } from 'express';
import MealModel from '../../models/Meal.model';

export const createMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealData = req.body;
    const meal = new MealModel(mealData);
    await meal.save();

    res.status(201).json({
      message: 'Meal created successfully',
      meal,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllMeals = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meals = await MealModel.find({}).populate('recipes');
      res.send(meals);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meal = await MealModel.findById(req.params.id).populate('recipes');
      if (!meal) {
          return res.status(404).send();
      }
      res.send(meal);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndDelete(req.params.id);
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};


--- File: src/controllers/internal/points.ts ---
import express, { NextFunction, Request, Response } from 'express';
import PointsModel from '../../models/Pts.model';

export const createPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const pointsData = req.body;
    const points = new PointsModel(pointsData);
    await points.save();

    res.status(201).json({
      message: 'Points created successfully',
      points,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const points = await PointsModel.find({});
      res.send(points);
  } catch (e) {
      console.error(e);
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const points = await PointsModel.findById(req.params.id);
      if (!points) {
          return res.status(404).send();
      }
      res.send(points);
  } catch (e) {
      console.error(e);
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updatePoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const points = await PointsModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!points) {
        return res.status(404).send();
    }
    res.send(points);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deletePoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const points = await PointsModel.findByIdAndDelete(req.params.id);
    if (!points) {
        return res.status(404).send();
    }
    res.send(points);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/recipe.ts ---

import express, { NextFunction, Request, Response } from 'express';
import RecipeModel from '../../models/Recipe.model';

export const createRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const recipeData = req.body;
    const recipe = new RecipeModel(recipeData);
    await recipe.save();

    res.status(201).json({
      message: 'Recipe created successfully',
      recipe,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllRecipes = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const recipes = await RecipeModel.find({}).populate('ingredients.ingredient');
      res.send(recipes);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const recipe = await RecipeModel.findById(req.params.id).populate('ingredients.ingredient');
      if (!recipe) {
          return res.status(404).send();
      }
      res.send(recipe);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const recipe = await RecipeModel.findByIdAndDelete(req.params.id);
    if (!recipe) {
        return res.status(404).send();
    }
    res.send(recipe);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['name', 'ingredients', 'instructions', 'preparationTime', 'cookingTime', 'servings', 'cuisine', 'course', 'diet', 'image'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).send({ error: 'Invalid updates!' });
    }

    const recipe = await RecipeModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!recipe) {
      return res.status(404).send();
    }

    res.send(recipe);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(400).send(e);
  }
};

--- File: src/controllers/internal/user-meal-plan.ts ---
import express, { NextFunction, Request, Response } from 'express';
import UserMealPlanModel from '../../models/UserMealPlan.model';

export const createUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { user, mealPlan, date } = req.body;
    const userMealPlan = new UserMealPlanModel({ user, mealPlan, date });
    await userMealPlan.save();

    res.status(201).json({
      message: 'UserMealPlan created successfully',
      userMealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllUserMealPlans = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlans = await UserMealPlanModel.find({});
    res.send(userMealPlans);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const userMealPlan = await UserMealPlanModel.findById(req.params.id).populate('user').populate('mealPlan');
      if (!userMealPlan) {
          return res.status(404).send();
      }
      res.send(userMealPlan);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['user', 'mealPlan', 'date'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).json({ error: 'Invalid updates!' });
    }

    const userMealPlan = await UserMealPlanModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!userMealPlan) {
      return res.status(404).send();
    }

    res.send(userMealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlan = await UserMealPlanModel.findByIdAndDelete(req.params.id);
    if (!userMealPlan) {
        return res.status(404).send();
    }
    res.send(userMealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/user.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          }).populate({
            path: 'aiChats',
            options: { limit: 3, sort: { createdAt: -1 }}
          }).populate({
            path: 'points',
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/models/AICoachChat.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachChatDocument extends Document {
  user: IUserDocument;
  aiCoachName: string;
  messages: {
    from: 'User' | 'AICoach';
    body: string;
    createdAt: Date;
  }[];
}

const AICoachChatSchema = new Schema<IAICoachChatDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiCoachName: { type: String, required: true },
  messages: [{
    from: { type: String, enum: ['user', 'assistant', 'system'], required: true },
    body: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
  }],
});

const AICoachChatModel = mongoose.model<IAICoachChatDocument>('AICoachChat', AICoachChatSchema);

export default AICoachChatModel;

--- File: src/models/Acheivement.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IAchievementDocument extends Document {
  name: string;
  description: string;
  icon: string; // URL to the icon image
  xp: number; // Amount of XP points awarded for this achievement
  condition: string; // Description of the condition to earn the achievement
}

const achievementSchema = new Schema<IAchievementDocument>({
  name: { type: String, required: true },
  description: { type: String, required: true },
  icon: { type: String, required: true },
  xp: { type: Number, required: true },
  condition: { type: String, required: true },
});

const Achievement = mongoose.model<IAchievementDocument>('Achievement', achievementSchema);

export default Achievement;

--- File: src/models/ComminityPost.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IComment {
  user: IUserDocument;
  content: string;
  date: Date;
}

export interface ICommunityPostDocument extends Document {
  user: IUserDocument;
  content: string;
  date: Date;
  likes: IUserDocument[];
  comments: IComment[];
}

const commentSchema = new Schema<IComment>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, default: Date.now },
});

const communityPostSchema = new Schema<ICommunityPostDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, default: Date.now },
  likes: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  comments: [commentSchema],
});

const CommunityPost = mongoose.model<ICommunityPostDocument>('CommunityPost', communityPostSchema);

export default CommunityPost;

--- File: src/models/Exercise.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}

export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[];
  targetMuscleGroups: IMuscleGroup[];
  videoSearchTerm: string;
  safetyInstructions: string;
  tips: string[];
  benefits: string[];
  variations: string[];
  warmUp: string;
  cooldown: string;
  prerequisites: string[];
  commonMistakes: string[];
  progression: string;
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true, default: "" },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true, default: "" },
  description: { type: String, required: true, default: "" },
  type: { type: String, required: true, default: "" },
  tags: { type: [String], required: true, default: [] },
  equipment: { type: [String], required: true, default: [] },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: true, default: [] },
  videoSearchTerm: { type: String, required: true, default: "" },
  safetyInstructions: { type: String, required: true, default: "" },
  tips: { type: [String], required: true, default: [] },
  benefits: { type: [String], required: true, default: [] },
  variations: { type: [String], required: true, default: [] },
  warmUp: { type: String, required: true, default: "" },
  cooldown: { type: String, required: true, default: "" },
  prerequisites: { type: [String], required: true, default: [] },
  commonMistakes: { type: [String], required: true, default: [] },
  progression: { type: String, required: true, default: "" },
});

const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);

export default ExerciseModel;

--- File: src/models/Feedback.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IFeedbackDocument extends Document {
  user: mongoose.Schema.Types.ObjectId; // Reference to the user who gave the feedback
  rating: number; // User's rating of the app
  comments: string; // User's comments
  date: Date; // Date when the feedback was given
}

const feedbackSchema = new Schema<IFeedbackDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  rating: { type: Number, required: true },
  comments: { type: String, required: false },
  date: { type: Date, default: Date.now },
});

const Feedback = mongoose.model<IFeedbackDocument>('Feedback', feedbackSchema);

export default Feedback;

--- File: src/models/Group.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IGroupDocument extends Document {
  name: string;
  description: string;
  createdDate: Date;
  members: IUserDocument[];
  // Add more fields as needed
}

const groupSchema = new Schema<IGroupDocument>({
  name: { type: String, required: true },
  description: { type: String, required: true },
  createdDate: { type: Date, default: Date.now },
  members: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  // Add more fields based on your requirements
});

const GroupModel = mongoose.model<IGroupDocument>('Group', groupSchema);

export default GroupModel;

--- File: src/models/Ingredient.model.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  calories: number;
  serving_size_g: number;
  fat_total_g: number;
  fat_saturated_g: number;
  protein_g: number;
  sodium_mg: number;
  potassium_mg: number;
  cholesterol_mg: number;
  carbohydrates_total_g: number;
  fiber_g: number;
  sugar_g: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  calories: { type: Number, required: true },
  serving_size_g: { type: Number, required: true },
  fat_total_g: { type: Number, required: true },
  fat_saturated_g: { type: Number, required: true },
  protein_g: { type: Number, required: true },
  sodium_mg: { type: Number, required: true },
  potassium_mg: { type: Number, required: true },
  cholesterol_mg: { type: Number, required: true },
  carbohydrates_total_g: { type: Number, required: true },
  fiber_g: { type: Number, required: true },
  sugar_g: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>("Ingredient", ingredientSchema);

export default Ingredient;

--- File: src/models/Meal.model.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export default Meal;

--- File: src/models/MealPlan.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: src/models/Notification.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface INotificationDocument extends Document {
  user: IUserDocument;
  content: string;
  date: Date;
  viewed: boolean;
}

const NotificationSchema = new Schema<INotificationDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, required: true },
  viewed: { type: Boolean, default: false },
});

const NotificationModel = mongoose.model<INotificationDocument>('Notification', NotificationSchema);

export default NotificationModel;

--- File: src/models/Payment.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IPaymentDocument extends Document {
  user: IUserDocument;
  amount: number;
  date: Date;
  service: string;
  subscriptionType: string;
  transactionId: string;
  status: string;
}

const paymentSchema = new Schema<IPaymentDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  date: { type: Date, required: true },
  service: { type: String, required: true },
  subscriptionType: { type: String, required: true },
  transactionId: { type: String, required: true },
  status: { type: String, required: true },
});

const PaymentModel = mongoose.model<IPaymentDocument>('Payment', paymentSchema);

export default PaymentModel;

--- File: src/models/Pts.model.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPointsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PointsSchema = new Schema<IPointsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PointsModel = mongoose.model<IPointsDocument>('Points', PointsSchema);

export default PointsModel;

--- File: src/models/Recipe.model.ts ---
import mongoose, { Schema, Document } from "mongoose";
import { IIngredient } from "./Ingredient.model";

interface IRecipeIngredient {
  ingredient: IIngredient;
  quantity: number;
}

export interface IRecipe extends Document {
  name: string;
  ingredients: IRecipeIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeIngredientSchema = new Schema({
  ingredient: { type: Schema.Types.ObjectId, ref: 'Ingredient', required: true },
  quantity: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [recipeIngredientSchema],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export default Recipe;

--- File: src/models/User.model.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

  const user = {
    foodPreferences: [
      "dietaryRequirements": ["Vegetarian"],
      "fitnessGoals": ["Lose weight", "Build muscle"],
      "preferredCuisine": ["Italian", "Asian"],
    ]
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: src/models/UserChat.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IMessage {
  sender: IUserDocument;
  message: string;
  timestamp: Date;
}

export interface IUserChatDocument extends Document {
  participants: IUserDocument[];
  messages: IMessage[];
}

const messageSchema = new Schema<IMessage>({
  sender: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  message: { type: String, required: true },
  timestamp: { type: Date, default: Date.now },
});

const userChatSchema = new Schema<IUserChatDocument>({
  participants: [{ type: Schema.Types.ObjectId, ref: 'User', required: true }],
  messages: [messageSchema],
});

const UserChat = mongoose.model<IUserChatDocument>('UserChat', userChatSchema);

export default UserChat;

--- File: src/models/UserMealPlan.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

export default UserMealPlanModel

--- File: src/models/UserMetrics.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

export default UserMetrics;

--- File: tsconfig.json ---
{
  "compilerOptions": {
      "target": "es6",
      "module": "commonjs",
      "outDir": "./dist",
      "strict": true,
      "esModuleInterop": true,
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}


--- File: src/app.ts ---
// backend/src/app.ts
import session from 'express-session';
import passport from 'passport';
import { passportConfig } from './config/passport';

import dotenv from 'dotenv';
import express from 'express';
require('./config/db');
dotenv.config();

const app = express();
app.use(express.json());

// Passport middleware
app.use(session({ secret: process.env.JWT_SECRET as string, resave: false, saveUninitialized: false }));
app.use(passport.initialize()); 
passportConfig(passport);

app.use(require('./routes/base-route'));

const port = process.env.PORT || 5001;

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

export default app;

--- File: src/config/db.ts ---

const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

mongoose.connect(process.env.MONGODB_URI as string, { 
    dbName: process.env.MONGODB_DB_NAME as string, 
    useNewUrlParser: true, 
    useUnifiedTopology: true, 
  })
  .then(() => console.log('Database connected!'))
  .catch((err: any) => console.log(err));

--- File: src/config/passport.ts ---
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { PassportStatic } from 'passport';
import { ExtractJwt, Strategy as JwtStrategy } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import User, { IUserDocument } from '../models/User.model';

interface IJwtPayload {
    user: string;
    iat: number;
    exp: number;
}

export const passportConfig = (passport: PassportStatic) => {
    passport.use(
        'local-login',
        new LocalStrategy(async (username, password, done) => {
            try {
                const user = await User.findOne({ username: username.toLowerCase() });
                if (!user) {
                    return done(null, false, { message: `Username ${username} not found.` });
                }
                user.comparePassword(password, (err: Error, isMatch: boolean) => {
                    if (err) { return done(err); }
                    if (isMatch) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Invalid username or password.' });
                    }
                });
            } catch (err) {
                return done(err);
            }
        })
    );

    passport.use(
		'local-signup',
		new LocalStrategy({ usernameField: 'username', passReqToCallback: true }, async (req, username, password, done) => {
			try {
				const existingUser = await User.findOne({ username: username.toLowerCase() });
	
				if (existingUser) {
					return done(null, false, { message: `Username ${username} already exists.` });
				}
	
				// Hash password
				const salt = await bcrypt.genSalt(10);
				const hashedPassword = await bcrypt.hash(password, salt);
	
				// Create new user
                const { email, subscription } = req.body;
				const newUser = new User({ username: username.toLowerCase(), password: hashedPassword, email: email});
                
				const savedUser = await newUser.save();
                console.log(savedUser);
				return done(null, savedUser);
			} catch (err) {
				done(err);
			}
		})
	);

    passport.use(
        new JwtStrategy(
            {
                jwtFromRequest: ExtractJwt.fromHeader('authorization'),
                secretOrKey: process.env.JWT_SECRET || 'defaultsecret',
            },
            (jwtPayload: IJwtPayload, done) => {
                User.findOne({ username: jwtPayload.user }, (err: any, user: IUserDocument) => {
                    if (err) { return done(err, false); }
                    if (user) {
                        return done(null, user);
                    } else {
                        return done(null, false, { message: 'Unauthorized access.' });
                    }
                });
            }
        )
    );

    passport.serializeUser((user: any, done: any) => {
		done(null, user.id);
	});

    passport.deserializeUser((id: any, done: any) => {
		User.findById(id, (err: any, user: mongoose.Document & IUserDocument) => {
			done(err, user);
		});
	});
};


--- File: src/constants/openai-models.constant.ts ---
interface OpenAiCompletionModels {
    readonly textdavinci003 : string;
    readonly textdavinci002 : string;
    readonly textcurie001 : string;
    readonly textbabbage001 : string;
    readonly textada001 : string;
}

interface OpenAiChatModels {
    readonly gpt4 : string;
    readonly gpt40314 : string;
    readonly gpt432k : string;
    readonly gpt432k0314 : string;
    readonly gpt35turbo : string;
    readonly gpt35turbo0301 : string;
}

export const OpenAiCompletionModels: OpenAiCompletionModels = {
    textdavinci003 : 'text-davinci-003',
    textdavinci002 : 'text-davinci-002',
    textcurie001 : 'text-curie-001',
    textbabbage001 : 'text-babbage-001',
    textada001 : 'text-ada-001'
}

export const OpenAiChatModels: OpenAiChatModels = {
    gpt4 : 'gpt-4',
    gpt40314 : 'gpt-4-0314',
    gpt432k : 'gpt-4-32k',
    gpt432k0314 : 'gpt-4-32k-0314',
    gpt35turbo : 'gpt-3.5-turbo',
    gpt35turbo0301 : 'gpt-3.5-turbo-0301'
}

--- File: src/controllers/external/bard/chat.ts ---
import { Request, Response } from 'express';
import fetch from 'node-fetch';

export async function getChat(req: Request, res: Response) {
    try {
        const request = await fetch("https://api.bardapi.dev/chat", {
            headers: { Authorization: `Bearer ${process.env.BARD_API_KEY}` },
            method: "POST",
            body: JSON.stringify({ input: req.body.input }),
        });
        console.log(process.env.BARD_API_KEY)
        console.log(request)
        const response:any = await request.json();

        res.json(response.output);
    } catch (err) {
        res.status(500).json({ error: err?.toString() });
    }
}

--- File: src/controllers/external/openai/chat.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';
import { OpenAiChatModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getChat = async (req: Request, res: Response, next?: NextFunction) => {
    console.log('GETTING CHAT')
    try {
        const messages: any[] = req.body.messages
        const model = req.body.model ? req.body.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 3000;
        
        console.log(messages);
        console.log(model);
        console.log(maxTokens);
        const sleep = () => new Promise(r => setTimeout(r, 1000));
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        console.log(gptResponse)
        
        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        
        res.json({ response });
    } catch (err) {
        res.status(500).json({ error: err });
    }
};

export const getChatLocal = async (data:any): Promise<CreateChatCompletionResponse | null> => {
    console.log('sending request to openai')
    try {
        console
        const messages: any[] = data.messages
        const model = data.model ? data.model : OpenAiChatModels['gpt35turbo'];
        const maxTokens = data.maxTokens ? data.maxTokens : 3000;
        
        const gptResponse = await openai.createChatCompletion({
            model: model,
            messages: messages,
            max_tokens: maxTokens
        });

        const response: CreateChatCompletionResponse | null = gptResponse ? gptResponse?.data : null;
        return response

    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: src/controllers/external/openai/completion.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, OpenAIApi } from 'openai';
import { OpenAiCompletionModels } from '../../../constants/openai-models.constant';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getCompletion = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const prompt = req.body.prompt
        const model = req.body.model ? req.body.model : OpenAiCompletionModels['textbabbage001'];
        const maxTokens = req.body.maxTokens ? req.body.maxTokens : 1000;
        
        const gptResponse = await openai.createCompletion({
            model: model,
            prompt: prompt,
            max_tokens: maxTokens
        });
        
        const response = gptResponse ? gptResponse?.data : 'Could not find result';
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};


--- File: src/controllers/external/openai/image.ts ---
import dotenv from 'dotenv';
import { NextFunction, Request, Response } from 'express';
import { Configuration, OpenAIApi } from 'openai';

dotenv.config();

const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export const getImage = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const prompt = req.body.prompt;
        const numImages = req.body.n ? req.body.n : 1;
        const imageSize = req.body.size ? req.body.size : "1024x1024";
        
        const imageResponse = await openai.createImage({
            prompt: prompt,
            n: numImages,
            size: imageSize
        });
        
        const response = imageResponse ? imageResponse?.data : 'Could not find result';
        
        res.json({ response });
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const getImageLocal = async (description: any) => {
    try {
        const prompt = description;
        const numImages = 1;
        const imageSize =  "1024x1024";
        
        const imageResponse = await openai.createImage({
            prompt: prompt,
            n: numImages,
            size: imageSize
        });
        
        return imageResponse ? imageResponse?.data : 'Could not find result';
        
    } catch (err) {
        console.error(err); // optional, logs the error on your server
        return null;
    }
};

--- File: src/controllers/external/stable-diffusion/fetch_from_queue.ts ---
import axios from 'axios';
import { Request, Response } from 'express';

export const fetch_from_queue = async (req: Request, res: Response): Promise<void> => {
    const { request_id } = req.body;
    const config = {headers: {'Content-Type': 'application/json'}};
  
    try {
      const response = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth/fetch', {
        key: process.env.STABLE_DIFFUSION_API_KEY,
        request_id: request_id
      }, config);
      
      res.send(response.data);
    } catch (error) {
      console.error(error);
      res.status(500).send('Server error');
    }
  }

--- File: src/controllers/external/stable-diffusion/text_to_image.ts ---
import axios, { AxiosResponse } from 'axios';
import { Request, Response } from 'express';

interface IRequestBody {
    prompt: string;
    negative_prompt?: string;
    width?: number;
    height?: number;
    samples?: number;
    num_inference_steps?: number;
    self_attention?: string;
    enhance_prompt?: string;
    upscale?: string;
    // Include other parameters as necessary
  }
  
export const text_to_image = async (req: Request, res: Response): Promise<void> => {
  
  const { prompt, negative_prompt, width, height, samples, num_inference_steps, self_attention = 'yes', enhance_prompt = 'yes', upscale = 'yes' } = req.body as IRequestBody;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response: AxiosResponse = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      model_id: "midjourney",
      prompt,
      negative_prompt,
      width,
      height,
      samples,
      num_inference_steps,
      self_attention,
      enhance_prompt,
      upscale
    }, config);

    res.send(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}

export const get_queued_image = async (req: Request, res: Response): Promise<void> => {
  const { request_id } = req.body;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response = await axios.post('https://stablediffusionapi.com/api/v4/dreambooth/fetch', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      request_id: request_id
    }, config);
    
    res.send(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}

--- File: src/controllers/external/stable-diffusion/text_to_video.ts ---
import axios, { AxiosResponse } from 'axios';
import { Request, Response } from 'express';

interface IRequestBody {
    prompt: string;
    negative_prompt?: string;
    scheduler?: number;
    seconds?: number;
    // Include other parameters as necessary
  }
  
export const text_to_video = async (req: Request, res: Response): Promise<void> => {
  
  const { prompt, negative_prompt, scheduler, seconds } = req.body as IRequestBody;
  const config = {headers: {'Content-Type': 'application/json'}};

  try {
    const response: AxiosResponse = await axios.post('https://stablediffusionapi.com/api/v5/text2video', {
      key: process.env.STABLE_DIFFUSION_API_KEY,
      prompt,
      negative_prompt,
      scheduler,
      seconds
    }, config);

    res.send(response.data);

  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
}



--- File: src/controllers/internal/ai-coach.ts ---
import express, { NextFunction, Request, Response } from 'express';
import AICoachChatModel from '../../models/AICoachChat.model';
import axios from 'axios';

export const startConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    console.log('starting conversation')
    const { userId, aiCoachName, initialMessage } = req.body;
    const conversation = new AICoachChatModel({
      user: userId,
      aiCoachName,
      messages: [{
        from: 'user',
        body: initialMessage,
        createdAt: Date.now(),
      }],
    });

    await conversation.save();


    res.status(201).json({
      message: 'Conversation started successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const addMessage = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId, from, body } = req.body;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    conversation.messages.push({
      from,
      body,
      createdAt: new Date(),
    });
    await conversation.save();

    const aiRequest = {
      messages: conversation.messages.map(message => ({
        role: message.from.toLowerCase(),
        content: message.body,
      })),
      maxTokens: 2000, // optional, replace with your max tokens if different
    };

    const aiResponse = await axios.post('http://localhost:5001/api/private/openai/chat', aiRequest, {
      headers: {
        Authorization: `Bearer ${process.env.SHARED_SECRET}`
      }
    });

    console.log(aiResponse)

    conversation.messages.push({
      from: aiResponse.data.response.choices[0].message.role,
      body: aiResponse.data.response.choices[0].message.content, // assuming the AI's message is in the 'choices[0].message.content' property of the response data
      createdAt: new Date(),
    });

    await conversation.save();

    res.status(200).json({
      message: 'Message added successfully',
      conversation,
    });
  } catch (error: any) {
    res.status(500).json({ error: error.response.data });
  }
};

export const getConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation retrieved successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllConversationsForUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { userId } = req.params;
    const conversations = await AICoachChatModel.find({ user: userId });
    if (!conversations) {
      return res.status(404).json({ error: 'No conversations found for this user.' });
    }

    res.status(200).json({
      message: 'Conversations retrieved successfully',
      conversations,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const deleteConversation = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { conversationId } = req.params;
    const conversation = await AICoachChatModel.findByIdAndDelete(conversationId);
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found.' });
    }

    res.status(200).json({
      message: 'Conversation deleted successfully',
      conversation,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

--- File: src/controllers/internal/authentication.ts ---
import express, { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
const router = express.Router();

// Secret key for JWT
const jwtSecret = process.env.JWT_SECRET;

export const register = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-signup', (err: any, user:  any, info: any) => {
        if (err) {
            console.log(err)
            return next(err);
        }
        if (!user) {
            return res.status(400).json({ msg: info.message });
        }

        // User registered successfully, log in the user
        req.logIn(user, async function(err) {
            console.log(user)
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = await jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const login = (req: Request, res: Response, next: NextFunction) => {
    passport.authenticate('local-login', (err: any, user: any, info: any) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).json({ msg: info.message });
        }
        req.logIn(user, function(err) {
            if (err) { 
                return next(err); 
            }
            // On successful login, a JWT is created and sent back.
            const token = jwt.sign({ userId: user._id }, jwtSecret as string, { expiresIn: '1d' });
            return res.json({ token });
        });
    })(req, res, next);
};

export const logout = async (req: Request, res: Response) => {
    res.json({ msg: 'Logged out' });
}

export const checkUserToken = (req: Request, res: Response, next: NextFunction) => {
	// Get the token from the 'Authorization' header
	const authHeader = req.headers['authorization'];
	const token = authHeader && authHeader.split(' ')[1];

	if (!token || !authHeader.startsWith('Bearer ')) {
	  return res.status(401).send('Access Token Required');
	}

      // Check if the token is the shared secret
    if (token === process.env.SHARED_SECRET) {
        // If it is, call next() to proceed to the next middleware function or route handler
        return next();
    }
  
	try {
	  const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
  
	  // Attach the decoded data to req.user
	  req.user = decoded;
  
	  // Call next() to proceed to the next middleware function or route handler
	  next();
	} catch (error) {
	  console.log(error);
	  return res.status(403).send('Invalid Access Token');
	}
};

--- File: src/controllers/internal/exercise.ts ---
import express, { NextFunction, Request, Response } from 'express';
import ExerciseModel from '../../models/Exercise.model';

export const createExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, } = req.body;
    const exercise = new ExerciseModel({ title, description, type, tags, equipment, targetMuscleGroups, videoSearchTerm, safetyInstructions, tips, benefits, variations, warmUp, cooldown, prerequisites, commonMistakes, progression, });
    await exercise.save();

    res.status(201).json({
      message: 'Exercise created successfully',
      exercise,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllExercises = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await ExerciseModel.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const exercise = await ExerciseModel.findById(req.params.id);
      if (!exercise) {
          return res.status(404).send();
      }
      res.send(exercise);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteExercise = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const exercise = await ExerciseModel.findByIdAndDelete(req.params.id);
    if (!exercise) {
        return res.status(404).send();
    }
    res.send(exercise);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/ingredients.ts ---
import express, { NextFunction, Request, Response } from 'express';
import IngredientModel from '../../models/Ingredient.model';

export const createIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientData = req.body;
    const ingredient = new IngredientModel(ingredientData);
    await ingredient.save();

    res.status(201).json({
      message: 'Ingredient created successfully',
      ingredient,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const createIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredientsData = req.body;
    const results = [];

    for (const ingredientData of ingredientsData) {
      // First, try to find an existing ingredient with the same name
      let ingredient = await IngredientModel.findOne({ name: ingredientData.name });

      // If the ingredient doesn't exist, create a new one
      if (!ingredient) {
        const result = await IngredientModel.updateOne(
          { name: ingredientData.name },
          { $setOnInsert: ingredientData },
          { upsert: true }
        );

        // If an upsert took place, fetch the new ingredient
        if (result.upsertedCount > 0 && result.upsertedId) {
          ingredient = await IngredientModel.findById(result.upsertedId._id);
        }
      }

      // Add the ingredient (either existing or new) to the results array
      if (ingredient) {
        results.push(ingredient._id);
      }
    }

    res.status(201).json({
      message: 'Ingredients processed successfully',
      ingredients: results,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllIngredients = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredients = await IngredientModel.find({});
      res.send(ingredients);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const ingredient = await IngredientModel.findById(req.params.id);
      if (!ingredient) {
          return res.status(404).send();
      }
      res.send(ingredient);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteIngredient = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const ingredient = await IngredientModel.findByIdAndDelete(req.params.id);
    if (!ingredient) {
        return res.status(404).send();
    }
    res.send(ingredient);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/meal-plan.ts ---
import { NextFunction, Request, Response } from "express";
import MealPlanModel from "../../models/MealPlan.model";

export const createMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlanData = req.body;
    const mealPlan = new MealPlanModel(mealPlanData);
    await mealPlan.save();

    res.status(201).json({
      message: 'MealPlan created successfully',
      mealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlan = await MealPlanModel.findById(req.params.id).populate('meals');
    if (!mealPlan) {
      return res.status(404).send();
    }
    res.send(mealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getAllMealPlans = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlans = await MealPlanModel.find({}).populate('meals');
    res.send(mealPlans);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};


export const updateMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['startDate', 'endDate', 'meals'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).send({ error: 'Invalid updates!' });
    }

    const mealPlan = await MealPlanModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!mealPlan) {
      return res.status(404).send();
    }

    res.send(mealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealPlan = await MealPlanModel.findByIdAndDelete(req.params.id);
    if (!mealPlan) {
      return res.status(404).send();
    }
    res.send(mealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/meal.ts ---
import express, { NextFunction, Request, Response } from 'express';
import MealModel from '../../models/Meal.model';

export const createMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const mealData = req.body;
    const meal = new MealModel(mealData);
    await meal.save();

    res.status(201).json({
      message: 'Meal created successfully',
      meal,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllMeals = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meals = await MealModel.find({}).populate('recipes');
      res.send(meals);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const meal = await MealModel.findById(req.params.id).populate('recipes');
      if (!meal) {
          return res.status(404).send();
      }
      res.send(meal);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteMeal = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const meal = await MealModel.findByIdAndDelete(req.params.id);
    if (!meal) {
        return res.status(404).send();
    }
    res.send(meal);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};


--- File: src/controllers/internal/points.ts ---
import express, { NextFunction, Request, Response } from 'express';
import PointsModel from '../../models/Pts.model';

export const createPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const pointsData = req.body;
    const points = new PointsModel(pointsData);
    await points.save();

    res.status(201).json({
      message: 'Points created successfully',
      points,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const points = await PointsModel.find({});
      res.send(points);
  } catch (e) {
      console.error(e);
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getPoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const points = await PointsModel.findById(req.params.id);
      if (!points) {
          return res.status(404).send();
      }
      res.send(points);
  } catch (e) {
      console.error(e);
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updatePoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const points = await PointsModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!points) {
        return res.status(404).send();
    }
    res.send(points);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deletePoints = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const points = await PointsModel.findByIdAndDelete(req.params.id);
    if (!points) {
        return res.status(404).send();
    }
    res.send(points);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/recipe.ts ---

import express, { NextFunction, Request, Response } from 'express';
import RecipeModel from '../../models/Recipe.model';

export const createRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const recipeData = req.body;
    const recipe = new RecipeModel(recipeData);
    await recipe.save();

    res.status(201).json({
      message: 'Recipe created successfully',
      recipe,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllRecipes = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const recipes = await RecipeModel.find({}).populate('ingredients.ingredient');
      res.send(recipes);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const recipe = await RecipeModel.findById(req.params.id).populate('ingredients.ingredient');
      if (!recipe) {
          return res.status(404).send();
      }
      res.send(recipe);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const recipe = await RecipeModel.findByIdAndDelete(req.params.id);
    if (!recipe) {
        return res.status(404).send();
    }
    res.send(recipe);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateRecipe = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['name', 'ingredients', 'instructions', 'preparationTime', 'cookingTime', 'servings', 'cuisine', 'course', 'diet', 'image'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).send({ error: 'Invalid updates!' });
    }

    const recipe = await RecipeModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!recipe) {
      return res.status(404).send();
    }

    res.send(recipe);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(400).send(e);
  }
};

--- File: src/controllers/internal/user-meal-plan.ts ---
import express, { NextFunction, Request, Response } from 'express';
import UserMealPlanModel from '../../models/UserMealPlan.model';

export const createUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const { user, mealPlan, date } = req.body;
    const userMealPlan = new UserMealPlanModel({ user, mealPlan, date });
    await userMealPlan.save();

    res.status(201).json({
      message: 'UserMealPlan created successfully',
      userMealPlan,
    });
  } catch (error) {
    console.error(error); // optional, logs the error on your server
    res.status(500).json({ error: 'An error occurred while processing your request.' });
  }
};

export const getAllUserMealPlans = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlans = await UserMealPlanModel.find({});
    res.send(userMealPlans);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const userMealPlan = await UserMealPlanModel.findById(req.params.id).populate('user').populate('mealPlan');
      if (!userMealPlan) {
          return res.status(404).send();
      }
      res.send(userMealPlan);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const updateUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['user', 'mealPlan', 'date'];
    const isValidOperation = updates.every((update) => allowedUpdates.includes(update));

    if (!isValidOperation) {
      return res.status(400).json({ error: 'Invalid updates!' });
    }

    const userMealPlan = await UserMealPlanModel.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });

    if (!userMealPlan) {
      return res.status(404).send();
    }

    res.send(userMealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUserMealPlan = async (req: Request, res: Response, next?: NextFunction) => {
  try {
    const userMealPlan = await UserMealPlanModel.findByIdAndDelete(req.params.id);
    if (!userMealPlan) {
        return res.status(404).send();
    }
    res.send(userMealPlan);
  } catch (e) {
    console.error(e); // optional, logs the error on your server
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/controllers/internal/user.ts ---
import express, { NextFunction, Request, Response } from 'express';
import User from '../../models/User.model'; // Assuming this is the location of your User model

export const getAllUsers = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const users = await User.find({});
      res.send(users);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const getUserBasic = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id)
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
  };

export const getUser = async (req: Request, res: Response, next?: NextFunction) => {
    try {
        const user = await User.findById(req.params.id).populate({
            path: 'workoutPlans',
            populate: {
              path: 'workoutPlan',
              model: 'WorkoutPlan',
              populate: {
                path: 'exercises.exercise',
                model: 'Exercise'
              }
            }
          }).populate({
            path: 'mealPlans',
            populate: {
              path: 'mealPlan',
              model: 'MealPlan', // Make sure this matches the model name of the MealPlan model
              populate: {
                path: 'meals',
                model: 'Meal' // Make sure this matches the model name of the Meal model
              }
            }
          }).populate({
            path: 'aiChats',
            options: { limit: 3, sort: { createdAt: -1 }}
          }).populate({
            path: 'points',
          });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (e) {
        console.error(e); // optional, logs the error on your server
        res.status(500).json({ error: "An error occurred while processing your request." });
    }
};

export const updateUser = async (req: Request, res: Response, next?: NextFunction) => {
  console.log('update user')
  const updates = req.body;
  try {
      const user = await User.findById(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      Object.keys(updates).forEach((update) => user[update] = updates[update]);
      await user.save();
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

export const deleteUser = async (req: Request, res: Response, next?: NextFunction) => {
  try {
      const user = await User.findByIdAndDelete(req.params.id);
      if (!user) {
          return res.status(404).send();
      }
      res.send(user);
  } catch (e) {
      console.error(e); // optional, logs the error on your server
      res.status(500).json({ error: "An error occurred while processing your request." });
  }
};

--- File: src/models/AICoachChat.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IAICoachChatDocument extends Document {
  user: IUserDocument;
  aiCoachName: string;
  messages: {
    from: 'User' | 'AICoach';
    body: string;
    createdAt: Date;
  }[];
}

const AICoachChatSchema = new Schema<IAICoachChatDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  aiCoachName: { type: String, required: true },
  messages: [{
    from: { type: String, enum: ['user', 'assistant', 'system'], required: true },
    body: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
  }],
});

const AICoachChatModel = mongoose.model<IAICoachChatDocument>('AICoachChat', AICoachChatSchema);

export default AICoachChatModel;

--- File: src/models/Acheivement.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IAchievementDocument extends Document {
  name: string;
  description: string;
  icon: string; // URL to the icon image
  xp: number; // Amount of XP points awarded for this achievement
  condition: string; // Description of the condition to earn the achievement
}

const achievementSchema = new Schema<IAchievementDocument>({
  name: { type: String, required: true },
  description: { type: String, required: true },
  icon: { type: String, required: true },
  xp: { type: Number, required: true },
  condition: { type: String, required: true },
});

const Achievement = mongoose.model<IAchievementDocument>('Achievement', achievementSchema);

export default Achievement;

--- File: src/models/ComminityPost.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IComment {
  user: IUserDocument;
  content: string;
  date: Date;
}

export interface ICommunityPostDocument extends Document {
  user: IUserDocument;
  content: string;
  date: Date;
  likes: IUserDocument[];
  comments: IComment[];
}

const commentSchema = new Schema<IComment>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, default: Date.now },
});

const communityPostSchema = new Schema<ICommunityPostDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, default: Date.now },
  likes: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  comments: [commentSchema],
});

const CommunityPost = mongoose.model<ICommunityPostDocument>('CommunityPost', communityPostSchema);

export default CommunityPost;

--- File: src/models/Exercise.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IMuscleGroup {
  name: string;
}

export interface IExerciseDocument extends Document {
  title: string;
  description: string;
  type: string;
  tags: string[];
  explanation: string;
  equipment: string[];
  targetMuscleGroups: IMuscleGroup[];
  videoSearchTerm: string;
  safetyInstructions: string;
  tips: string[];
  benefits: string[];
  variations: string[];
  warmUp: string;
  cooldown: string;
  prerequisites: string[];
  commonMistakes: string[];
  progression: string;
}

const MuscleGroupSchema = new Schema<IMuscleGroup>({
  name: { type: String, required: true, default: "" },
});

export const ExerciseSchema = new Schema<IExerciseDocument>({
  title: { type: String, required: true, default: "" },
  description: { type: String, required: true, default: "" },
  type: { type: String, required: true, default: "" },
  tags: { type: [String], required: true, default: [] },
  equipment: { type: [String], required: true, default: [] },
  targetMuscleGroups: { type: [MuscleGroupSchema], required: true, default: [] },
  videoSearchTerm: { type: String, required: true, default: "" },
  safetyInstructions: { type: String, required: true, default: "" },
  tips: { type: [String], required: true, default: [] },
  benefits: { type: [String], required: true, default: [] },
  variations: { type: [String], required: true, default: [] },
  warmUp: { type: String, required: true, default: "" },
  cooldown: { type: String, required: true, default: "" },
  prerequisites: { type: [String], required: true, default: [] },
  commonMistakes: { type: [String], required: true, default: [] },
  progression: { type: String, required: true, default: "" },
});

const ExerciseModel = mongoose.model<IExerciseDocument>('Exercise', ExerciseSchema);

export default ExerciseModel;

--- File: src/models/Feedback.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IFeedbackDocument extends Document {
  user: mongoose.Schema.Types.ObjectId; // Reference to the user who gave the feedback
  rating: number; // User's rating of the app
  comments: string; // User's comments
  date: Date; // Date when the feedback was given
}

const feedbackSchema = new Schema<IFeedbackDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  rating: { type: Number, required: true },
  comments: { type: String, required: false },
  date: { type: Date, default: Date.now },
});

const Feedback = mongoose.model<IFeedbackDocument>('Feedback', feedbackSchema);

export default Feedback;

--- File: src/models/Group.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IGroupDocument extends Document {
  name: string;
  description: string;
  createdDate: Date;
  members: IUserDocument[];
  // Add more fields as needed
}

const groupSchema = new Schema<IGroupDocument>({
  name: { type: String, required: true },
  description: { type: String, required: true },
  createdDate: { type: Date, default: Date.now },
  members: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  // Add more fields based on your requirements
});

const GroupModel = mongoose.model<IGroupDocument>('Group', groupSchema);

export default GroupModel;

--- File: src/models/Ingredient.model.ts ---
import mongoose, { Schema } from "mongoose";

export interface IIngredient {
  name: string;
  calories: number;
  serving_size_g: number;
  fat_total_g: number;
  fat_saturated_g: number;
  protein_g: number;
  sodium_mg: number;
  potassium_mg: number;
  cholesterol_mg: number;
  carbohydrates_total_g: number;
  fiber_g: number;
  sugar_g: number;
}

const ingredientSchema = new Schema({
  name: { type: String, required: true },
  calories: { type: Number, required: true },
  serving_size_g: { type: Number, required: true },
  fat_total_g: { type: Number, required: true },
  fat_saturated_g: { type: Number, required: true },
  protein_g: { type: Number, required: true },
  sodium_mg: { type: Number, required: true },
  potassium_mg: { type: Number, required: true },
  cholesterol_mg: { type: Number, required: true },
  carbohydrates_total_g: { type: Number, required: true },
  fiber_g: { type: Number, required: true },
  sugar_g: { type: Number, required: true },
});

const Ingredient = mongoose.model<IIngredient>("Ingredient", ingredientSchema);

export default Ingredient;

--- File: src/models/Meal.model.ts ---
import mongoose, { Schema } from "mongoose";
import { IRecipe } from "./Recipe.model";

export interface IMeal extends Document {
  name: string; // e.g., "Breakfast", "Lunch", "Dinner"
  recipes: IRecipe[];
}

const mealSchema = new Schema({
  name: { type: String, required: true },
  recipes: [{ type: Schema.Types.ObjectId, ref: 'Recipe' }],
});

const Meal = mongoose.model<IMeal>('Meal', mealSchema);

export default Meal;

--- File: src/models/MealPlan.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMeal } from './Meal.model';

export interface IMealPlan extends Document {
  user: IUserDocument;
  meals: IMeal[];
}

const mealPlanSchema = new Schema({
    meals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Meal' }],
});

const MealPlan = mongoose.model<IMealPlan>('MealPlan', mealPlanSchema);

export default MealPlan;

--- File: src/models/Notification.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface INotificationDocument extends Document {
  user: IUserDocument;
  content: string;
  date: Date;
  viewed: boolean;
}

const NotificationSchema = new Schema<INotificationDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  date: { type: Date, required: true },
  viewed: { type: Boolean, default: false },
});

const NotificationModel = mongoose.model<INotificationDocument>('Notification', NotificationSchema);

export default NotificationModel;

--- File: src/models/Payment.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IPaymentDocument extends Document {
  user: IUserDocument;
  amount: number;
  date: Date;
  service: string;
  subscriptionType: string;
  transactionId: string;
  status: string;
}

const paymentSchema = new Schema<IPaymentDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  date: { type: Date, required: true },
  service: { type: String, required: true },
  subscriptionType: { type: String, required: true },
  transactionId: { type: String, required: true },
  status: { type: String, required: true },
});

const PaymentModel = mongoose.model<IPaymentDocument>('Payment', paymentSchema);

export default PaymentModel;

--- File: src/models/Pts.model.ts ---
import mongoose, { Document, ObjectId, Schema } from 'mongoose';

export interface IPointsDocument extends Document {
  user: ObjectId; // Reference to the user who owns the points
  points: number; // Current number of points
  history: { // History of points transactions
    date: Date;
    change: number; // Positive for points earned, negative for points spent
    reason: string; // Reason for the change in points
  }[];
}

const PointsSchema = new Schema<IPointsDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  points: { type: Number, default: 0 },
  history: [{
    date: { type: Date, default: Date.now },
    change: { type: Number, required: true },
    reason: { type: String, required: true },
  }],
});

const PointsModel = mongoose.model<IPointsDocument>('Points', PointsSchema);

export default PointsModel;

--- File: src/models/Recipe.model.ts ---
import mongoose, { Schema, Document } from "mongoose";
import { IIngredient } from "./Ingredient.model";

interface IRecipeIngredient {
  ingredient: IIngredient;
  quantity: number;
}

export interface IRecipe extends Document {
  name: string;
  ingredients: IRecipeIngredient[];
  instructions: string;
  preparationTime: number;
  cookingTime: number;
  servings: number;
  cuisine: string;
  course: string;
  diet: string;
  image: string;
}

const recipeIngredientSchema = new Schema({
  ingredient: { type: Schema.Types.ObjectId, ref: 'Ingredient', required: true },
  quantity: { type: Number, required: true },
});

const recipeSchema = new Schema({
  name: { type: String, required: true },
  ingredients: [recipeIngredientSchema],
  instructions: { type: String, required: true },
  preparationTime: { type: Number, required: true }, // in minutes
  cookingTime: { type: Number, required: true }, // in minutes
  servings: { type: Number, required: true },
  cuisine: { type: String, required: false },
  course: { type: String, required: false }, // e.g., "main course", "dessert", etc.
  diet: { type: String, required: false }, // e.g., "vegan", "gluten-free", etc.
  image: { type: String, required: false },
});

const Recipe = mongoose.model<IRecipe>('Recipe', recipeSchema);

export default Recipe;

--- File: src/models/User.model.ts ---
import bcrypt from 'bcryptjs';
import mongoose, { Document, Schema } from 'mongoose';
import { IUserMealPlanDocument } from './UserMealPlan.model';
import { IUserWorkoutPlanDocument } from './UserWorkoutPlan.model';
import { IPointsDocument } from './Pts.model';
import { IAICoachChatDocument } from './AICoachChat.model';

export enum SubscriptionType {
    FREE = 'free',
    PREMIUM = 'premium',
    PRO = 'pro',
    // Add more subscription types as needed
  }
  
  export interface ISubscription {
    type: SubscriptionType; // Type of subscription (e.g., free, premium, pro, etc.)
    startDate: Date; // Date when the subscription starts
    endDate: Date; // Date when the subscription ends
    isActive: boolean; // Whether the subscription is currently active
    // Additional Properties
    // Add more attributes as needed
  }

  const user = {
    foodPreferences: [
      "dietaryRequirements": ["Vegetarian"],
      "fitnessGoals": ["Lose weight", "Build muscle"],
      "preferredCuisine": ["Italian", "Asian"],
    ]
  }

export interface IUserDocument extends Document {
    [key: string]: any; 
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    gender: string;
    metrics: mongoose.Schema.Types.ObjectId;
    fitnessGoals: string[];
    dietaryRequirements: string[];
    allergies: string[];
    preferredCuisine: string[];
    points: IPointsDocument;
    subscription: ISubscription;
    lastLogin: Date;
    accountCreated: Date;
    mealPlans: IUserMealPlanDocument[];
    workoutPlans: IUserWorkoutPlanDocument[];
    aiChats: IAICoachChatDocument[];
    comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => void) => void;
}

const userSchema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    dateOfBirth: { type: Date, required: false },
    gender: { type: String, required: false },
    metrics: { type: mongoose.Schema.Types.ObjectId, ref: 'UserMetrics' },
    fitnessGoals: { type: [String], default: [] },
    dietaryRequirements: { type: [String], default: [] },
    allergies: { type: [String], default: [] },
    preferredCuisine: { type: [String], default: [] },
    points: { type: mongoose.Schema.Types.ObjectId, ref: 'Points' },
    subscription: {
        type: {
          type: String,
          enum: Object.values(SubscriptionType),
          required: true,
          default: SubscriptionType.FREE
        },
        startDate: { type: Date, required: true, default: Date.now },
        endDate: { type: String, required: false },
        isActive: { type: Boolean, default: true },
      },
    lastLogin: { type: Date, default: Date.now },
    mealPlans: [{ type: Schema.Types.ObjectId, ref: 'UserMealPlan' }],
    workoutPlans: [{ type: Schema.Types.ObjectId, ref: 'UserWorkoutPlan' }],
    aiChats: [{ type: Schema.Types.ObjectId, ref: 'AICoachChat' }],
    accountCreated: { type: Date, default: Date.now },
});

userSchema.methods.comparePassword = async function(candidatePassword: any, cb: any) {
    await bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

const User = mongoose.model<IUserDocument>('User', userSchema);

export default User; 

--- File: src/models/UserChat.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';

export interface IMessage {
  sender: IUserDocument;
  message: string;
  timestamp: Date;
}

export interface IUserChatDocument extends Document {
  participants: IUserDocument[];
  messages: IMessage[];
}

const messageSchema = new Schema<IMessage>({
  sender: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  message: { type: String, required: true },
  timestamp: { type: Date, default: Date.now },
});

const userChatSchema = new Schema<IUserChatDocument>({
  participants: [{ type: Schema.Types.ObjectId, ref: 'User', required: true }],
  messages: [messageSchema],
});

const UserChat = mongoose.model<IUserChatDocument>('UserChat', userChatSchema);

export default UserChat;

--- File: src/models/UserMealPlan.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';
import { IUserDocument } from './User.model';
import { IMealPlan } from './MealPlan.model';

export interface IUserMealPlanDocument extends Document {
  user: IUserDocument;
  mealPlan: IMealPlan;
  date: Date;
}

const UserMealPlanSchema = new Schema<IUserMealPlanDocument>({
  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  mealPlan: { type: Schema.Types.ObjectId, ref: 'MealPlan', required: true },
  date: { type: Date, required: true },
});

const UserMealPlanModel = mongoose.model<IUserMealPlanDocument>('UserMealPlan', UserMealPlanSchema);

export default UserMealPlanModel

--- File: src/models/UserMetrics.model.ts ---
import mongoose, { Document, Schema } from 'mongoose';

export interface IUserMetrics extends Document {
    userId: mongoose.Schema.Types.ObjectId;
    health: {
        weight: number;
        height: number;
        bodyFat: number;
        water: number;
        muscleRate: number;
        bmi: number;
        visceralFat: number;
        boneMass: number;
    };
    bodyMetrics: {
        waist: number;
        chest: number;
        hips: number;
        neck: number;
        biceps: number;
        forearms: number;
        wrists: number;
        thighs: number;
        calves: number;
        ankles: number;
    };
}

const userMetricsSchema = new Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    health: {
        weight: { type: Number, required: false },
        height: { type: Number, required: false },
        bodyFat: { type: Number, required: false },
        water: { type: Number, required: false },
        muscleRate: { type: Number, required: false },
        bmi: { type: Number, required: false },
        visceralFat: { type: Number, required: false },
        boneMass: { type: Number, required: false },
    },
    bodyMetrics: {
        waist: { type: Number, required: false },
        chest: { type: Number, required: false },
        hips: { type: Number, required: false },
        neck: { type: Number, required: false },
        biceps: { type: Number, required: false },
        forearms: { type: Number, required: false },
        wrists: { type: Number, required: false },
        thighs: { type: Number, required: false },
        calves: { type: Number, required: false },
        ankles: { type: Number, required: false },
    },
});

const UserMetrics = mongoose.model<IUserMetrics>('UserMetrics', userMetricsSchema);

export default UserMetrics;

--- File: tsconfig.json ---
{
  "compilerOptions": {
      "target": "es6",
      "module": "commonjs",
      "outDir": "./dist",
      "strict": true,
      "esModuleInterop": true,
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}
